#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'
class Ruby22Parser < RubyParser::Parser


require "ruby_lexer"
require "ruby_parser_extras"

# :stopdoc:

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-607,-100,273,-102,584,-103,271,-607,-607,-607,756,271,665,-607,-607',
'271,-607,-615,825,-516,590,221,-509,-103,242,-607,-516,271,584,-509',
'584,-105,-101,636,584,-516,-607,-607,584,-607,-607,-607,-607,-607,529',
'-101,664,218,219,-106,652,83,222,708,-94,736,239,222,-98,84,241,240',
'237,238,-102,-100,-99,-607,-607,-607,-607,-607,-607,-607,-607,-607,-607',
'-607,-607,-607,-607,-603,736,-607,-607,-607,736,649,218,219,-504,-607',
'-418,270,-607,218,219,-504,270,-607,-105,-607,270,-607,-607,-607,-607',
'-607,-607,-607,-104,-607,-607,-607,270,-100,755,-102,116,-103,-100,-94',
'-102,115,-103,-289,-607,-607,-94,-93,-603,-607,-289,-289,-289,116,-96',
'222,-289,-289,115,-289,116,-102,116,939,-101,115,116,115,-92,-101,116',
'115,-97,116,-94,115,707,-94,115,-289,-289,-89,-289,-289,-289,-289,-289',
'-93,-91,-90,629,-94,626,-84,-604,-92,222,610,747,264,116,-518,748,222',
'116,115,265,-70,-262,115,-289,-289,-289,-289,-289,-289,-289,-289,-289',
'-289,-289,-289,-289,-289,855,825,-289,-289,-289,610,648,-518,-519,-95',
'-289,634,529,-289,94,95,94,95,-289,-89,-289,627,-289,-289,-289,-289',
'-289,-289,-289,628,-289,625,-289,-98,612,611,608,242,-92,-600,610,242',
'887,242,-607,-289,-289,790,-95,776,-289,-607,-607,-607,-96,680,-607',
'-607,-607,242,-607,222,-104,-98,-99,222,612,611,-105,-607,-607,-607',
'-607,-92,116,768,-92,-601,624,115,-607,-607,621,-607,-607,-607,-607',
'-607,617,569,-92,-91,-504,96,97,96,97,610,-100,-504,572,612,611,-101',
'-600,-100,222,791,-504,-607,766,-607,-607,-607,-607,-607,-607,-607,-607',
'-607,-607,-607,-607,-607,-607,456,-600,-607,-607,-607,-507,792,-607',
'580,579,-607,-84,-507,-607,-607,-427,-607,-601,-607,610,-607,-507,-607',
'-607,-607,-607,-607,-607,-607,569,-607,-607,-607,612,611,630,665,-607',
'-103,-601,572,684,573,610,-607,-607,-607,-607,-607,-603,-607,-289,-607',
'-607,222,665,-106,1009,-289,-289,-289,642,-102,-289,-289,-289,665,-289',
'-427,215,664,-607,222,580,579,-427,966,-289,-289,-289,612,611,618,541',
'-427,752,543,-289,-289,664,-289,-289,-289,-289,-289,564,534,561,560',
'559,664,562,-427,-92,612,611,613,573,564,610,561,560,559,695,562,700',
'-607,-101,-289,-289,-289,-289,-289,-289,-289,-289,-289,-289,-289,-289',
'-289,-289,-519,216,-289,-289,-289,215,793,-289,-507,701,-289,610,214',
'-289,-289,-507,-289,704,-289,504,-289,212,-289,-289,-289,-289,-289,-289',
'-289,-515,-289,541,-289,710,540,713,-515,-607,612,611,608,985,-90,-97',
'-607,-289,-289,-289,-289,-603,-289,-507,-289,-607,851,643,-99,-106,-507',
'-507,-507,-510,-104,-507,-507,-507,714,-507,-510,264,716,-607,612,611',
'623,-507,265,-507,-507,-507,242,116,610,218,219,615,115,-507,-507,-513',
'-507,-507,-507,-507,-507,541,-513,-94,543,718,-514,720,564,-511,561',
'560,559,-514,562,408,-511,-103,239,728,410,409,241,240,-507,-507,-507',
'-507,-507,-507,-507,-507,-507,-507,-507,-507,-507,-507,116,729,-507',
'-507,-507,115,-507,-507,722,730,-507,612,611,-507,-507,732,-507,725',
'-507,595,-507,590,-507,-507,-507,-507,-507,-507,-507,739,-507,594,-507',
'564,-512,561,560,559,569,562,541,-512,926,543,400,-507,-507,-507,-507',
'572,-507,-504,-507,590,-289,218,219,769,-504,-504,-504,-289,-507,-504',
'-504,-504,-604,-504,116,-290,-289,567,550,115,770,-504,-290,-504,-504',
'-504,577,576,580,579,116,-290,771,-504,-504,115,-504,-504,-504,-504',
'-504,564,-263,561,560,559,544,562,564,777,561,560,559,538,562,564,242',
'561,560,559,489,562,573,530,-504,-504,-504,-504,-504,-504,-504,-504',
'-504,-504,-504,-504,-504,-504,489,722,-504,-504,-504,-280,-504,-504',
'722,526,-504,273,-280,-504,-504,722,-504,725,-504,222,-504,-280,-504',
'-504,-504,-504,-504,-504,-504,242,-504,564,-504,561,560,559,963,562',
'561,560,559,795,562,261,-337,-504,-504,-504,-504,987,-504,-337,-504',
'502,296,72,73,74,12,60,-337,239,-504,66,67,241,240,504,70,722,68,69',
'71,33,34,75,76,3,931,855,825,222,32,31,30,104,103,105,106,878,879,22',
'276,880,110,111,653,11,48,695,13,108,107,109,98,59,100,99,101,222,102',
'110,111,523,94,95,273,45,46,44,242,246,251,252,253,248,250,258,259,254',
'255,-289,235,236,-290,116,256,257,-289,43,115,-290,36,-604,273,61,62',
'-289,116,63,-290,38,239,115,245,47,241,240,237,238,249,247,243,23,244',
'580,579,-289,91,83,85,86,87,89,-289,218,219,84,92,-604,260,695,-239',
'-289,242,65,218,219,81,88,90,825,222,96,97,296,72,73,74,12,60,516,515',
'-516,66,67,222,222,849,70,-516,68,69,71,33,34,75,76,222,-516,825,859',
'-69,32,31,30,104,103,105,106,222,222,22,504,502,499,273,637,11,48,489',
'13,108,107,109,98,59,100,99,101,221,102,110,111,-264,94,95,458,45,46',
'44,242,246,251,252,253,248,250,258,259,254,255,-517,235,236,215,457',
'256,257,-517,43,886,1016,36,455,889,61,62,-517,713,63,1014,38,239,892',
'245,47,241,240,237,238,249,247,243,23,244,895,897,215,91,83,85,86,87',
'89,593,215,899,84,92,222,260,901,966,591,902,65,411,695,81,88,90,752',
'112,96,97,296,72,73,74,12,60,910,406,-280,66,67,-262,914,916,70,-280',
'68,69,71,33,34,75,76,917,-280,222,713,920,32,31,30,104,103,105,106,922',
'924,22,926,926,222,932,653,11,48,934,13,108,107,109,98,59,100,99,101',
'390,102,110,111,936,94,95,387,45,46,44,242,246,251,252,253,248,250,258',
'259,254,255,215,235,236,215,384,256,257,532,43,381,522,36,357,1005,61',
'62,454,222,63,520,38,239,946,245,47,241,240,237,238,249,247,243,23,244',
'947,222,215,91,83,85,86,87,89,750,-517,950,84,92,-265,260,222,-517,752',
'960,65,321,967,81,88,90,-517,968,96,97,296,72,73,74,12,60,970,971,-290',
'66,67,320,987,261,70,-290,68,69,71,33,34,75,76,989,-290,990,994,713',
'32,31,30,104,103,105,106,999,963,22,561,560,559,1001,562,11,48,1003',
'13,108,107,109,98,59,100,99,101,1005,102,110,111,1005,94,95,1012,45',
'46,44,242,246,251,252,253,248,250,258,259,254,255,215,235,236,1017,1018',
'256,257,453,43,926,926,36,926,1023,61,62,454,987,63,217,38,239,211,245',
'47,241,240,237,238,249,247,243,23,244,-604,-603,700,91,83,85,86,87,89',
'210,987,1046,84,92,1047,260,1048,1049,1005,1005,65,1005,222,81,88,90',
'209,641,96,97,296,72,73,74,12,60,640,222,,66,67,,,,70,,68,69,71,33,34',
'75,76,119,120,121,122,123,32,31,30,104,103,105,106,,,22,119,120,121',
'122,123,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,',
'45,46,44,242,246,251,252,253,248,250,258,259,254,255,,235,236,,,256',
'257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243',
'23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97',
'296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,119,120,121',
'122,123,32,31,30,104,103,105,106,,,22,119,120,121,122,123,11,48,,13',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251',
'252,253,248,250,258,259,254,255,,235,236,,,256,257,,43,,,36,,,61,62',
',,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85',
'86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97,296,72,73,74,12,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,242,246,251,252,253,248,250,258,259,254,255,,235,236,,,256',
'257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243',
'23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97',
'8,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30',
'104,103,105,106,,,22,,,,,,11,48,10,13,108,107,109,98,59,100,99,101,',
'102,110,111,,94,95,,45,46,44,242,246,251,252,253,248,250,258,259,254',
'255,,235,236,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240',
'237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65',
',,81,88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34',
'75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253,248',
'250,258,259,254,255,,235,236,,,256,257,,43,,,298,,,61,62,,,63,,38,239',
',245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84',
'92,,260,,,,,65,,,81,88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70',
',68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48',
',13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246',
'251,252,253,248,250,258,259,254,255,,235,236,,,256,257,,43,,,36,,,61',
'62,,,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244,,,,91,83',
'85,86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97,296,72,73,74,12',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,242,246,251,252,253,248,250,258,259,254,255,,235,236,,,256',
'257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243',
'23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97',
'296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30',
'104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,242,246,251,252,253,248,250,258,259,254,255',
',235,236,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237',
'238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,222,260,,,,,65',
',,81,88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34',
'75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253,248',
'250,258,259,254,255,,235,236,,,256,257,,43,,,36,,,61,62,,,63,,38,239',
',245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84',
'92,,260,,,,,65,,,81,88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70',
',68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48',
',13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246',
'251,252,253,248,250,258,259,254,255,,235,236,,,256,257,,43,,,36,,,61',
'62,,,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244,,,,91,83',
'85,86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97,296,72,73,74,12',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,242,246,251,252,253,248,250,258,259,254,255,,235,236,,,256',
'257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243',
'23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81,88,90,,,96,97',
'296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30',
'104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,242,246,251,252,253,248,250,258,259,254,255',
',235,236,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237',
'238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,260,,,,,65,,,81',
'88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253,248,250',
'258,259,254,255,,235,236,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245',
'47,241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92',
',260,,,,,65,,,81,88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,242,11,48,',
'13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,246',
'251,252,253,248,250,258,239,254,255,,241,240,237,238,256,257,,43,,,36',
',,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244,,,,91',
'83,85,86,87,89,,,,84,92,,564,,561,560,559,65,562,,81,88,90,,,96,97,296',
'72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,722,,,,,32,31,30',
'104,103,105,106,,564,22,561,560,559,,562,11,48,,13,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,242,,,,,,,564,722,561,560,559',
',562,,,256,257,,43,,,36,,242,61,62,,,63,,38,239,,245,47,241,240,237',
'238,256,257,243,23,244,722,,,91,83,85,86,87,89,,,239,84,92,,241,240',
'237,238,,65,,,81,88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,-627',
'-627,-627,-627,248,250,,,-627,-627,,,,,,256,257,,43,,,36,,,61,62,,,63',
',38,239,,245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,296,72,73,74,12,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,',
'11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
'242,,,,,,,,,,,,,,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241',
'240,237,238,,,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,242,246,251,252,253,248,250',
'258,259,254,255,,-627,-627,,,256,257,,43,,,36,,,61,62,,,63,,38,239,',
'245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84',
'92,,,,,,,65,,,81,88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,,,,,',
',,,,,,,,,,256,257,,43,,,298,,,61,62,,,63,,38,239,,245,47,241,240,237',
'238,,,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,',
',96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,',
'32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99',
'101,,102,110,111,,94,95,,45,46,44,242,-627,-627,-627,-627,248,250,,',
'-627,-627,,,,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240',
'237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,',
'81,88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,242,-627,-627,-627,-627',
'248,250,,,-627,-627,,,,,,256,257,,43,,,36,,,61,62,,,63,,38,239,,245',
'47,241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,,70,,68,69',
'71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242,-627,-627',
'-627,-627,248,250,,,-627,-627,,,,,,256,257,,43,,,298,,,61,62,,,63,,38',
'239,,245,47,241,240,237,238,249,247,243,23,244,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,296,72,73,74,12,60,,,,66,67,,,',
'70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11',
'48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,242',
'246,251,252,253,248,250,258,259,254,255,,-627,-627,,,256,257,,43,,,36',
',,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243,23,244,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,296,72,73,74,12',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,242,-627,-627,-627,-627,248,250,,,-627,-627,,,,,,256,257,',
'43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243,23',
'244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,296,72',
'73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,242,-627,-627,-627,-627,248,250,,,-627,-627,,,,,,256',
'257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243',
'23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,8,72',
'73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103',
'105,106,,,22,,,,,,11,48,10,13,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,242,246,251,252,253,248,250,,,254,255,,,,,,256',
'257,,43,,,36,,,61,62,,,63,,38,239,,245,47,241,240,237,238,249,247,243',
'23,244,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72',
'73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104',
'103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,242,,,,,,,,,,,,,,,,256,257,,227,,,233,,,61,62,,,63',
',,239,,245,47,241,240,237,238,,,243,232,244,,,,91,83,85,86,87,89,,,',
'84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,289,102,110,111,,94,95,,45,46,44,242,,,,,,',
',,,,,,,,,256,257,,227,,,233,,,61,62,,,63,,,239,283,245,47,241,240,237',
'238,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,',
',96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,242,,,,,,,,,,,,,,,,256,257,,227,,,233,,,61',
'62,,,63,,,239,,245,47,241,240,237,238,,,,23,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,',
',,,,311,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,,,317,,',
',,,,,,,,,,,,,,,,,307,,,303,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,534,,61,62,,,63,,,,,,47,,,,,,,,232,,,,',
'91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,289,102,110,111,,94',
'95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,283,,47,,',
',,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310',
'316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,289',
'102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,',
'63,,677,,283,,47,,,,,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,,,65',
',290,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314',
'75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227',
',,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313',
'314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,289,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,',
',,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,286,85,86,87,89',
',,,84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,',
',48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,',
',,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,774,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22',
',,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,',
',,,,,48,,,108,107,109,98,59,100,99,101,289,102,110,111,,94,95,,45,46',
'44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285,,283,,47,,,,,,,,232',
',,,,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103',
'105,106,,,234,,,,,,,311,,,108,107,109,596,59,100,99,597,,102,110,111',
',94,95,,,,317,,,,,,,,,,,,,,,,,,,,598,,,233,,,61,62,,,63,,,,,,,,,,,,',
',,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103',
'105,106,,,234,,,,,,,311,,,108,107,109,596,59,100,99,597,,102,110,111',
',94,95,,,,317,,,,,,,,,,,,,,,,,,,,598,,,233,,,61,62,,,63,,,,,,,,,,,,',
',,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,289,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285,,283,,47,,',
',,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310',
'316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309',
'310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,',
',63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,',
',,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,289,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233',
',,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,',
',,,65,,290,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227',
',,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313',
'314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,677,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,311',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,,,317,,,,,,,,,,',
',,,,,,,,,977,,,233,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,289,102,110,111,,94,95,,45,46,44,,,,',
',,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,677,,,,47,,,,,,,,232,,,,,91,286',
'85,86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73,74,,60,,',
',66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234',
',,,,,,48,,,108,107,109,98,59,100,99,101,289,102,110,111,,94,95,,45,46',
'44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285,,283,,47,,,,,,,,232',
',,,,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,289,102,110,111,,94',
'95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285,,283,,47',
',,,,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,',
',96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,289',
'102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,',
'63,,285,,283,,47,,,,,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,,,65',
',290,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75',
'76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,311,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,,,317,,,,,,,,,,,,,,,,,,,,307,,,303',
',,61,62,,,63,,302,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75',
'76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,311,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,,,317,,,,,,,,,,,,,,,,,,,,307,,,233',
',,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,319,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75',
'76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313',
'314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,311,,',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,,,317,,,,,,,,,,,,',
',,,,,,,904,,,233,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106',
',,234,,,,,,,311,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,',
',,317,,,,,,,,,,,,,,,,,,,,307,,,303,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,289,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285,,,,47,,,,,',
',,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,116,,,,,115,65,,,81,88,90,,',
'96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310',
'316,104,103,105,106,,,234,,,,,,,311,,,108,107,109,98,59,100,99,101,',
'102,110,111,,94,95,,,,317,,,,,,,,,,,,,,,,,,,,351,,,36,,,61,62,,,63,',
'38,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,',
'96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,289,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
'285,,283,,47,,,,,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290',
'81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,',
',,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99',
'101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61',
'62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,',
'81,88,90,,,96,97,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,10,13,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36',
',,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,',
',,65,,,81,88,90,,,96,97,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34',
'75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,10,13,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,43',
',,36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,400,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227',
',,233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,',
',,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,',
',,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,',
',,,,,65,,,81,88,90,,,96,97,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,43',
',,36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313',
'314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,311,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,,,317,,,,,,,,,,,,,,,,,,,,307',
',,303,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,',
',,65,,,81,88,90,,,96,97,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34',
'75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,43',
',,36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,400,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,416,,,,47,,,,,,,,232,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,',
',,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,',
',,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,',
',,,,,48,,,108,107,109,98,59,100,99,101,289,102,110,111,,94,95,,45,46',
'44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285,,283,,47,,,,,,,,232',
',,,,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,289,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,283,,47',
',,,,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,',
',96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309',
'310,316,104,103,105,106,,,234,,,,,,,311,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,,,317,,,,,,,,,,,,,,,,,,,,904,,,233,,,61,62,,,63',
',,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,416,,,,47',
',,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,222,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310',
'316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309',
'310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,',
',63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,',
',,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75',
'76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313',
'314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,',
',,,,48,,,108,107,109,98,59,100,99,101,289,102,110,111,,94,95,,45,46',
'44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,677,,283,,47,,,,,,,,232',
',,,,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,',
'47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310',
'316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309',
'310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,',
',63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,',
',,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75',
'76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313',
'314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,',
'47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310',
'316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309',
'310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,',
',63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,',
',,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75',
'76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313',
'314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106',
',,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105',
'106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,',
'47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,289,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285',
',283,,47,,,,,,,,232,,,,,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,',
',,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,',
'61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100',
'99,101,289,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233',
',,61,62,,,63,,285,,283,,47,,,,,,,,232,,,,,91,286,85,86,87,89,,,,84,287',
',,,,,,65,,290,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,,,,48,,,108,107,109',
'98,59,100,99,101,289,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,',
',227,,,233,,,61,62,,,63,,285,,283,,47,,,,,,,,232,,,,,91,286,85,86,87',
'89,,,,84,287,222,,,,,,65,,290,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234',
',,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234',
',,,,,,48,,,108,107,109,98,59,100,99,101,289,102,110,111,,94,95,,45,46',
'44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285,,283,,47,,,,,,,,232',
',,,,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105',
'106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,23',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,',
',,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,',
'47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310',
'316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,',
',,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309',
'310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,',
',63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,',
',,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,61',
'62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75',
'76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,',
',233,,,61,62,,,63,,285,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84',
'92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,,47,,,,,,,,232,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103,105,106,,,234,,',
',,,,311,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,,,317,,',
',,,,,,,,,,,,,,,,,307,,,233,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86',
'87,89,,,,84,92,,,,518,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,234,,,,',
',,48,,,108,107,109,98,59,100,99,101,289,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,285,,283,,47,,,,,,,,232,',
',,,91,286,85,86,87,89,,,,84,287,,,,,,,65,,290,81,88,90,,,96,97,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316,104,103',
'105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,416,,,,47',
',,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316',
'104,103,105,106,,,234,,,,,,,311,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,,,317,,,,,,,,,,,,,,,,,,,,307,,,303,,,61,62,,,63,,,,',
',,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316',
'104,103,105,106,,,234,,,,,,,311,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,,,317,,,,,,,,,,,,,,,,,,,,307,,,303,,,61,62,,,63,,,,',
',,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,313,314,75,76,,,,,,309,310,316',
'104,103,105,106,,,234,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,227,,,233,,,61,62,,,63,,,,,',
'47,,,,,,,,232,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,-281',
',96,97,,,,-281,-281,-281,,,-281,-281,-281,564,-281,561,560,559,569,562',
',,,,-281,-281,-281,,,572,,,,,-281,-281,,-281,-281,-281,-281,-281,,,',
',,,,,,567,760,,,,,,,,577,576,580,579,,-281,-281,-281,-281,-281,-281',
'-281,-281,-281,-281,-281,-281,-281,-281,,,-281,-281,-281,,,-281,,,-281',
',,-281,-281,,-281,573,-281,,-281,,-281,-281,-281,-281,-281,-281,-281',
',-281,,-281,,,,,,,,,,,,,-281,-281,-281,-281,-608,-281,,-281,,,,-608',
'-608,-608,,,-608,-608,-608,564,-608,561,560,559,569,562,,,,-608,-608',
'-608,-608,,,572,,,,,-608,-608,,-608,-608,-608,-608,-608,,,,,,,,,,567',
',,,,,,,,,,580,579,,-608,-608,-608,-608,-608,-608,-608,-608,-608,-608',
'-608,-608,-608,-608,,,-608,-608,-608,,,-608,,,-608,,,-608,-608,,-608',
'573,-608,,-608,,-608,-608,-608,-608,-608,-608,-608,,-608,-608,-608,',
',,,,,,,,,,,-608,-608,-608,-608,-609,-608,,-608,,,,-609,-609,-609,,,-609',
'-609,-609,564,-609,561,560,559,569,562,,,,-609,-609,-609,-609,,,572',
',,,,-609,-609,,-609,-609,-609,-609,-609,,,,,,,,,,567,,,,,,,,,,,580,579',
',-609,-609,-609,-609,-609,-609,-609,-609,-609,-609,-609,-609,-609,-609',
',,-609,-609,-609,,,-609,,,-609,,,-609,-609,,-609,573,-609,,-609,,-609',
'-609,-609,-609,-609,-609,-609,,-609,-609,-609,,,,,,,,,,,,,-609,-609',
'-609,-609,,-609,,-609,176,187,177,200,173,193,183,182,203,204,198,181',
'180,175,201,205,206,185,174,188,192,194,186,179,,,,195,202,197,196,189',
'199,184,172,191,190,,,,,,171,178,169,170,166,167,168,127,129,397,396',
'128,,398,,,,,,,161,162,,157,139,140,141,148,145,147,,,142,143,,,,163',
'164,149,150,,,,,,,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136',
'159,137,,,165,,,,,,,,,,,,,,,,,,,,158,176,187,177,200,173,193,183,182',
'203,204,198,181,180,175,201,205,206,185,174,188,192,194,186,179,,,,195',
'202,197,196,189,199,184,172,191,190,,,,,,171,178,169,170,166,167,168',
'127,129,,,128,,,,,,,,,161,162,,157,139,140,141,148,145,147,,,142,143',
',,,163,164,149,150,,,,,,,,,,,,,,154,153,,138,160,156,155,151,152,146',
'144,136,159,137,,,165,,,,,,,,,,,,,,,,,,,,158,176,187,177,200,173,193',
'183,182,203,204,198,181,180,175,201,205,206,185,174,188,192,194,186',
'179,,,,195,202,197,196,189,199,184,172,191,190,,,,,,171,178,169,170',
'166,167,168,127,129,,,128,,,,,,,,,161,162,,157,139,140,141,148,145,147',
',,142,143,,,,163,164,149,150,,,,,,,,,,,,,,154,153,,138,160,156,155,151',
'152,146,144,136,159,137,,,165,91,,,,,,,,,,92,,,,,,,,,158,176,187,177',
'200,173,193,183,182,203,204,198,181,180,175,201,205,206,185,174,188',
'192,194,186,179,,,,195,202,197,366,365,367,364,172,191,190,,,,,,171',
'178,169,170,361,362,363,359,129,100,99,360,,102,,,,,,,161,162,,157,139',
'140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,373,,,,,,,,154',
'153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,,,,,,,,,,,,',
',,,,,,158,176,187,177,200,173,193,183,182,203,204,198,181,180,175,201',
'205,206,185,174,188,192,194,186,179,,,,195,202,197,196,189,199,184,172',
'191,190,,,,,,171,178,169,170,166,167,168,127,129,,,128,,,,,,,,,161,162',
',157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,,,,,',
',,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,91,,,',
',,,,,,92,,,,,,,,,158,176,187,177,200,173,193,183,182,203,204,198,181',
'180,175,201,205,206,185,174,188,192,194,186,179,,,,195,202,197,196,189',
'199,184,172,191,190,,,,,,171,178,169,170,166,167,168,127,129,,,128,',
',,,,,,,161,162,,157,139,140,141,148,145,147,,,142,143,,,,163,164,149',
'150,,,,,,,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137',
',,165,91,,,,,,,,,,92,,,,,,,,,158,176,187,177,200,173,193,183,182,203',
'204,198,181,180,175,201,205,206,185,174,188,192,194,186,179,,,,195,202',
'197,196,189,199,184,172,191,190,,,,,,171,178,169,170,166,167,168,127',
'129,126,,128,,,,,,,,,161,162,,157,139,140,141,148,145,147,,,142,143',
',,,163,164,149,150,,,,,,,,,,,,,,154,153,,138,160,156,155,151,152,146',
'144,136,159,137,,,165,91,,,,-626,,,,,,92,-626,-626,-626,,,-626,-626',
'-626,158,-626,,,,,,,,,-626,-626,-626,,,,,,,,,-626,-626,,-626,-626,-626',
'-626,-626,,,,,,,,,,,,,,,,,,,,,,,,-626,-626,-626,-626,-626,-626,-626',
'-626,-626,-626,-626,-626,-626,-626,,,-626,-626,-626,,,-626,,273,-626',
',,-626,-626,,-626,,-626,,-626,,-626,-626,-626,-626,-626,-626,-626,,-626',
'-626,-626,,,,,,,,,,,,-626,-626,-626,,-626,,-626,-626,-626,-626,,,-626',
'-626,-626,564,-626,561,560,559,569,562,,,,-626,-626,,,,,572,,,,,-626',
'-626,,-626,-626,-626,-626,-626,,,564,,561,560,559,569,562,567,,,,,,',
',,572,,580,579,,-297,,,,,,,-297,-297,-297,,-626,-297,-297,-297,,-297',
'567,-626,,,,,273,-626,,-297,-297,580,579,,573,,,,,-297,-297,,-297,-297',
'-297,-297,-297,,-626,-626,,,,,,,,,,,,,-626,,,573,,-626,,,-297,-297,-297',
'-297,-297,-297,-297,-297,-297,-297,-297,-297,-297,-297,,,-297,-297,-297',
',,-297,,276,-297,,,-297,-297,,-297,,-297,,-297,,-297,-297,-297,-297',
'-297,-297,-297,,-297,,-297,,,,,,,,,,,,-426,-297,-297,,-297,,-297,-426',
'-426,-426,,,-426,-426,-426,564,-426,561,560,559,569,562,,,,-426,-426',
'-426,,,,572,,,,,-426,-426,,-426,-426,-426,-426,-426,,,,,,,,,,567,,,',
',,,,,577,576,580,579,,-426,-426,-426,-426,-426,-426,-426,-426,-426,-426',
'-426,-426,-426,-426,,,-426,-426,-426,,,-426,,273,-426,,,-426,-426,,-426',
'573,-426,,-426,,-426,-426,-426,-426,-426,-426,-426,,-426,-426,-426,',
',,,,433,437,,,432,,,-426,-426,,-426,,-426,161,162,,157,139,140,141,148',
'145,147,,,142,143,,,,163,164,149,150,,,,,,273,,,,,,,,154,153,,138,160',
'156,155,151,152,146,144,136,159,137,,,165,,,,,742,430,,,743,,,,,,,,',
'161,162,158,157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150',
',,,,,273,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137',
',,165,,,,,744,437,,,745,,,,,,,,,161,162,158,157,139,140,141,148,145',
'147,,,142,143,,,,163,164,149,150,,,,,,273,,,,,,,,154,153,,138,160,156',
'155,151,152,146,144,136,159,137,,564,165,561,560,559,569,562,,,,,,,',
',,572,,,,,158,,,,,,,,,564,,561,560,559,569,562,,567,691,437,,,692,,',
'572,577,576,580,579,,161,162,,157,139,140,141,148,145,147,,,142,143',
',,567,163,164,149,150,,,,,,273,580,579,,,573,,,154,153,,138,160,156',
'155,151,152,146,144,136,159,137,,,165,,,,,688,430,,,689,,573,,,,,,,161',
'162,158,157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,',
',,273,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,',
'165,,,,,426,430,,,427,,,,,,,,,161,162,158,157,139,140,141,148,145,147',
',,142,143,,,,163,164,149,150,,,,,,273,,,,,,,,154,153,,138,160,156,155',
'151,152,146,144,136,159,137,,564,165,561,560,559,569,562,,,,,,,,,,572',
',,,,158,,,,,,,,,,,,,,,,,567,657,437,,,658,,,,577,576,580,579,,161,162',
',157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,222,,,273',
',,,,573,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,564',
'165,561,560,559,569,562,564,,561,560,559,569,562,,,572,,,,,158,,572',
'564,,561,560,559,569,562,,,,,,,,567,760,572,,,,,567,,577,576,580,579',
',,,577,576,580,579,,,,,567,,564,,561,560,559,569,562,577,576,580,579',
',,,655,430,572,,656,573,,,,,,,573,161,162,,157,139,140,141,148,145,147',
',567,142,143,,,573,163,164,149,150,,580,579,,,273,,,,,,,,154,153,,138',
'160,156,155,151,152,146,144,136,159,137,,564,165,561,560,559,569,562',
'573,,,,,,,,,572,,,,,158,,,,,,,,,564,,561,560,559,569,562,,567,1041,437',
',,1042,,,572,577,576,580,579,,161,162,,157,139,140,141,148,145,147,',
',142,143,,,567,163,164,149,150,,,,,,273,580,579,,,573,,,154,153,,138',
'160,156,155,151,152,146,144,136,159,137,,,165,,,,,1039,430,,,1040,,573',
',,,,,,161,162,158,157,139,140,141,148,145,147,,,142,143,,,,163,164,149',
'150,,,,,,273,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159',
'137,,,165,,,,,487,430,,,488,,,,,,,,,161,162,158,157,139,140,141,148',
'145,147,,,142,143,,,,163,164,149,150,,,,,,,,,,,,,,154,153,,138,160,156',
'155,151,152,146,144,136,159,137,,564,165,561,560,559,569,562,564,,561',
'560,559,569,562,,,572,,,,,158,,572,564,,561,560,559,569,562,564,,561',
'560,559,569,562,567,,572,,,,,567,,572,,580,579,,,,577,576,580,579,,',
',,567,,,,,,,567,,577,576,580,579,,,,1011,437,580,579,1010,573,,,,,,',
'573,161,162,,157,139,140,141,148,145,147,,,142,143,,,573,163,164,149',
'150,,,573,,,273,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136',
'159,137,,564,165,561,560,559,569,562,,,863,437,,,864,,,572,,,,,158,161',
'162,,157,139,140,141,148,145,147,,,142,143,,,567,163,164,149,150,,,',
',,273,580,579,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159',
'137,,,165,,,,,487,430,,,488,,573,,,,,,,161,162,158,157,139,140,141,148',
'145,147,,,142,143,,,,163,164,149,150,,,,,,273,,,,,,,,154,153,,138,160',
'156,155,151,152,146,144,136,159,137,,564,165,561,560,559,569,562,,,',
',,,,,,572,,,,,158,,,,,,,,,,,,,,,,,567,657,437,,,658,,,,577,576,580,579',
',161,162,,157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,',
',,,,273,,,,,573,,,154,153,,138,160,156,155,151,152,146,144,136,159,137',
',,165,,,,,655,430,,,656,,,,,,,,,161,162,158,157,139,140,141,148,145',
'147,,,142,143,,,,163,164,149,150,,,,,,273,,,,,,,,154,153,,138,160,156',
'155,151,152,146,144,136,159,137,,,165,,,,,,,,,,,,,,,,,,,,158' ]
        racc_action_table = arr = ::Array.new(26475, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'433,1054,434,1041,913,1040,312,433,433,433,602,64,669,433,433,668,433',
'61,992,304,992,22,365,743,481,433,304,29,860,365,935,594,1039,417,341',
'304,433,433,342,433,433,433,433,433,455,742,669,698,698,352,442,80,61',
'549,689,587,481,22,348,80,481,481,481,481,744,861,349,433,433,433,433',
'433,433,433,433,433,433,433,433,433,433,1041,862,433,433,433,586,433',
'450,450,359,433,29,312,433,763,763,359,64,433,455,433,668,433,433,433',
'433,433,433,433,745,433,433,433,29,1054,602,1041,913,1040,1054,689,1041',
'913,1040,432,433,433,743,433,744,433,432,432,432,602,594,698,432,432',
'602,432,860,433,935,860,1039,860,341,935,742,1039,342,341,352,587,689',
'342,549,689,587,432,432,348,432,432,432,432,432,744,861,349,391,689',
'388,683,745,688,450,506,598,369,862,41,598,763,586,862,369,683,415,586',
'432,432,432,432,432,432,432,432,432,432,432,432,432,432,731,731,432',
'432,432,622,432,225,226,745,432,412,321,432,317,317,44,44,432,41,432',
'390,432,432,432,432,432,432,432,391,432,388,432,41,506,506,506,463,688',
'596,619,464,794,465,657,432,432,655,432,638,432,657,657,657,321,506',
'657,657,657,466,657,495,432,225,226,496,622,622,321,657,657,657,657',
'688,761,622,688,597,387,761,657,657,384,657,657,657,657,657,381,889',
'688,638,596,317,317,44,44,393,794,596,889,619,619,655,596,638,513,656',
'596,691,619,657,657,657,657,657,657,657,657,657,657,657,657,657,657',
'228,596,657,657,657,597,657,657,889,889,657,514,597,657,657,820,657',
'597,657,382,657,597,657,657,657,657,657,657,657,710,657,657,657,393',
'393,393,494,691,656,597,710,517,889,377,691,657,657,657,657,691,657',
'658,657,691,961,493,228,961,658,658,658,426,657,658,658,658,485,658',
'820,965,494,691,519,710,710,820,965,658,658,658,382,382,382,547,820',
'965,547,658,658,493,658,658,658,658,658,931,524,931,931,931,485,931',
'820,426,377,377,377,710,725,375,725,725,725,527,725,535,863,426,658',
'658,658,658,658,658,658,658,658,658,658,658,658,658,42,18,658,658,658',
'17,658,658,360,536,658,385,17,658,658,360,658,545,658,548,658,17,658',
'658,658,658,658,658,658,363,658,333,658,552,333,553,363,863,375,375',
'375,931,42,18,863,658,658,658,658,863,658,101,658,863,725,427,42,18',
'101,101,101,366,658,101,101,101,555,101,366,27,556,863,385,385,385,101',
'27,101,101,101,461,756,379,537,537,379,756,101,101,362,101,101,101,101',
'101,703,362,427,703,557,361,566,722,367,722,722,722,361,722,126,367',
'427,461,574,126,126,461,461,101,101,101,101,101,101,101,101,101,101',
'101,101,101,101,293,578,101,101,101,293,101,101,722,581,101,379,379',
'101,101,583,101,722,101,353,101,588,101,101,101,101,101,101,101,589',
'101,351,101,339,364,339,339,339,339,339,334,364,1043,334,347,101,101',
'101,101,339,101,98,101,346,864,757,757,626,98,98,98,864,101,98,98,98',
'864,98,345,523,864,339,339,345,629,98,523,98,98,98,339,339,339,339,5',
'523,631,98,98,5,98,98,98,98,98,932,635,932,932,932,335,932,567,639,567',
'567,567,331,567,851,325,851,851,851,644,851,339,322,98,98,98,98,98,98',
'98,98,98,98,98,98,98,98,650,932,98,98,98,308,98,98,567,318,98,316,308',
'98,98,851,98,567,98,659,98,308,98,98,98,98,98,98,98,462,98,849,98,849',
'849,849,1009,849,1009,1009,1009,661,1009,667,49,98,98,98,98,1044,98',
'49,98,674,857,857,857,857,857,857,49,462,98,857,857,462,462,676,857',
'849,857,857,857,857,857,857,857,1,849,1025,1025,311,857,857,857,857',
'857,857,857,764,764,857,310,764,764,764,445,857,857,685,857,857,857',
'857,857,857,857,857,857,687,857,857,857,307,857,857,690,857,857,857',
'445,445,445,445,445,445,445,445,445,445,445,692,445,445,1017,870,445',
'445,692,857,870,1017,857,692,693,857,857,692,944,857,1017,857,445,944',
'445,857,445,445,445,445,445,445,445,857,445,713,713,1042,857,857,857',
'857,857,857,1042,20,20,857,857,1042,445,694,445,1042,697,857,340,340',
'857,857,857,699,702,857,857,997,997,997,997,997,997,301,300,974,997',
'997,709,299,724,997,974,997,997,997,997,997,997,997,726,974,733,738',
'297,997,997,997,997,997,997,997,741,289,997,284,281,280,269,420,997',
'997,266,997,997,997,997,997,997,997,997,997,234,997,997,997,773,997',
'997,230,997,997,997,420,420,420,420,420,420,420,420,420,420,420,975',
'420,420,976,229,420,420,975,997,778,976,997,227,796,997,997,975,797',
'997,976,997,420,799,420,997,420,420,420,420,420,420,420,997,420,800',
'801,350,997,997,997,997,997,997,350,903,803,997,997,804,420,805,903',
'350,806,997,207,819,997,997,997,903,3,997,997,996,996,996,996,996,996',
'823,124,978,996,996,826,827,832,996,978,996,996,996,996,996,996,996',
'833,978,834,835,839,996,996,996,996,996,996,996,840,842,996,843,845',
'848,850,660,996,996,853,996,996,996,996,996,996,996,996,996,90,996,996',
'996,856,996,996,89,996,996,996,660,660,660,660,660,660,660,660,660,660',
'660,323,660,660,306,88,660,660,323,996,87,306,996,72,1056,996,996,323',
'866,996,306,996,660,871,660,996,660,660,660,660,660,660,660,996,660',
'872,873,600,996,996,996,996,996,996,600,305,882,996,996,883,660,48,305',
'600,900,996,43,904,996,996,996,305,905,996,996,993,993,993,993,993,993',
'907,908,748,993,993,40,933,25,993,748,993,993,993,993,993,993,993,937',
'748,938,943,951,993,993,993,993,993,993,993,954,901,993,901,901,901',
'955,901,993,993,956,993,993,993,993,993,993,993,993,993,957,993,993',
'993,959,993,993,969,993,993,993,696,696,696,696,696,696,696,696,696',
'696,696,224,696,696,977,980,696,696,224,993,981,982,993,983,984,993',
'993,224,986,993,19,993,696,16,696,993,696,696,696,696,696,696,696,993',
'696,1010,1011,1013,993,993,993,993,993,993,15,1024,1029,993,993,1030',
'696,1031,1032,1033,1034,993,1035,1038,993,993,993,13,425,993,993,988',
'988,988,988,988,988,424,421,,988,988,,,,988,,988,988,988,988,988,988',
'988,682,682,682,682,682,988,988,988,988,988,988,988,,,988,295,295,295',
'295,295,988,988,,988,988,988,988,988,988,988,988,988,,988,988,988,,988',
'988,,988,988,988,278,278,278,278,278,278,278,278,278,278,278,,278,278',
',,278,278,,988,,,988,,,988,988,,,988,,988,278,,278,988,278,278,278,278',
'278,278,278,988,278,,,,988,988,988,988,988,988,,,,988,988,,278,,,,,988',
',,988,988,988,,,988,988,973,973,973,973,973,973,,,,973,973,,,,973,,973',
'973,973,973,973,973,973,9,9,9,9,9,973,973,973,973,973,973,973,,,973',
'512,512,512,512,512,973,973,,973,973,973,973,973,973,973,973,973,,973',
'973,973,,973,973,,973,973,973,775,775,775,775,775,775,775,775,775,775',
'775,,775,775,,,775,775,,973,,,973,,,973,973,,,973,,973,775,,775,973',
'775,775,775,775,775,775,775,973,775,,,,973,973,973,973,973,973,,,,973',
'973,,775,,,,,973,,,973,973,973,,,973,973,940,940,940,940,940,940,,,',
'940,940,,,,940,,940,940,940,940,940,940,940,,,,,,940,940,940,940,940',
'940,940,,,940,,,,,,940,940,,940,940,940,940,940,940,940,940,940,,940',
'940,940,,940,940,,940,940,940,780,780,780,780,780,780,780,780,780,780',
'780,,780,780,,,780,780,,940,,,940,,,940,940,,,940,,940,780,,780,940',
'780,780,780,780,780,780,780,940,780,,,,940,940,940,940,940,940,,,,940',
'940,,780,,,,,940,,,940,940,940,,,940,940,2,2,2,2,2,2,,,,2,2,,,,2,,2',
'2,2,2,2,2,2,,,,,,2,2,2,2,2,2,2,,,2,,,,,,2,2,2,2,2,2,2,2,2,2,2,2,,2,2',
'2,,2,2,,2,2,2,782,782,782,782,782,782,782,782,782,782,782,,782,782,',
',782,782,,2,,,2,,,2,2,,,2,,2,782,,782,2,782,782,782,782,782,782,782',
'2,782,,,,2,2,2,2,2,2,,,,2,2,,782,,,,,2,,,2,2,2,,,2,2,36,36,36,36,36',
'36,,,,36,36,,,,36,,36,36,36,36,36,36,36,,,,,,36,36,36,36,36,36,36,,',
'36,,,,,,36,36,,36,36,36,36,36,36,36,36,36,,36,36,36,,36,36,,36,36,36',
'785,785,785,785,785,785,785,785,785,785,785,,785,785,,,785,785,,36,',
',36,,,36,36,,,36,,36,785,,785,36,785,785,785,785,785,785,785,36,785',
',,,36,36,36,36,36,36,,,,36,36,,785,,,,,36,,,36,36,36,,,36,36,910,910',
'910,910,910,910,,,,910,910,,,,910,,910,910,910,910,910,910,910,,,,,',
'910,910,910,910,910,910,910,,,910,,,,,,910,910,,910,910,910,910,910',
'910,910,910,910,,910,910,910,,910,910,,910,910,910,787,787,787,787,787',
'787,787,787,787,787,787,,787,787,,,787,787,,910,,,910,,,910,910,,,910',
',910,787,,787,910,787,787,787,787,787,787,787,910,787,,,,910,910,910',
'910,910,910,,,,910,910,,787,,,,,910,,,910,910,910,,,910,910,906,906',
'906,906,906,906,,,,906,906,,,,906,,906,906,906,906,906,906,906,,,,,',
'906,906,906,906,906,906,906,,,906,,,,,,906,906,,906,906,906,906,906',
'906,906,906,906,,906,906,906,,906,906,,906,906,906,789,789,789,789,789',
'789,789,789,789,789,789,,789,789,,,789,789,,906,,,906,,,906,906,,,906',
',906,789,,789,906,789,789,789,789,789,789,789,906,789,,,,906,906,906',
'906,906,906,,,,906,906,,789,,,,,906,,,906,906,906,,,906,906,867,867',
'867,867,867,867,,,,867,867,,,,867,,867,867,867,867,867,867,867,,,,,',
'867,867,867,867,867,867,867,,,867,,,,,,867,867,,867,867,867,867,867',
'867,867,867,867,,867,867,867,,867,867,,867,867,867,484,484,484,484,484',
'484,484,484,484,484,484,,484,484,,,484,484,,867,,,867,,,867,867,,,867',
',867,484,,484,867,484,484,484,484,484,484,484,867,484,,,,867,867,867',
'867,867,867,,,,867,867,484,484,,,,,867,,,867,867,867,,,867,867,858,858',
'858,858,858,858,,,,858,858,,,,858,,858,858,858,858,858,858,858,,,,,',
'858,858,858,858,858,858,858,,,858,,,,,,858,858,,858,858,858,858,858',
'858,858,858,858,,858,858,858,,858,858,,858,858,858,440,440,440,440,440',
'440,440,440,440,440,440,,440,440,,,440,440,,858,,,858,,,858,858,,,858',
',858,440,,440,858,440,440,440,440,440,440,440,858,440,,,,858,858,858',
'858,858,858,,,,858,858,,440,,,,,858,,,858,858,858,,,858,858,825,825',
'825,825,825,825,,,,825,825,,,,825,,825,825,825,825,825,825,825,,,,,',
'825,825,825,825,825,825,825,,,825,,,,,,825,825,,825,825,825,825,825',
'825,825,825,825,,825,825,825,,825,825,,825,825,825,885,885,885,885,885',
'885,885,885,885,885,885,,885,885,,,885,885,,825,,,825,,,825,825,,,825',
',825,885,,885,825,885,885,885,885,885,885,885,825,885,,,,825,825,825',
'825,825,825,,,,825,825,,885,,,,,825,,,825,825,825,,,825,825,815,815',
'815,815,815,815,,,,815,815,,,,815,,815,815,815,815,815,815,815,,,,,',
'815,815,815,815,815,815,815,,,815,,,,,,815,815,,815,815,815,815,815',
'815,815,815,815,,815,815,815,,815,815,,815,815,815,888,888,888,888,888',
'888,888,888,888,888,888,,888,888,,,888,888,,815,,,815,,,815,815,,,815',
',815,888,,888,815,888,888,888,888,888,888,888,815,888,,,,815,815,815',
'815,815,815,,,,815,815,,888,,,,,815,,,815,815,815,,,815,815,814,814',
'814,814,814,814,,,,814,814,,,,814,,814,814,814,814,814,814,814,,,,,',
'814,814,814,814,814,814,814,,,814,,,,,,814,814,,814,814,814,814,814',
'814,814,814,814,,814,814,814,,814,814,,814,814,814,24,24,24,24,24,24',
'24,24,24,24,24,,24,24,,,24,24,,814,,,814,,,814,814,,,814,,814,24,,24',
'814,24,24,24,24,24,24,24,814,24,,,,814,814,814,814,814,814,,,,814,814',
',24,,,,,814,,,814,814,814,,,814,814,209,209,209,209,209,209,,,,209,209',
',,,209,,209,209,209,209,209,209,209,,,,,,209,209,209,209,209,209,209',
',,209,,,,,,209,209,,209,209,209,209,209,209,209,209,209,,209,209,209',
',209,209,,209,209,209,533,533,533,533,533,533,533,533,533,533,533,,533',
'533,,,533,533,,209,,,209,,,209,209,,,209,,209,533,,533,209,533,533,533',
'533,533,533,533,209,533,,,,209,209,209,209,209,209,,,,209,209,,533,',
',,,209,,,209,209,209,,,209,209,810,810,810,810,810,810,,,,810,810,,',
',810,,810,810,810,810,810,810,810,,,,,,810,810,810,810,810,810,810,',
',810,,,,,480,810,810,,810,810,810,810,810,810,810,810,810,,810,810,810',
',810,810,,810,810,810,483,483,483,483,483,483,483,483,480,483,483,,480',
'480,480,480,483,483,,810,,,810,,,810,810,,,810,,810,483,,483,810,483',
'483,483,483,483,483,483,810,483,,,,810,810,810,810,810,810,,,,810,810',
',987,,987,987,987,810,987,,810,810,810,,,810,810,233,233,233,233,233',
'233,,,,233,233,,,,233,,233,233,233,233,233,233,233,987,,,,,233,233,233',
'233,233,233,233,,1023,233,1023,1023,1023,,1023,233,233,,233,233,233',
'233,233,233,233,233,233,,233,233,233,,233,233,,233,233,233,471,,,,,',
',985,1023,985,985,985,,985,,,471,471,,233,,,233,,469,233,233,,,233,',
'233,471,,471,233,471,471,471,471,469,469,471,233,471,985,,,233,233,233',
'233,233,233,,,469,233,233,,469,469,469,469,,233,,,233,233,233,,,233',
'233,765,765,765,765,765,765,,,,765,765,,,,765,,765,765,765,765,765,765',
'765,,,,,,765,765,765,765,765,765,765,,,765,,,,,,765,765,,765,765,765',
'765,765,765,765,765,765,,765,765,765,,765,765,,765,765,765,475,475,475',
'475,475,475,475,,,475,475,,,,,,475,475,,765,,,765,,,765,765,,,765,,765',
'475,,475,765,475,475,475,475,475,475,475,765,475,,,,765,765,765,765',
'765,765,,,,765,765,,,,,,,765,,,765,765,765,,,765,765,759,759,759,759',
'759,759,,,,759,759,,,,759,,759,759,759,759,759,759,759,,,,,,759,759',
'759,759,759,759,759,,,759,,,,,,759,759,,759,759,759,759,759,759,759',
'759,759,,759,759,759,,759,759,,759,759,759,474,,,,,,,,,,,,,,,,474,474',
',759,,,759,,,759,759,,,759,,759,474,,474,759,474,474,474,474,,,474,759',
'474,,,,759,759,759,759,759,759,,,,759,759,,,,,,,759,,,759,759,759,,',
'759,759,758,758,758,758,758,758,,,,758,758,,,,758,,758,758,758,758,758',
'758,758,,,,,,758,758,758,758,758,758,758,,,758,,,,,,758,758,,758,758',
'758,758,758,758,758,758,758,,758,758,758,,758,758,,758,758,758,459,459',
'459,459,459,459,459,459,459,459,459,,459,459,,,459,459,,758,,,758,,',
'758,758,,,758,,758,459,,459,758,459,459,459,459,459,459,459,758,459',
',,,758,758,758,758,758,758,,,,758,758,,,,,,,758,,,758,758,758,,,758',
'758,298,298,298,298,298,298,,,,298,298,,,,298,,298,298,298,298,298,298',
'298,,,,,,298,298,298,298,298,298,298,,,298,,,,,,298,298,,298,298,298',
'298,298,298,298,298,298,,298,298,298,,298,298,,298,298,298,472,,,,,',
',,,,,,,,,,472,472,,298,,,298,,,298,298,,,298,,298,472,,472,298,472,472',
'472,472,,,472,298,472,,,,298,298,298,298,298,298,,,,298,298,,,,,,,298',
',,298,298,298,,,298,298,708,708,708,708,708,708,,,,708,708,,,,708,,708',
'708,708,708,708,708,708,,,,,,708,708,708,708,708,708,708,,,708,,,,,',
'708,708,,708,708,708,708,708,708,708,708,708,,708,708,708,,708,708,',
'708,708,708,476,476,476,476,476,476,476,,,476,476,,,,,,476,476,,708',
',,708,,,708,708,,,708,,708,476,,476,708,476,476,476,476,476,476,476',
'708,476,,,,708,708,708,708,708,708,,,,708,708,,,,,,,708,,,708,708,708',
',,708,708,707,707,707,707,707,707,,,,707,707,,,,707,,707,707,707,707',
'707,707,707,,,,,,707,707,707,707,707,707,707,,,707,,,,,,707,707,,707',
'707,707,707,707,707,707,707,707,,707,707,707,,707,707,,707,707,707,470',
'470,470,470,470,470,470,,,470,470,,,,,,470,470,,707,,,707,,,707,707',
',,707,,707,470,,470,707,470,470,470,470,470,470,470,707,470,,,,707,707',
'707,707,707,707,,,,707,707,,,,,,,707,,,707,707,707,,,707,707,303,303',
'303,303,303,303,,,,303,303,,,,303,,303,303,303,303,303,303,303,,,,,',
'303,303,303,303,303,303,303,,,303,,,,,,303,303,,303,303,303,303,303',
'303,303,303,303,,303,303,303,,303,303,,303,303,303,477,477,477,477,477',
'477,477,,,477,477,,,,,,477,477,,303,,,303,,,303,303,,,303,,303,477,',
'477,303,477,477,477,477,477,477,477,303,477,,,,303,303,303,303,303,303',
',,,303,303,,,,,,,303,,,303,303,303,,,303,303,328,328,328,328,328,328',
',,,328,328,,,,328,,328,328,328,328,328,328,328,,,,,,328,328,328,328',
'328,328,328,,,328,,,,,,328,328,,328,328,328,328,328,328,328,328,328',
',328,328,328,,328,328,,328,328,328,460,460,460,460,460,460,460,460,460',
'460,460,,460,460,,,460,460,,328,,,328,,,328,328,,,328,,328,460,,460',
'328,460,460,460,460,460,460,460,328,460,,,,328,328,328,328,328,328,',
',,328,328,,,,,,,328,,,328,328,328,,,328,328,585,585,585,585,585,585',
',,,585,585,,,,585,,585,585,585,585,585,585,585,,,,,,585,585,585,585',
'585,585,585,,,585,,,,,,585,585,,585,585,585,585,585,585,585,585,585',
',585,585,585,,585,585,,585,585,585,478,478,478,478,478,478,478,,,478',
'478,,,,,,478,478,,585,,,585,,,585,585,,,585,,585,478,,478,585,478,478',
'478,478,478,478,478,585,478,,,,585,585,585,585,585,585,,,,585,585,,',
',,,,585,,,585,585,585,,,585,585,582,582,582,582,582,582,,,,582,582,',
',,582,,582,582,582,582,582,582,582,,,,,,582,582,582,582,582,582,582',
',,582,,,,,,582,582,,582,582,582,582,582,582,582,582,582,,582,582,582',
',582,582,,582,582,582,479,479,479,479,479,479,479,,,479,479,,,,,,479',
'479,,582,,,582,,,582,582,,,582,,582,479,,479,582,479,479,479,479,479',
'479,479,582,479,,,,582,582,582,582,582,582,,,,582,582,,,,,,,582,,,582',
'582,582,,,582,582,406,406,406,406,406,406,,,,406,406,,,,406,,406,406',
'406,406,406,406,406,,,,,,406,406,406,406,406,406,406,,,406,,,,,,406',
'406,406,406,406,406,406,406,406,406,406,406,,406,406,406,,406,406,,406',
'406,406,482,482,482,482,482,482,482,,,482,482,,,,,,482,482,,406,,,406',
',,406,406,,,406,,406,482,,482,406,482,482,482,482,482,482,482,406,482',
',,,406,406,406,406,406,406,,,,406,406,,,,,,,406,,,406,406,406,,,406',
'406,795,795,795,,795,,,,795,795,,,,795,,795,795,795,795,795,795,795',
',,,,,795,795,795,795,795,795,795,,,795,,,,,,,795,,,795,795,795,795,795',
'795,795,795,,795,795,795,,795,795,,795,795,795,473,,,,,,,,,,,,,,,,473',
'473,,795,,,795,,,795,795,,,795,,,473,,473,795,473,473,473,473,,,473',
'795,473,,,,795,795,795,795,795,795,,,,795,795,,,,,,,795,,,795,795,795',
',,795,795,886,886,886,,886,,,,886,886,,,,886,,886,886,886,886,886,886',
'886,,,,,,886,886,886,886,886,886,886,,,886,,,,,,,886,,,886,886,886,886',
'886,886,886,886,886,886,886,886,,886,886,,886,886,886,468,,,,,,,,,,',
',,,,,468,468,,886,,,886,,,886,886,,,886,,,468,886,468,886,468,468,468',
'468,,,,886,,,,,886,886,886,886,886,886,,,,886,886,,,,,,,886,,886,886',
'886,886,,,886,886,868,868,868,,868,,,,868,868,,,,868,,868,868,868,868',
'868,868,868,,,,,,868,868,868,868,868,868,868,,,868,,,,,,,868,,,868,868',
'868,868,868,868,868,868,,868,868,868,,868,868,,868,868,868,467,,,,,',
',,,,,,,,,,467,467,,868,,,868,,,868,868,,,868,,,467,,467,868,467,467',
'467,467,,,,868,,,,,868,868,868,868,868,868,,,,868,868,,,,,,,868,,,868',
'868,868,,,868,868,677,677,677,,677,,,,677,677,,,,677,,677,677,677,677',
'677,677,677,,,,,,677,677,677,677,677,677,677,,,677,,,,,,,677,,,677,677',
'677,677,677,677,677,677,,677,677,677,,677,677,,677,677,677,,,,,,,,,',
',,,,,,,,,,677,,,677,,,677,677,,,677,,,,,,677,,,,,,,,677,,,,,677,677',
'677,677,677,677,,,,677,677,,,,,,,677,,,677,677,677,,,677,677,653,653',
'653,,653,,,,653,653,,,,653,,653,653,653,653,653,653,653,,,,,,653,653',
'653,653,653,653,653,,,653,,,,,,,653,,,653,653,653,653,653,653,653,653',
',653,653,653,,653,653,,653,653,653,,,,,,,,,,,,,,,,,,,,653,,,653,,,653',
'653,,,653,,,,,,653,,,,,,,,653,,,,,653,653,653,653,653,653,,,,653,653',
',,,,,,653,,,653,653,653,,,653,653,319,319,319,,319,,,,319,319,,,,319',
',319,319,319,319,319,319,319,,,,,,319,319,319,319,319,319,319,,,319',
',,,,,,319,,,319,319,319,319,319,319,319,319,,319,319,319,,319,319,,',
',319,,,,,,,,,,,,,,,,,,,,319,,,319,,,319,319,,,319,,,,,,,,,,,,,,,,,,',
'319,319,319,319,319,319,,,,319,319,,,,,,,319,,,319,319,319,,,319,319',
'652,652,652,,652,,,,652,652,,,,652,,652,652,652,652,652,652,652,,,,',
',652,652,652,652,652,652,652,,,652,,,,,,,652,,,652,652,652,652,652,652',
'652,652,,652,652,652,,652,652,,652,652,652,,,,,,,,,,,,,,,,,,,,652,,',
'652,,,652,652,,,652,,,,,,652,,,,,,,,652,,,,,652,652,652,652,652,652',
',,,652,652,,,,,,,652,,,652,652,652,,,652,652,649,649,649,,649,,,,649',
'649,,,,649,,649,649,649,649,649,649,649,,,,,,649,649,649,649,649,649',
'649,,,649,,,,,,,649,,,649,649,649,649,649,649,649,649,,649,649,649,',
'649,649,,649,649,649,,,,,,,,,,,,,,,,,,,,649,,,649,,,649,649,,,649,,',
',,,649,,,,,,,,649,,,,,649,649,649,649,649,649,,,,649,649,,,,,,,649,',
',649,649,649,,,649,649,648,648,648,,648,,,,648,648,,,,648,,648,648,648',
'648,648,648,648,,,,,,648,648,648,648,648,648,648,,,648,,,,,,,648,,,648',
'648,648,648,648,648,648,648,,648,648,648,,648,648,,648,648,648,,,,,',
',,,,,,,,,,,,,,648,,,648,,,648,648,,,648,,,,,,648,,,,,,,,648,,,,,648',
'648,648,648,648,648,,,,648,648,,,,,,,648,,,648,648,648,,,648,648,643',
'643,643,,643,,,,643,643,,,,643,,643,643,643,643,643,643,643,,,,,,643',
'643,643,643,643,643,643,,,643,,,,,,,643,,,643,643,643,643,643,643,643',
'643,,643,643,643,,643,643,,643,643,643,,,,,,,,,,,,,,,,,,,,643,,,643',
',,643,643,,,643,,,,,,643,,,,,,,,643,,,,,643,643,643,643,643,643,,,,643',
'643,,,,,,,643,,,643,643,643,,,643,643,327,327,327,,327,,,,327,327,,',
',327,,327,327,327,327,327,327,327,,,,,,327,327,327,327,327,327,327,',
',327,,,,,,,327,,,327,327,327,327,327,327,327,327,,327,327,327,,327,327',
',327,327,327,,,,,,,,,,,,,,,,,,,,327,,,327,327,,327,327,,,327,,,,,,327',
',,,,,,,327,,,,,327,327,327,327,327,327,,,,327,327,,,,,,,327,,,327,327',
'327,,,327,327,330,330,330,,330,,,,330,330,,,,330,,330,330,330,330,330',
'330,330,,,,,,330,330,330,330,330,330,330,,,330,,,,,,,330,,,330,330,330',
'330,330,330,330,330,,330,330,330,,330,330,,330,330,330,,,,,,,,,,,,,',
',,,,,,330,,,330,,,330,330,,,330,,,,,,330,,,,,,,,330,,,,,330,330,330',
'330,330,330,,,,330,330,,,,,,,330,,,330,330,330,,,330,330,642,642,642',
',642,,,,642,642,,,,642,,642,642,642,642,642,642,642,,,,,,642,642,642',
'642,642,642,642,,,642,,,,,,,642,,,642,642,642,642,642,642,642,642,,642',
'642,642,,642,642,,642,642,642,,,,,,,,,,,,,,,,,,,,642,,,642,,,642,642',
',,642,,,,,,642,,,,,,,,642,,,,,642,642,642,642,642,642,,,,642,642,,,',
',,,642,,,642,642,642,,,642,642,641,641,641,,641,,,,641,641,,,,641,,641',
'641,641,641,641,641,641,,,,,,641,641,641,641,641,641,641,,,641,,,,,',
',641,,,641,641,641,641,641,641,641,641,641,641,641,641,,641,641,,641',
'641,641,,,,,,,,,,,,,,,,,,,,641,,,641,,,641,641,,,641,,,,641,,641,,,',
',,,,641,,,,,641,641,641,641,641,641,,,,641,641,,,,,,,641,,641,641,641',
'641,,,641,641,640,640,640,,640,,,,640,640,,,,640,,640,640,640,640,640',
'640,640,,,,,,640,640,640,640,640,640,640,,,640,,,,,,,640,,,640,640,640',
'640,640,640,640,640,640,640,640,640,,640,640,,640,640,640,,,,,,,,,,',
',,,,,,,,,640,,,640,,,640,640,,,640,,640,,640,,640,,,,,,,,640,,,,,640',
'640,640,640,640,640,,,,640,640,,,,,,,640,,640,640,640,640,,,640,640',
'637,637,637,,637,,,,637,637,,,,637,,637,637,637,637,637,637,637,,,,',
',637,637,637,637,637,637,637,,,637,,,,,,,637,,,637,637,637,637,637,637',
'637,637,,637,637,637,,637,637,,637,637,637,,,,,,,,,,,,,,,,,,,,637,,',
'637,,,637,637,,,637,,,,,,637,,,,,,,,637,,,,,637,637,637,637,637,637',
',,,637,637,,,,,,,637,,,637,637,637,,,637,637,336,336,336,,336,,,,336',
'336,,,,336,,336,336,336,336,336,336,336,,,,,,336,336,336,336,336,336',
'336,,,336,,,,,,,336,,,336,336,336,336,336,336,336,336,336,336,336,336',
',336,336,,336,336,336,,,,,,,,,,,,,,,,,,,,336,,,336,,,336,336,,,336,',
',,,,336,,,,,,,,336,,,,,336,336,336,336,336,336,,,,336,336,,,,,,,336',
',336,336,336,336,,,336,336,636,636,636,,636,,,,636,636,,,,636,,636,636',
'636,636,636,636,636,,,,,,636,636,636,636,636,636,636,,,636,,,,,,,636',
',,636,636,636,636,636,636,636,636,,636,636,636,,636,636,,636,636,636',
',,,,,,,,,,,,,,,,,,,636,,,636,,,636,636,,,636,,636,,,,636,,,,,,,,636',
',,,,636,636,636,636,636,636,,,,636,636,,,,,,,636,,,636,636,636,,,636',
'636,343,343,343,,343,,,,343,343,,,,343,,343,343,343,343,343,343,343',
',,,,,343,343,343,343,343,343,343,,,343,,,,,,,343,,,343,343,343,343,343',
'343,343,343,,343,343,343,,343,343,,343,343,343,,,,,,,,,,,,,,,,,,,,343',
',,343,,,343,343,,,343,,,,,,343,,,,,,,,343,,,,,343,343,343,343,343,343',
',,,343,343,,,,,,,343,,,343,343,343,,,343,343,344,344,344,,344,,,,344',
'344,,,,344,,344,344,344,344,344,344,344,,,,,,344,344,344,344,344,344',
'344,,,344,,,,,,,344,,,344,344,344,344,344,344,344,344,,344,344,344,',
'344,344,,344,344,344,,,,,,,,,,,,,,,,,,,,344,,,344,,,344,344,,,344,,',
',,,344,,,,,,,,344,,,,,344,344,344,344,344,344,,,,344,344,,,,,,,344,',
',344,344,344,,,344,344,607,607,607,,607,,,,607,607,,,,607,,607,607,607',
'607,607,607,607,,,,,,607,607,607,607,607,607,607,,,607,,,,,,,607,,,607',
'607,607,607,607,607,607,607,,607,607,607,,607,607,,607,607,607,,,,,',
',,,,,,,,,,,,,,607,,,607,,,607,607,,,607,,,,,,607,,,,,,,,607,,,,,607',
'607,607,607,607,607,,,,607,607,,,,,,,607,,,607,607,607,,,607,607,603',
'603,603,,603,,,,603,603,,,,603,,603,603,603,603,603,603,603,,,,,,603',
'603,603,603,603,603,603,,,603,,,,,,,603,,,603,603,603,603,603,603,603',
'603,,603,603,603,,603,603,,603,603,603,,,,,,,,,,,,,,,,,,,,603,,,603',
',,603,603,,,603,,,,,,603,,,,,,,,603,,,,,603,603,603,603,603,603,,,,603',
'603,,,,,,,603,,,603,603,603,,,603,603,591,591,591,,591,,,,591,591,,',
',591,,591,591,591,591,591,591,591,,,,,,591,591,591,591,591,591,591,',
',591,,,,,,,591,,,591,591,591,591,591,591,591,591,591,591,591,591,,591',
'591,,591,591,591,,,,,,,,,,,,,,,,,,,,591,,,591,,,591,591,,,591,,591,',
'591,,591,,,,,,,,591,,,,,591,591,591,591,591,591,,,,591,591,,,,,,,591',
',591,591,591,591,,,591,591,356,356,356,,356,,,,356,356,,,,356,,356,356',
'356,356,356,356,356,,,,,,356,356,356,356,356,356,356,,,356,,,,,,,356',
',,356,356,356,356,356,356,356,356,,356,356,356,,356,356,,,,356,,,,,',
',,,,,,,,,,,,,,356,,,356,,,356,356,,,356,,,,,,,,,,,,,,,,,,,356,356,356',
'356,356,356,,,,356,356,,,,,,,356,,,356,356,356,,,356,356,358,358,358',
',358,,,,358,358,,,,358,,358,358,358,358,358,358,358,,,,,,358,358,358',
'358,358,358,358,,,358,,,,,,,358,,,358,358,358,358,358,358,358,358,,358',
'358,358,,358,358,,,,358,,,,,,,,,,,,,,,,,,,,358,,,358,,,358,358,,,358',
',,,,,,,,,,,,,,,,,,358,358,358,358,358,358,,,,358,358,,,,,,,358,,,358',
'358,358,,,358,358,1014,1014,1014,,1014,,,,1014,1014,,,,1014,,1014,1014',
'1014,1014,1014,1014,1014,,,,,,1014,1014,1014,1014,1014,1014,1014,,,1014',
',,,,,,1014,,,1014,1014,1014,1014,1014,1014,1014,1014,1014,1014,1014',
'1014,,1014,1014,,1014,1014,1014,,,,,,,,,,,,,,,,,,,,1014,,,1014,,,1014',
'1014,,,1014,,1014,,1014,,1014,,,,,,,,1014,,,,,1014,1014,1014,1014,1014',
'1014,,,,1014,1014,,,,,,,1014,,1014,1014,1014,1014,,,1014,1014,416,416',
'416,,416,,,,416,416,,,,416,,416,416,416,416,416,416,416,,,,,,416,416',
'416,416,416,416,416,,,416,,,,,,,416,,,416,416,416,416,416,416,416,416',
',416,416,416,,416,416,,416,416,416,,,,,,,,,,,,,,,,,,,,416,,,416,,,416',
'416,,,416,,,,,,416,,,,,,,,416,,,,,416,416,416,416,416,416,,,,416,416',
',,,,,,416,,,416,416,416,,,416,416,570,570,570,,570,,,,570,570,,,,570',
',570,570,570,570,570,570,570,,,,,,570,570,570,570,570,570,570,,,570',
',,,,,,570,,,570,570,570,570,570,570,570,570,,570,570,570,,570,570,,570',
'570,570,,,,,,,,,,,,,,,,,,,,570,,,570,,,570,570,,,570,,,,,,570,,,,,,',
',570,,,,,570,570,570,570,570,570,,,,570,570,,,,,,,570,,,570,570,570',
',,570,570,543,543,543,,543,,,,543,543,,,,543,,543,543,543,543,543,543',
'543,,,,,,543,543,543,543,543,543,543,,,543,,,,,,,543,,,543,543,543,543',
'543,543,543,543,543,543,543,543,,543,543,,543,543,543,,,,,,,,,,,,,,',
',,,,,543,,,543,,,543,543,,,543,,,,,,543,,,,,,,,543,,,,,543,543,543,543',
'543,543,,,,543,543,,,,,,,543,,543,543,543,543,,,543,543,23,23,23,,23',
',,,23,23,,,,23,,23,23,23,23,23,23,23,,,,,,23,23,23,23,23,23,23,,,23',
',,,,,,23,,,23,23,23,23,23,23,23,23,,23,23,23,,23,23,,23,23,23,,,,,,',
',,,,,,,,,,,,,23,,,23,,,23,23,,,23,,,,,,23,,,,,,,,23,,,,,23,23,23,23',
'23,23,,,,23,23,,,,,,,23,,,23,23,23,,,23,23,939,939,939,,939,,,,939,939',
',,,939,,939,939,939,939,939,939,939,,,,,,939,939,939,939,939,939,939',
',,939,,,,,,,939,,,939,939,939,939,939,939,939,939,,939,939,939,,939',
'939,,939,939,939,,,,,,,,,,,,,,,,,,,,939,,,939,,,939,939,,,939,,939,',
',,939,,,,,,,,939,,,,,939,939,939,939,939,939,,,,939,939,,,,,,,939,,',
'939,939,939,,,939,939,914,914,914,,914,,,,914,914,,,,914,,914,914,914',
'914,914,914,914,,,,,,914,914,914,914,914,914,914,,,914,,,,,,,914,,,914',
'914,914,914,914,914,914,914,,914,914,914,,914,914,,,,914,,,,,,,,,,,',
',,,,,,,,914,,,914,,,914,914,,,914,,,,,,,,,,,,,,,,,,,914,914,914,914',
'914,914,,,,914,914,,,,,,,914,,,914,914,914,,,914,914,540,540,540,,540',
',,,540,540,,,,540,,540,540,540,540,540,540,540,,,,,,540,540,540,540',
'540,540,540,,,540,,,,,,,540,,,540,540,540,540,540,540,540,540,540,540',
'540,540,,540,540,,540,540,540,,,,,,,,,,,,,,,,,,,,540,,,540,,,540,540',
',,540,,540,,,,540,,,,,,,,540,,,,,540,540,540,540,540,540,,,,540,540',
',,,,,,540,,540,540,540,540,,,540,540,32,32,32,,32,,,,32,32,,,,32,,32',
'32,32,32,32,32,32,,,,,,32,32,32,32,32,32,32,,,32,,,,,,,32,,,32,32,32',
'32,32,32,32,32,32,32,32,32,,32,32,,32,32,32,,,,,,,,,,,,,,,,,,,,32,,',
'32,,,32,32,,,32,,32,,32,,32,,,,,,,,32,,,,,32,32,32,32,32,32,,,,32,32',
',,,,,,32,,32,32,32,32,,,32,32,33,33,33,,33,,,,33,33,,,,33,,33,33,33',
'33,33,33,33,,,,,,33,33,33,33,33,33,33,,,33,,,,,,,33,,,33,33,33,33,33',
'33,33,33,33,33,33,33,,33,33,,33,33,33,,,,,,,,,,,,,,,,,,,,33,,,33,,,33',
'33,,,33,,33,,33,,33,,,,,,,,33,,,,,33,33,33,33,33,33,,,,33,33,,,,,,,33',
',33,33,33,33,,,33,33,34,34,34,,34,,,,34,34,,,,34,,34,34,34,34,34,34',
'34,,,,,,34,34,34,34,34,34,34,,,34,,,,,,,34,,,34,34,34,34,34,34,34,34',
'34,34,34,34,,34,34,,34,34,34,,,,,,,,,,,,,,,,,,,,34,,,34,,,34,34,,,34',
',34,,34,,34,,,,,,,,34,,,,,34,34,34,34,34,34,,,,34,34,,,,,,,34,,34,34',
'34,34,,,34,34,534,534,534,,534,,,,534,534,,,,534,,534,534,534,534,534',
'534,534,,,,,,534,534,534,534,534,534,534,,,534,,,,,,,534,,,534,534,534',
'534,534,534,534,534,,534,534,534,,534,534,,534,534,534,,,,,,,,,,,,,',
',,,,,,534,,,534,,,534,534,,,534,,,,,,534,,,,,,,,534,,,,,534,534,534',
'534,534,534,,,,534,534,,,,,,,534,,,534,534,534,,,534,534,37,37,37,,37',
',,,37,37,,,,37,,37,37,37,37,37,37,37,,,,,,37,37,37,37,37,37,37,,,37',
',,,,,,37,,,37,37,37,37,37,37,37,37,,37,37,37,,37,37,,,,37,,,,,,,,,,',
',,,,,,,,,37,,,37,,,37,37,,,37,,37,,,,,,,,,,,,,,,,,37,37,37,37,37,37',
',,,37,37,,,,,,,37,,,37,37,37,,,37,37,38,38,38,,38,,,,38,38,,,,38,,38',
'38,38,38,38,38,38,,,,,,38,38,38,38,38,38,38,,,38,,,,,,,38,,,38,38,38',
'38,38,38,38,38,,38,38,38,,38,38,,,,38,,,,,,,,,,,,,,,,,,,,38,,,38,,,38',
'38,,,38,,,,,,,,,,,,,,,,,,,38,38,38,38,38,38,,,,38,38,,,,38,,,38,,,38',
'38,38,,,38,38,530,530,530,,530,,,,530,530,,,,530,,530,530,530,530,530',
'530,530,,,,,,530,530,530,530,530,530,530,,,530,,,,,,,530,,,530,530,530',
'530,530,530,530,530,,530,530,530,,530,530,,530,530,530,,,,,,,,,,,,,',
',,,,,,530,,,530,,,530,530,,,530,,,,,,530,,,,,,,,530,,,,,530,530,530',
'530,530,530,,,,530,530,,,,,,,530,,,530,530,530,,,530,530,529,529,529',
',529,,,,529,529,,,,529,,529,529,529,529,529,529,529,,,,,,529,529,529',
'529,529,529,529,,,529,,,,,,,529,,,529,529,529,529,529,529,529,529,,529',
'529,529,,529,529,,529,529,529,,,,,,,,,,,,,,,,,,,,529,,,529,,,529,529',
',,529,,,,,,529,,,,,,,,529,,,,,529,529,529,529,529,529,,,,529,529,,,',
',,,529,,,529,529,529,,,529,529,902,902,902,,902,,,,902,902,,,,902,,902',
'902,902,902,902,902,902,,,,,,902,902,902,902,902,902,902,,,902,,,,,',
',902,,,902,902,902,902,902,902,902,902,,902,902,902,,902,902,,,,902',
',,,,,,,,,,,,,,,,,,,902,,,902,,,902,902,,,902,,,,,,,,,,,,,,,,,,,902,902',
'902,902,902,902,,,,902,902,,,,,,,902,,,902,902,902,,,902,902,887,887',
'887,,887,,,,887,887,,,,887,,887,887,887,887,887,887,887,,,,,,887,887',
'887,887,887,887,887,,,887,,,,,,,887,,,887,887,887,887,887,887,887,887',
',887,887,887,,887,887,,887,887,887,,,,,,,,,,,,,,,,,,,,887,,,887,,,887',
'887,,,887,,,,,,887,,,,,,,,887,,,,,887,887,887,887,887,887,,,,887,887',
',,,,,,887,,,887,887,887,,,887,887,45,45,45,,45,,,,45,45,,,,45,,45,45',
'45,45,45,45,45,,,,,,45,45,45,45,45,45,45,,,45,,,,,,,45,,,45,45,45,45',
'45,45,45,45,,45,45,45,,45,45,,45,45,45,,,,,,,,,,,,,,,,,,,,45,,,45,,',
'45,45,,,45,,,,,,45,,,,,,,,45,,,,,45,45,45,45,45,45,,,,45,45,,,,,,,45',
',,45,45,45,,,45,45,46,46,46,,46,,,,46,46,,,,46,,46,46,46,46,46,46,46',
',,,,,46,46,46,46,46,46,46,,,46,,,,,,,46,,,46,46,46,46,46,46,46,46,,46',
'46,46,,46,46,,46,46,46,,,,,,,,,,,,,,,,,,,,46,,,46,,,46,46,,,46,,,,,',
'46,,,,,,,,46,,,,,46,46,46,46,46,46,,,,46,46,,,,,,,46,,,46,46,46,,,46',
'46,526,526,526,,526,,,,526,526,,,,526,,526,526,526,526,526,526,526,',
',,,,526,526,526,526,526,526,526,,,526,,,,,,,526,,,526,526,526,526,526',
'526,526,526,,526,526,526,,526,526,,,,526,,,,,,,,,,,,,,,,,,,,526,,,526',
',,526,526,,,526,,,,,,,,,,,,,,,,,,,526,526,526,526,526,526,,,,526,526',
',,,,,,526,,,526,526,526,,,526,526,62,62,62,,62,,,,62,62,,,,62,,62,62',
'62,62,62,62,62,,,,,,62,62,62,62,62,62,62,,,62,,,,,,,62,,,62,62,62,62',
'62,62,62,62,62,62,62,62,,62,62,,62,62,62,,,,,,,,,,,,,,,,,,,,62,,,62',
',,62,62,,,62,,62,,,,62,,,,,,,,62,,,,,62,62,62,62,62,62,,,,62,62,,,,',
',,62,,62,62,62,62,,,62,62,66,66,66,,66,,,,66,66,,,,66,,66,66,66,66,66',
'66,66,,,,,,66,66,66,66,66,66,66,,,66,,,,,,,66,,,66,66,66,66,66,66,66',
'66,,66,66,66,,66,66,,66,66,66,,,,,,,,,,,,,,,,,,,,66,,,66,,,66,66,,,66',
',,,,,66,,,,,,,,66,,,,,66,66,66,66,66,66,,,,66,66,,,,,,,66,,,66,66,66',
',,66,66,67,67,67,,67,,,,67,67,,,,67,,67,67,67,67,67,67,67,,,,,,67,67',
'67,67,67,67,67,,,67,,,,,,,67,,,67,67,67,67,67,67,67,67,,67,67,67,,67',
'67,,67,67,67,,,,,,,,,,,,,,,,,,,,67,,,67,,,67,67,,,67,,,,,,67,,,,,,,',
'67,,,,,67,67,67,67,67,67,,,,67,67,,,,,,,67,,,67,67,67,,,67,67,70,70',
'70,,70,,,,70,70,,,,70,,70,70,70,70,70,70,70,,,,,,70,70,70,70,70,70,70',
',,70,,,,,,,70,,,70,70,70,70,70,70,70,70,,70,70,70,,70,70,,70,70,70,',
',,,,,,,,,,,,,,,,,,70,,,70,,,70,70,,,70,,,,,,70,,,,,,,,70,,,,,70,70,70',
'70,70,70,,,,70,70,70,,,,,70,70,,,70,70,70,,,70,70,71,71,71,,71,,,,71',
'71,,,,71,,71,71,71,71,71,71,71,,,,,,71,71,71,71,71,71,71,,,71,,,,,,',
'71,,,71,71,71,71,71,71,71,71,,71,71,71,,71,71,,,,71,,,,,,,,,,,,,,,,',
',,,71,,,71,,,71,71,,,71,,71,,,,,,,,,,,,,,,,,71,71,71,71,71,71,,,,71',
'71,,,,,,,71,,,71,71,71,,,71,71,520,520,520,,520,,,,520,520,,,,520,,520',
'520,520,520,520,520,520,,,,,,520,520,520,520,520,520,520,,,520,,,,,',
',520,,,520,520,520,520,520,520,520,520,520,520,520,520,,520,520,,520',
'520,520,,,,,,,,,,,,,,,,,,,,520,,,520,,,520,520,,,520,,520,,520,,520',
',,,,,,,520,,,,,520,520,520,520,520,520,,,,520,520,,,,,,,520,,520,520',
'520,520,,,520,520,855,855,855,,855,,,,855,855,,,,855,,855,855,855,855',
'855,855,855,,,,,,855,855,855,855,855,855,855,,,855,,,,,,,855,,,855,855',
'855,855,855,855,855,855,,855,855,855,,855,855,,855,855,855,,,,,,,,,',
',,,,,,,,,,855,,,855,,,855,855,,,855,,,,,,855,,,,,,,,855,,,,,855,855',
'855,855,855,855,,,,855,855,,,,,,,855,,,855,855,855,,,855,855,8,8,8,8',
'8,,,,8,8,,,,8,,8,8,8,8,8,8,8,,,,,,8,8,8,8,8,8,8,,,8,,,,,,8,8,8,8,8,8',
'8,8,8,8,8,8,,8,8,8,,8,8,,8,8,8,,,,,,,,,,,,,,,,,,,,8,,,8,,,8,8,,,8,,8',
',,,8,,,,,,,,8,,,,,8,8,8,8,8,8,,,,8,8,,,,,,,8,,,8,8,8,,,8,8,114,114,114',
'114,114,,,,114,114,,,,114,,114,114,114,114,114,114,114,,,,,,114,114',
'114,114,114,114,114,,,114,,,,,,114,114,114,114,114,114,114,114,114,114',
'114,114,,114,114,114,,114,114,,114,114,114,,,,,,,,,,,,,,,,,,,,114,,',
'114,,,114,114,,,114,,114,,,,114,,,,,,,,114,,,,,114,114,114,114,114,114',
',,,114,114,,,,,,114,114,,,114,114,114,,,114,114,119,119,119,,119,,,',
'119,119,,,,119,,119,119,119,119,119,119,119,,,,,,119,119,119,119,119',
'119,119,,,119,,,,,,,119,,,119,119,119,119,119,119,119,119,,119,119,119',
',119,119,,119,119,119,,,,,,,,,,,,,,,,,,,,119,,,119,,,119,119,,,119,',
',,,,119,,,,,,,,119,,,,,119,119,119,119,119,119,,,,119,119,,,,,,,119',
',,119,119,119,,,119,119,120,120,120,,120,,,,120,120,,,,120,,120,120',
'120,120,120,120,120,,,,,,120,120,120,120,120,120,120,,,120,,,,,,,120',
',,120,120,120,120,120,120,120,120,,120,120,120,,120,120,,120,120,120',
',,,,,,,,,,,,,,,,,,,120,,,120,,,120,120,,,120,,,,,,120,,,,,,,,120,,,',
',120,120,120,120,120,120,,,,120,120,,,,,,,120,,,120,120,120,,,120,120',
'121,121,121,,121,,,,121,121,,,,121,,121,121,121,121,121,121,121,,,,',
',121,121,121,121,121,121,121,,,121,,,,,,,121,,,121,121,121,121,121,121',
'121,121,,121,121,121,,121,121,,121,121,121,,,,,,,,,,,,,,,,,,,,121,,',
'121,,,121,121,,,121,,,,,,121,,,,,,,,121,,,,,121,121,121,121,121,121',
',,,121,121,,,,,,,121,,,121,121,121,,,121,121,122,122,122,,122,,,,122',
'122,,,,122,,122,122,122,122,122,122,122,,,,,,122,122,122,122,122,122',
'122,,,122,,,,,,,122,,,122,122,122,122,122,122,122,122,,122,122,122,',
'122,122,,122,122,122,,,,,,,,,,,,,,,,,,,,122,,,122,,,122,122,,,122,,',
',,,122,,,,,,,,122,,,,,122,122,122,122,122,122,,,,122,122,,,,,,,122,',
',122,122,122,,,122,122,123,123,123,123,123,,,,123,123,,,,123,,123,123',
'123,123,123,123,123,,,,,,123,123,123,123,123,123,123,,,123,,,,,,123',
'123,,123,123,123,123,123,123,123,123,123,,123,123,123,,123,123,,123',
'123,123,,,,,,,,,,,,,,,,,,,,123,,,123,,,123,123,,,123,,123,,,,123,,,',
',,,,123,,,,,123,123,123,123,123,123,,,,123,123,,,,,,,123,,,123,123,123',
',,123,123,518,518,518,,518,,,,518,518,,,,518,,518,518,518,518,518,518',
'518,,,,,,518,518,518,518,518,518,518,,,518,,,,,,,518,,,518,518,518,518',
'518,518,518,518,,518,518,518,,518,518,,,,518,,,,,,,,,,,,,,,,,,,,518',
',,518,,,518,518,,,518,,,,,,,,,,,,,,,,,,,518,518,518,518,518,518,,,,518',
'518,,,,,,,518,,,518,518,518,,,518,518,511,511,511,511,511,,,,511,511',
',,,511,,511,511,511,511,511,511,511,,,,,,511,511,511,511,511,511,511',
',,511,,,,,,511,511,,511,511,511,511,511,511,511,511,511,,511,511,511',
',511,511,,511,511,511,,,,,,,,,,,,,,,,,,,,511,,,511,,,511,511,,,511,',
'511,,,,511,,,,,,,,511,,,,,511,511,511,511,511,511,,,,511,511,,,,,,511',
'511,,,511,511,511,,,511,511,508,508,508,,508,,,,508,508,,,,508,,508',
'508,508,508,508,508,508,,,,,,508,508,508,508,508,508,508,,,508,,,,,',
',508,,,508,508,508,508,508,508,508,508,,508,508,508,,508,508,,508,508',
'508,,,,,,,,,,,,,,,,,,,,508,,,508,,,508,508,,,508,,,,,,508,,,,,,,,508',
',,,,508,508,508,508,508,508,,,,508,508,,,,,,,508,,,508,508,508,,,508',
'508,504,504,504,,504,,,,504,504,,,,504,,504,504,504,504,504,504,504',
',,,,,504,504,504,504,504,504,504,,,504,,,,,,,504,,,504,504,504,504,504',
'504,504,504,,504,504,504,,504,504,,504,504,504,,,,,,,,,,,,,,,,,,,,504',
',,504,,,504,504,,,504,,,,,,504,,,,,,,,504,,,,,504,504,504,504,504,504',
',,,504,504,,,,,,,504,,,504,504,504,,,504,504,210,210,210,,210,,,,210',
'210,,,,210,,210,210,210,210,210,210,210,,,,,,210,210,210,210,210,210',
'210,,,210,,,,,,,210,,,210,210,210,210,210,210,210,210,,210,210,210,',
'210,210,,210,210,210,,,,,,,,,,,,,,,,,,,,210,,,210,,,210,210,,,210,,210',
',,,210,,,,,,,,210,,,,,210,210,210,210,210,210,,,,210,210,,,,,,,210,',
',210,210,210,,,210,210,211,211,211,,211,,,,211,211,,,,211,,211,211,211',
'211,211,211,211,,,,,,211,211,211,211,211,211,211,,,211,,,,,,,211,,,211',
'211,211,211,211,211,211,211,,211,211,211,,211,211,,211,211,211,,,,,',
',,,,,,,,,,,,,,211,,,211,,,211,211,,,211,,,,,,211,,,,,,,,211,,,,,211',
'211,211,211,211,211,,,,211,211,,,,,,,211,,,211,211,211,,,211,211,212',
'212,212,,212,,,,212,212,,,,212,,212,212,212,212,212,212,212,,,,,,212',
'212,212,212,212,212,212,,,212,,,,,,,212,,,212,212,212,212,212,212,212',
'212,212,212,212,212,,212,212,,212,212,212,,,,,,,,,,,,,,,,,,,,212,,,212',
',,212,212,,,212,,212,,212,,212,,,,,,,,212,,,,,212,212,212,212,212,212',
',,,212,212,,,,,,,212,,212,212,212,212,,,212,212,502,502,502,,502,,,',
'502,502,,,,502,,502,502,502,502,502,502,502,,,,,,502,502,502,502,502',
'502,502,,,502,,,,,,,502,,,502,502,502,502,502,502,502,502,502,502,502',
'502,,502,502,,502,502,502,,,,,,,,,,,,,,,,,,,,502,,,502,,,502,502,,,502',
',,,502,,502,,,,,,,,502,,,,,502,502,502,502,502,502,,,,502,502,,,,,,',
'502,,502,502,502,502,,,502,502,807,807,807,,807,,,,807,807,,,,807,,807',
'807,807,807,807,807,807,,,,,,807,807,807,807,807,807,807,,,807,,,,,',
',807,,,807,807,807,807,807,807,807,807,,807,807,807,,807,807,,,,807',
',,,,,,,,,,,,,,,,,,,807,,,807,,,807,807,,,807,,,,,,,,,,,,,,,,,,,807,807',
'807,807,807,807,,,,807,807,,,,,,,807,,,807,807,807,,,807,807,216,216',
'216,,216,,,,216,216,,,,216,,216,216,216,216,216,216,216,,,,,,216,216',
'216,216,216,216,216,,,216,,,,,,,216,,,216,216,216,216,216,216,216,216',
',216,216,216,,216,216,,216,216,216,,,,,,,,,,,,,,,,,,,,216,,,216,,,216',
'216,,,216,,,,,,216,,,,,,,,216,,,,,216,216,216,216,216,216,,,,216,216',
',,,,,,216,,,216,216,216,,,216,216,217,217,217,,217,,,,217,217,,,,217',
',217,217,217,217,217,217,217,,,,,,217,217,217,217,217,217,217,,,217',
',,,,,,217,,,217,217,217,217,217,217,217,217,,217,217,217,,217,217,,217',
'217,217,,,,,,,,,,,,,,,,,,,,217,,,217,,,217,217,,,217,,217,,,,217,,,',
',,,,217,,,,,217,217,217,217,217,217,,,,217,217,,,,,,,217,,,217,217,217',
',,217,217,218,218,218,,218,,,,218,218,,,,218,,218,218,218,218,218,218',
'218,,,,,,218,218,218,218,218,218,218,,,218,,,,,,,218,,,218,218,218,218',
'218,218,218,218,,218,218,218,,218,218,,218,218,218,,,,,,,,,,,,,,,,,',
',,218,,,218,,,218,218,,,218,,,,,,218,,,,,,,,218,,,,,218,218,218,218',
'218,218,,,,218,218,,,,,,,218,,,218,218,218,,,218,218,219,219,219,,219',
',,,219,219,,,,219,,219,219,219,219,219,219,219,,,,,,219,219,219,219',
'219,219,219,,,219,,,,,,,219,,,219,219,219,219,219,219,219,219,,219,219',
'219,,219,219,,219,219,219,,,,,,,,,,,,,,,,,,,,219,,,219,,,219,219,,,219',
',,,,,219,,,,,,,,219,,,,,219,219,219,219,219,219,,,,219,219,,,,,,,219',
',,219,219,219,,,219,219,220,220,220,,220,,,,220,220,,,,220,,220,220',
'220,220,220,220,220,,,,,,220,220,220,220,220,220,220,,,220,,,,,,,220',
',,220,220,220,220,220,220,220,220,,220,220,220,,220,220,,220,220,220',
',,,,,,,,,,,,,,,,,,,220,,,220,,,220,220,,,220,,,,,,220,,,,,,,,220,,,',
',220,220,220,220,220,220,,,,220,220,,,,,,,220,,,220,220,220,,,220,220',
'221,221,221,,221,,,,221,221,,,,221,,221,221,221,221,221,221,221,,,,',
',221,221,221,221,221,221,221,,,221,,,,,,,221,,,221,221,221,221,221,221',
'221,221,,221,221,221,,221,221,,221,221,221,,,,,,,,,,,,,,,,,,,,221,,',
'221,,,221,221,,,221,,,,,,221,,,,,,,,221,,,,,221,221,221,221,221,221',
',,,221,221,221,,,,,,221,,,221,221,221,,,221,221,47,47,47,,47,,,,47,47',
',,,47,,47,47,47,47,47,47,47,,,,,,47,47,47,47,47,47,47,,,47,,,,,,,47',
',,47,47,47,47,47,47,47,47,,47,47,47,,47,47,,47,47,47,,,,,,,,,,,,,,,',
',,,,47,,,47,,,47,47,,,47,,,,,,47,,,,,,,,47,,,,,47,47,47,47,47,47,,,',
'47,47,,,,,,,47,,,47,47,47,,,47,47,793,793,793,,793,,,,793,793,,,,793',
',793,793,793,793,793,793,793,,,,,,793,793,793,793,793,793,793,,,793',
',,,,,,793,,,793,793,793,793,793,793,793,793,,793,793,793,,793,793,,793',
'793,793,,,,,,,,,,,,,,,,,,,,793,,,793,,,793,793,,,793,,,,,,793,,,,,,',
',793,,,,,793,793,793,793,793,793,,,,793,793,,,,,,,793,,,793,793,793',
',,793,793,792,792,792,,792,,,,792,792,,,,792,,792,792,792,792,792,792',
'792,,,,,,792,792,792,792,792,792,792,,,792,,,,,,,792,,,792,792,792,792',
'792,792,792,792,,792,792,792,,792,792,,792,792,792,,,,,,,,,,,,,,,,,',
',,792,,,792,,,792,792,,,792,,,,,,792,,,,,,,,792,,,,,792,792,792,792',
'792,792,,,,792,792,,,,,,,792,,,792,792,792,,,792,792,791,791,791,,791',
',,,791,791,,,,791,,791,791,791,791,791,791,791,,,,,,791,791,791,791',
'791,791,791,,,791,,,,,,,791,,,791,791,791,791,791,791,791,791,,791,791',
'791,,791,791,,791,791,791,,,,,,,,,,,,,,,,,,,,791,,,791,,,791,791,,,791',
',,,,,791,,,,,,,,791,,,,,791,791,791,791,791,791,,,,791,791,,,,,,,791',
',,791,791,791,,,791,791,790,790,790,,790,,,,790,790,,,,790,,790,790',
'790,790,790,790,790,,,,,,790,790,790,790,790,790,790,,,790,,,,,,,790',
',,790,790,790,790,790,790,790,790,,790,790,790,,790,790,,790,790,790',
',,,,,,,,,,,,,,,,,,,790,,,790,,,790,790,,,790,,,,,,790,,,,,,,,790,,,',
',790,790,790,790,790,790,,,,790,790,,,,,,,790,,,790,790,790,,,790,790',
'776,776,776,,776,,,,776,776,,,,776,,776,776,776,776,776,776,776,,,,',
',776,776,776,776,776,776,776,,,776,,,,,,,776,,,776,776,776,776,776,776',
'776,776,,776,776,776,,776,776,,776,776,776,,,,,,,,,,,,,,,,,,,,776,,',
'776,,,776,776,,,776,,,,,,776,,,,,,,,776,,,,,776,776,776,776,776,776',
',,,776,776,,,,,,,776,,,776,776,776,,,776,776,774,774,774,,774,,,,774',
'774,,,,774,,774,774,774,774,774,774,774,,,,,,774,774,774,774,774,774',
'774,,,774,,,,,,,774,,,774,774,774,774,774,774,774,774,,774,774,774,',
'774,774,,774,774,774,,,,,,,,,,,,,,,,,,,,774,,,774,,,774,774,,,774,,',
',,,774,,,,,,,,774,,,,,774,774,774,774,774,774,,,,774,774,,,,,,,774,',
',774,774,774,,,774,774,232,232,232,,232,,,,232,232,,,,232,,232,232,232',
'232,232,232,232,,,,,,232,232,232,232,232,232,232,,,232,,,,,,,232,,,232',
'232,232,232,232,232,232,232,,232,232,232,,232,232,,232,232,232,,,,,',
',,,,,,,,,,,,,,232,,,232,,,232,232,,,232,,,,,,232,,,,,,,,232,,,,,232',
'232,232,232,232,232,,,,232,232,,,,,,,232,,,232,232,232,,,232,232,499',
'499,499,,499,,,,499,499,,,,499,,499,499,499,499,499,499,499,,,,,,499',
'499,499,499,499,499,499,,,499,,,,,,,499,,,499,499,499,499,499,499,499',
'499,499,499,499,499,,499,499,,499,499,499,,,,,,,,,,,,,,,,,,,,499,,,499',
',,499,499,,,499,,499,,499,,499,,,,,,,,499,,,,,499,499,499,499,499,499',
',,,499,499,,,,,,,499,,499,499,499,499,,,499,499,235,235,235,,235,,,',
'235,235,,,,235,,235,235,235,235,235,235,235,,,,,,235,235,235,235,235',
'235,235,,,235,,,,,,,235,,,235,235,235,235,235,235,235,235,,235,235,235',
',235,235,,235,235,235,,,,,,,,,,,,,,,,,,,,235,,,235,,,235,235,,,235,',
',,,,235,,,,,,,,235,,,,,235,235,235,235,235,235,,,,235,235,,,,,,,235',
',,235,235,235,,,235,235,236,236,236,,236,,,,236,236,,,,236,,236,236',
'236,236,236,236,236,,,,,,236,236,236,236,236,236,236,,,236,,,,,,,236',
',,236,236,236,236,236,236,236,236,,236,236,236,,236,236,,236,236,236',
',,,,,,,,,,,,,,,,,,,236,,,236,,,236,236,,,236,,,,,,236,,,,,,,,236,,,',
',236,236,236,236,236,236,,,,236,236,,,,,,,236,,,236,236,236,,,236,236',
'237,237,237,,237,,,,237,237,,,,237,,237,237,237,237,237,237,237,,,,',
',237,237,237,237,237,237,237,,,237,,,,,,,237,,,237,237,237,237,237,237',
'237,237,,237,237,237,,237,237,,237,237,237,,,,,,,,,,,,,,,,,,,,237,,',
'237,,,237,237,,,237,,,,,,237,,,,,,,,237,,,,,237,237,237,237,237,237',
',,,237,237,,,,,,,237,,,237,237,237,,,237,237,238,238,238,,238,,,,238',
'238,,,,238,,238,238,238,238,238,238,238,,,,,,238,238,238,238,238,238',
'238,,,238,,,,,,,238,,,238,238,238,238,238,238,238,238,,238,238,238,',
'238,238,,238,238,238,,,,,,,,,,,,,,,,,,,,238,,,238,,,238,238,,,238,,',
',,,238,,,,,,,,238,,,,,238,238,238,238,238,238,,,,238,238,,,,,,,238,',
',238,238,238,,,238,238,239,239,239,,239,,,,239,239,,,,239,,239,239,239',
'239,239,239,239,,,,,,239,239,239,239,239,239,239,,,239,,,,,,,239,,,239',
'239,239,239,239,239,239,239,,239,239,239,,239,239,,239,239,239,,,,,',
',,,,,,,,,,,,,,239,,,239,,,239,239,,,239,,,,,,239,,,,,,,,239,,,,,239',
'239,239,239,239,239,,,,239,239,,,,,,,239,,,239,239,239,,,239,239,240',
'240,240,,240,,,,240,240,,,,240,,240,240,240,240,240,240,240,,,,,,240',
'240,240,240,240,240,240,,,240,,,,,,,240,,,240,240,240,240,240,240,240',
'240,,240,240,240,,240,240,,240,240,240,,,,,,,,,,,,,,,,,,,,240,,,240',
',,240,240,,,240,,,,,,240,,,,,,,,240,,,,,240,240,240,240,240,240,,,,240',
'240,,,,,,,240,,,240,240,240,,,240,240,241,241,241,,241,,,,241,241,,',
',241,,241,241,241,241,241,241,241,,,,,,241,241,241,241,241,241,241,',
',241,,,,,,,241,,,241,241,241,241,241,241,241,241,,241,241,241,,241,241',
',241,241,241,,,,,,,,,,,,,,,,,,,,241,,,241,,,241,241,,,241,,,,,,241,',
',,,,,,241,,,,,241,241,241,241,241,241,,,,241,241,,,,,,,241,,,241,241',
'241,,,241,241,242,242,242,,242,,,,242,242,,,,242,,242,242,242,242,242',
'242,242,,,,,,242,242,242,242,242,242,242,,,242,,,,,,,242,,,242,242,242',
'242,242,242,242,242,,242,242,242,,242,242,,242,242,242,,,,,,,,,,,,,',
',,,,,,242,,,242,,,242,242,,,242,,,,,,242,,,,,,,,242,,,,,242,242,242',
'242,242,242,,,,242,242,,,,,,,242,,,242,242,242,,,242,242,243,243,243',
',243,,,,243,243,,,,243,,243,243,243,243,243,243,243,,,,,,243,243,243',
'243,243,243,243,,,243,,,,,,,243,,,243,243,243,243,243,243,243,243,,243',
'243,243,,243,243,,243,243,243,,,,,,,,,,,,,,,,,,,,243,,,243,,,243,243',
',,243,,,,,,243,,,,,,,,243,,,,,243,243,243,243,243,243,,,,243,243,,,',
',,,243,,,243,243,243,,,243,243,244,244,244,,244,,,,244,244,,,,244,,244',
'244,244,244,244,244,244,,,,,,244,244,244,244,244,244,244,,,244,,,,,',
',244,,,244,244,244,244,244,244,244,244,,244,244,244,,244,244,,244,244',
'244,,,,,,,,,,,,,,,,,,,,244,,,244,,,244,244,,,244,,,,,,244,,,,,,,,244',
',,,,244,244,244,244,244,244,,,,244,244,,,,,,,244,,,244,244,244,,,244',
'244,245,245,245,,245,,,,245,245,,,,245,,245,245,245,245,245,245,245',
',,,,,245,245,245,245,245,245,245,,,245,,,,,,,245,,,245,245,245,245,245',
'245,245,245,,245,245,245,,245,245,,245,245,245,,,,,,,,,,,,,,,,,,,,245',
',,245,,,245,245,,,245,,,,,,245,,,,,,,,245,,,,,245,245,245,245,245,245',
',,,245,245,,,,,,,245,,,245,245,245,,,245,245,246,246,246,,246,,,,246',
'246,,,,246,,246,246,246,246,246,246,246,,,,,,246,246,246,246,246,246',
'246,,,246,,,,,,,246,,,246,246,246,246,246,246,246,246,,246,246,246,',
'246,246,,246,246,246,,,,,,,,,,,,,,,,,,,,246,,,246,,,246,246,,,246,,',
',,,246,,,,,,,,246,,,,,246,246,246,246,246,246,,,,246,246,,,,,,,246,',
',246,246,246,,,246,246,247,247,247,,247,,,,247,247,,,,247,,247,247,247',
'247,247,247,247,,,,,,247,247,247,247,247,247,247,,,247,,,,,,,247,,,247',
'247,247,247,247,247,247,247,,247,247,247,,247,247,,247,247,247,,,,,',
',,,,,,,,,,,,,,247,,,247,,,247,247,,,247,,,,,,247,,,,,,,,247,,,,,247',
'247,247,247,247,247,,,,247,247,,,,,,,247,,,247,247,247,,,247,247,248',
'248,248,,248,,,,248,248,,,,248,,248,248,248,248,248,248,248,,,,,,248',
'248,248,248,248,248,248,,,248,,,,,,,248,,,248,248,248,248,248,248,248',
'248,,248,248,248,,248,248,,248,248,248,,,,,,,,,,,,,,,,,,,,248,,,248',
',,248,248,,,248,,,,,,248,,,,,,,,248,,,,,248,248,248,248,248,248,,,,248',
'248,,,,,,,248,,,248,248,248,,,248,248,249,249,249,,249,,,,249,249,,',
',249,,249,249,249,249,249,249,249,,,,,,249,249,249,249,249,249,249,',
',249,,,,,,,249,,,249,249,249,249,249,249,249,249,,249,249,249,,249,249',
',249,249,249,,,,,,,,,,,,,,,,,,,,249,,,249,,,249,249,,,249,,,,,,249,',
',,,,,,249,,,,,249,249,249,249,249,249,,,,249,249,,,,,,,249,,,249,249',
'249,,,249,249,250,250,250,,250,,,,250,250,,,,250,,250,250,250,250,250',
'250,250,,,,,,250,250,250,250,250,250,250,,,250,,,,,,,250,,,250,250,250',
'250,250,250,250,250,,250,250,250,,250,250,,250,250,250,,,,,,,,,,,,,',
',,,,,,250,,,250,,,250,250,,,250,,,,,,250,,,,,,,,250,,,,,250,250,250',
'250,250,250,,,,250,250,,,,,,,250,,,250,250,250,,,250,250,251,251,251',
',251,,,,251,251,,,,251,,251,251,251,251,251,251,251,,,,,,251,251,251',
'251,251,251,251,,,251,,,,,,,251,,,251,251,251,251,251,251,251,251,,251',
'251,251,,251,251,,251,251,251,,,,,,,,,,,,,,,,,,,,251,,,251,,,251,251',
',,251,,,,,,251,,,,,,,,251,,,,,251,251,251,251,251,251,,,,251,251,,,',
',,,251,,,251,251,251,,,251,251,252,252,252,,252,,,,252,252,,,,252,,252',
'252,252,252,252,252,252,,,,,,252,252,252,252,252,252,252,,,252,,,,,',
',252,,,252,252,252,252,252,252,252,252,,252,252,252,,252,252,,252,252',
'252,,,,,,,,,,,,,,,,,,,,252,,,252,,,252,252,,,252,,,,,,252,,,,,,,,252',
',,,,252,252,252,252,252,252,,,,252,252,,,,,,,252,,,252,252,252,,,252',
'252,253,253,253,,253,,,,253,253,,,,253,,253,253,253,253,253,253,253',
',,,,,253,253,253,253,253,253,253,,,253,,,,,,,253,,,253,253,253,253,253',
'253,253,253,,253,253,253,,253,253,,253,253,253,,,,,,,,,,,,,,,,,,,,253',
',,253,,,253,253,,,253,,,,,,253,,,,,,,,253,,,,,253,253,253,253,253,253',
',,,253,253,,,,,,,253,,,253,253,253,,,253,253,254,254,254,,254,,,,254',
'254,,,,254,,254,254,254,254,254,254,254,,,,,,254,254,254,254,254,254',
'254,,,254,,,,,,,254,,,254,254,254,254,254,254,254,254,,254,254,254,',
'254,254,,254,254,254,,,,,,,,,,,,,,,,,,,,254,,,254,,,254,254,,,254,,',
',,,254,,,,,,,,254,,,,,254,254,254,254,254,254,,,,254,254,,,,,,,254,',
',254,254,254,,,254,254,255,255,255,,255,,,,255,255,,,,255,,255,255,255',
'255,255,255,255,,,,,,255,255,255,255,255,255,255,,,255,,,,,,,255,,,255',
'255,255,255,255,255,255,255,,255,255,255,,255,255,,255,255,255,,,,,',
',,,,,,,,,,,,,,255,,,255,,,255,255,,,255,,,,,,255,,,,,,,,255,,,,,255',
'255,255,255,255,255,,,,255,255,,,,,,,255,,,255,255,255,,,255,255,256',
'256,256,,256,,,,256,256,,,,256,,256,256,256,256,256,256,256,,,,,,256',
'256,256,256,256,256,256,,,256,,,,,,,256,,,256,256,256,256,256,256,256',
'256,,256,256,256,,256,256,,256,256,256,,,,,,,,,,,,,,,,,,,,256,,,256',
',,256,256,,,256,,,,,,256,,,,,,,,256,,,,,256,256,256,256,256,256,,,,256',
'256,,,,,,,256,,,256,256,256,,,256,256,257,257,257,,257,,,,257,257,,',
',257,,257,257,257,257,257,257,257,,,,,,257,257,257,257,257,257,257,',
',257,,,,,,,257,,,257,257,257,257,257,257,257,257,,257,257,257,,257,257',
',257,257,257,,,,,,,,,,,,,,,,,,,,257,,,257,,,257,257,,,257,,,,,,257,',
',,,,,,257,,,,,257,257,257,257,257,257,,,,257,257,,,,,,,257,,,257,257',
'257,,,257,257,258,258,258,,258,,,,258,258,,,,258,,258,258,258,258,258',
'258,258,,,,,,258,258,258,258,258,258,258,,,258,,,,,,,258,,,258,258,258',
'258,258,258,258,258,,258,258,258,,258,258,,258,258,258,,,,,,,,,,,,,',
',,,,,,258,,,258,,,258,258,,,258,,,,,,258,,,,,,,,258,,,,,258,258,258',
'258,258,258,,,,258,258,,,,,,,258,,,258,258,258,,,258,258,259,259,259',
',259,,,,259,259,,,,259,,259,259,259,259,259,259,259,,,,,,259,259,259',
'259,259,259,259,,,259,,,,,,,259,,,259,259,259,259,259,259,259,259,,259',
'259,259,,259,259,,259,259,259,,,,,,,,,,,,,,,,,,,,259,,,259,,,259,259',
',,259,,,,,,259,,,,,,,,259,,,,,259,259,259,259,259,259,,,,259,259,,,',
',,,259,,,259,259,259,,,259,259,260,260,260,,260,,,,260,260,,,,260,,260',
'260,260,260,260,260,260,,,,,,260,260,260,260,260,260,260,,,260,,,,,',
',260,,,260,260,260,260,260,260,260,260,,260,260,260,,260,260,,260,260',
'260,,,,,,,,,,,,,,,,,,,,260,,,260,,,260,260,,,260,,,,,,260,,,,,,,,260',
',,,,260,260,260,260,260,260,,,,260,260,,,,,,,260,,,260,260,260,,,260',
'260,267,267,267,,267,,,,267,267,,,,267,,267,267,267,267,267,267,267',
',,,,,267,267,267,267,267,267,267,,,267,,,,,,,267,,,267,267,267,267,267',
'267,267,267,267,267,267,267,,267,267,,267,267,267,,,,,,,,,,,,,,,,,,',
',267,,,267,,,267,267,,,267,,267,,267,,267,,,,,,,,267,,,,,267,267,267',
'267,267,267,,,,267,267,,,,,,,267,,267,267,267,267,,,267,267,458,458',
'458,,458,,,,458,458,,,,458,,458,458,458,458,458,458,458,,,,,,458,458',
'458,458,458,458,458,,,458,,,,,,,458,,,458,458,458,458,458,458,458,458',
',458,458,458,,458,458,,458,458,458,,,,,,,,,,,,,,,,,,,,458,,,458,,,458',
'458,,,458,,,,,,458,,,,,,,,458,,,,,458,458,458,458,458,458,,,,458,458',
',,,,,,458,,,458,458,458,,,458,458,273,273,273,,273,,,,273,273,,,,273',
',273,273,273,273,273,273,273,,,,,,273,273,273,273,273,273,273,,,273',
',,,,,,273,,,273,273,273,273,273,273,273,273,273,273,273,273,,273,273',
',273,273,273,,,,,,,,,,,,,,,,,,,,273,,,273,,,273,273,,,273,,273,,273',
',273,,,,,,,,273,,,,,273,273,273,273,273,273,,,,273,273,,,,,,,273,,273',
'273,273,273,,,273,273,276,276,276,,276,,,,276,276,,,,276,,276,276,276',
'276,276,276,276,,,,,,276,276,276,276,276,276,276,,,276,,,,,,,276,,,276',
'276,276,276,276,276,276,276,276,276,276,276,,276,276,,276,276,276,,',
',,,,,,,,,,,,,,,,,276,,,276,,,276,276,,,276,,276,,276,,276,,,,,,,,276',
',,,,276,276,276,276,276,276,,,,276,276,276,,,,,,276,,276,276,276,276',
',,276,276,457,457,457,,457,,,,457,457,,,,457,,457,457,457,457,457,457',
'457,,,,,,457,457,457,457,457,457,457,,,457,,,,,,,457,,,457,457,457,457',
'457,457,457,457,,457,457,457,,457,457,,457,457,457,,,,,,,,,,,,,,,,,',
',,457,,,457,,,457,457,,,457,,,,,,457,,,,,,,,457,,,,,457,457,457,457',
'457,457,,,,457,457,,,,,,,457,,,457,457,457,,,457,457,752,752,752,,752',
',,,752,752,,,,752,,752,752,752,752,752,752,752,,,,,,752,752,752,752',
'752,752,752,,,752,,,,,,,752,,,752,752,752,752,752,752,752,752,752,752',
'752,752,,752,752,,752,752,752,,,,,,,,,,,,,,,,,,,,752,,,752,,,752,752',
',,752,,752,,752,,752,,,,,,,,752,,,,,752,752,752,752,752,752,,,,752,752',
',,,,,,752,,752,752,752,752,,,752,752,746,746,746,,746,,,,746,746,,,',
'746,,746,746,746,746,746,746,746,,,,,,746,746,746,746,746,746,746,,',
'746,,,,,,,746,,,746,746,746,746,746,746,746,746,,746,746,746,,746,746',
',746,746,746,,,,,,,,,,,,,,,,,,,,746,,,746,,,746,746,,,746,,,,,,746,',
',,,,,,746,,,,,746,746,746,746,746,746,,,,746,746,,,,,,,746,,,746,746',
'746,,,746,746,283,283,283,,283,,,,283,283,,,,283,,283,283,283,283,283',
'283,283,,,,,,283,283,283,283,283,283,283,,,283,,,,,,,283,,,283,283,283',
'283,283,283,283,283,,283,283,283,,283,283,,283,283,283,,,,,,,,,,,,,',
',,,,,,283,,,283,,,283,283,,,283,,,,,,283,,,,,,,,283,,,,,283,283,283',
'283,283,283,,,,283,283,,,,,,,283,,,283,283,283,,,283,283,285,285,285',
',285,,,,285,285,,,,285,,285,285,285,285,285,285,285,,,,,,285,285,285',
'285,285,285,285,,,285,,,,,,,285,,,285,285,285,285,285,285,285,285,,285',
'285,285,,285,285,,285,285,285,,,,,,,,,,,,,,,,,,,,285,,,285,,,285,285',
',,285,,,,,,285,,,,,,,,285,,,,,285,285,285,285,285,285,,,,285,285,,,',
',,,285,,,285,285,285,,,285,285,287,287,287,,287,,,,287,287,,,,287,,287',
'287,287,287,287,287,287,,,,,,287,287,287,287,287,287,287,,,287,,,,,',
',287,,,287,287,287,287,287,287,287,287,,287,287,287,,287,287,,287,287',
'287,,,,,,,,,,,,,,,,,,,,287,,,287,,,287,287,,,287,,,,,,287,,,,,,,,287',
',,,,287,287,287,287,287,287,,,,287,287,,,,,,,287,,,287,287,287,,,287',
'287,290,290,290,,290,,,,290,290,,,,290,,290,290,290,290,290,290,290',
',,,,,290,290,290,290,290,290,290,,,290,,,,,,,290,,,290,290,290,290,290',
'290,290,290,,290,290,290,,290,290,,290,290,290,,,,,,,,,,,,,,,,,,,,290',
',,290,,,290,290,,,290,,,,,,290,,,,,,,,290,,,,,290,290,290,290,290,290',
',,,290,290,,,,,,,290,,,290,290,290,,,290,290,296,296,296,296,296,,,',
'296,296,,,,296,,296,296,296,296,296,296,296,,,,,,296,296,296,296,296',
'296,296,,,296,,,,,,296,296,,296,296,296,296,296,296,296,296,296,,296',
'296,296,,296,296,,296,296,296,,,,,,,,,,,,,,,,,,,,296,,,296,,,296,296',
',,296,,296,,,,296,,,,,,,,296,,,,,296,296,296,296,296,296,,,,296,296',
',,,,,,296,,,296,296,296,,,296,296,740,740,740,,740,,,,740,740,,,,740',
',740,740,740,740,740,740,740,,,,,,740,740,740,740,740,740,740,,,740',
',,,,,,740,,,740,740,740,740,740,740,740,740,,740,740,740,,740,740,,740',
'740,740,,,,,,,,,,,,,,,,,,,,740,,,740,,,740,740,,,740,,740,,,,740,,,',
',,,,740,,,,,740,740,740,740,740,740,,,,740,740,,,,,,,740,,,740,740,740',
',,740,740,456,456,456,,456,,,,456,456,,,,456,,456,456,456,456,456,456',
'456,,,,,,456,456,456,456,456,456,456,,,456,,,,,,,456,,,456,456,456,456',
'456,456,456,456,,456,456,456,,456,456,,456,456,456,,,,,,,,,,,,,,,,,',
',,456,,,456,,,456,456,,,456,,,,,,456,,,,,,,,456,,,,,456,456,456,456',
'456,456,,,,456,456,,,,,,,456,,,456,456,456,,,456,456,720,720,720,,720',
',,,720,720,,,,720,,720,720,720,720,720,720,720,,,,,,720,720,720,720',
'720,720,720,,,720,,,,,,,720,,,720,720,720,720,720,720,720,720,,720,720',
'720,,720,720,,720,720,720,,,,,,,,,,,,,,,,,,,,720,,,720,,,720,720,,,720',
',,,,,720,,,,,,,,720,,,,,720,720,720,720,720,720,,,,720,720,,,,,,,720',
',,720,720,720,,,720,720,302,302,302,,302,,,,302,302,,,,302,,302,302',
'302,302,302,302,302,,,,,,302,302,302,302,302,302,302,,,302,,,,,,,302',
',,302,302,302,302,302,302,302,302,,302,302,302,,302,302,,,,302,,,,,',
',,,,,,,,,,,,,,302,,,302,,,302,302,,,302,,,,,,,,,,,,,,,,,,,302,302,302',
'302,302,302,,,,302,302,,,,302,,,302,,,302,302,302,,,302,302,454,454',
'454,,454,,,,454,454,,,,454,,454,454,454,454,454,454,454,,,,,,454,454',
'454,454,454,454,454,,,454,,,,,,,454,,,454,454,454,454,454,454,454,454',
'454,454,454,454,,454,454,,454,454,454,,,,,,,,,,,,,,,,,,,,454,,,454,',
',454,454,,,454,,454,,454,,454,,,,,,,,454,,,,,454,454,454,454,454,454',
',,,454,454,,,,,,,454,,454,454,454,454,,,454,454,700,700,700,,700,,,',
'700,700,,,,700,,700,700,700,700,700,700,700,,,,,,700,700,700,700,700',
'700,700,,,700,,,,,,,700,,,700,700,700,700,700,700,700,700,,700,700,700',
',700,700,,700,700,700,,,,,,,,,,,,,,,,,,,,700,,,700,,,700,700,,,700,',
'700,,,,700,,,,,,,,700,,,,,700,700,700,700,700,700,,,,700,700,,,,,,,700',
',,700,700,700,,,700,700,695,695,695,,695,,,,695,695,,,,695,,695,695',
'695,695,695,695,695,,,,,,695,695,695,695,695,695,695,,,695,,,,,,,695',
',,695,695,695,695,695,695,695,695,,695,695,695,,695,695,,,,695,,,,,',
',,,,,,,,,,,,,,695,,,695,,,695,695,,,695,,,,,,,,,,,,,,,,,,,695,695,695',
'695,695,695,,,,695,695,,,,,,,695,,,695,695,695,,,695,695,684,684,684',
',684,,,,684,684,,,,684,,684,684,684,684,684,684,684,,,,,,684,684,684',
'684,684,684,684,,,684,,,,,,,684,,,684,684,684,684,684,684,684,684,,684',
'684,684,,684,684,,,,684,,,,,,,,,,,,,,,,,,,,684,,,684,,,684,684,,,684',
',,,,,,,,,,,,,,,,,,684,684,684,684,684,684,,,,684,684,,,,,,,684,,,684',
'684,684,,,684,684,680,680,680,,680,,,,680,680,,,,680,,680,680,680,680',
'680,680,680,,,,,,680,680,680,680,680,680,680,,,680,,,,,,,680,,,680,680',
'680,680,680,680,680,680,,680,680,680,,680,680,,680,680,680,,,,,,,,,',
',,,,,,,,,,680,,,680,,,680,680,,,680,,,,,,680,,,,,,,,680,,,,,680,680',
'680,680,680,680,,,,680,680,,,,,,,680,,,680,680,680,59,,680,680,,,,59',
'59,59,,,59,59,59,949,59,949,949,949,949,949,,,,,59,59,59,,,949,,,,,59',
'59,,59,59,59,59,59,,,,,,,,,,949,949,,,,,,,,949,949,949,949,,59,59,59',
'59,59,59,59,59,59,59,59,59,59,59,,,59,59,59,,,59,,,59,,,59,59,,59,949',
'59,,59,,59,59,59,59,59,59,59,,59,,59,,,,,,,,,,,,,59,59,59,59,437,59',
',59,,,,437,437,437,,,437,437,437,926,437,926,926,926,926,926,,,,437',
'437,437,437,,,926,,,,,437,437,,437,437,437,437,437,,,,,,,,,,926,,,,',
',,,,,,926,926,,437,437,437,437,437,437,437,437,437,437,437,437,437,437',
',,437,437,437,,,437,,,437,,,437,437,,437,926,437,,437,,437,437,437,437',
'437,437,437,,437,437,437,,,,,,,,,,,,,437,437,437,437,438,437,,437,,',
',438,438,438,,,438,438,438,924,438,924,924,924,924,924,,,,438,438,438',
'438,,,924,,,,,438,438,,438,438,438,438,438,,,,,,,,,,924,,,,,,,,,,,924',
'924,,438,438,438,438,438,438,438,438,438,438,438,438,438,438,,,438,438',
'438,,,438,,,438,,,438,438,,438,924,438,,438,,438,438,438,438,438,438',
'438,,438,438,438,,,,,,,,,,,,,438,438,438,438,,438,,438,91,91,91,91,91',
'91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,,,,91,91,91',
'91,91,91,91,91,91,91,,,,,,91,91,91,91,91,91,91,91,91,91,91,91,,91,,',
',,,,91,91,,91,91,91,91,91,91,91,,,91,91,,,,91,91,91,91,,,,,,,,,,,,,',
'91,91,,91,91,91,91,91,91,91,91,91,91,91,,,91,,,,,,,,,,,,,,,,,,,,91,762',
'762,762,762,762,762,762,762,762,762,762,762,762,762,762,762,762,762',
'762,762,762,762,762,762,,,,762,762,762,762,762,762,762,762,762,762,',
',,,,762,762,762,762,762,762,762,762,762,,,762,,,,,,,,,762,762,,762,762',
'762,762,762,762,762,,,762,762,,,,762,762,762,762,,,,,,,,,,,,,,762,762',
',762,762,762,762,762,762,762,762,762,762,762,,,762,,,,,,,,,,,,,,,,,',
',,762,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12',
'12,12,12,,,,12,12,12,12,12,12,12,12,12,12,,,,,,12,12,12,12,12,12,12',
'12,12,,,12,,,,,,,,,12,12,,12,12,12,12,12,12,12,,,12,12,,,,12,12,12,12',
',,,,,,,,,,,,,12,12,,12,12,12,12,12,12,12,12,12,12,12,,,12,12,,,,,,,',
',,12,,,,,,,,,12,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74',
'74,74,74,74,74,74,,,,74,74,74,74,74,74,74,74,74,74,,,,,,74,74,74,74',
'74,74,74,74,74,74,74,74,,74,,,,,,,74,74,,74,74,74,74,74,74,74,,,74,74',
',,,74,74,74,74,,,,,,74,,,,,,,,74,74,,74,74,74,74,74,74,74,74,74,74,74',
',,74,,,,,,,,,,,,,,,,,,,,74,407,407,407,407,407,407,407,407,407,407,407',
'407,407,407,407,407,407,407,407,407,407,407,407,407,,,,407,407,407,407',
'407,407,407,407,407,407,,,,,,407,407,407,407,407,407,407,407,407,,,407',
',,,,,,,,407,407,,407,407,407,407,407,407,407,,,407,407,,,,407,407,407',
'407,,,,,,,,,,,,,,407,407,,407,407,407,407,407,407,407,407,407,407,407',
',,407,407,,,,,,,,,,407,,,,,,,,,407,633,633,633,633,633,633,633,633,633',
'633,633,633,633,633,633,633,633,633,633,633,633,633,633,633,,,,633,633',
'633,633,633,633,633,633,633,633,,,,,,633,633,633,633,633,633,633,633',
'633,,,633,,,,,,,,,633,633,,633,633,633,633,633,633,633,,,633,633,,,',
'633,633,633,633,,,,,,,,,,,,,,633,633,,633,633,633,633,633,633,633,633',
'633,633,633,,,633,633,,,,,,,,,,633,,,,,,,,,633,11,11,11,11,11,11,11',
'11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,,,,11,11,11,11,11',
'11,11,11,11,11,,,,,,11,11,11,11,11,11,11,11,11,11,,11,,,,,,,,,11,11',
',11,11,11,11,11,11,11,,,11,11,,,,11,11,11,11,,,,,,,,,,,,,,11,11,,11',
'11,11,11,11,11,11,11,11,11,11,,,11,11,,,,428,,,,,,11,428,428,428,,,428',
'428,428,11,428,,,,,,,,,428,428,428,,,,,,,,,428,428,,428,428,428,428',
'428,,,,,,,,,,,,,,,,,,,,,,,,428,428,428,428,428,428,428,428,428,428,428',
'428,428,428,,,428,428,428,,,428,,428,428,,,428,428,,428,,428,,428,,428',
'428,428,428,428,428,428,,428,428,428,,,,,,,,,,,,486,428,428,,428,,428',
'486,486,486,,,486,486,486,922,486,922,922,922,922,922,,,,486,486,,,',
',922,,,,,486,486,,486,486,486,486,486,,,897,,897,897,897,897,897,922',
',,,,,,,,897,,922,922,,31,,,,,,,31,31,31,,486,31,31,31,,31,897,486,,',
',,486,486,,31,31,897,897,,922,,,,,31,31,,31,31,31,31,31,,486,486,,,',
',,,,,,,,,486,,,897,,486,,,31,31,31,31,31,31,31,31,31,31,31,31,31,31',
',,31,31,31,,,31,,31,31,,,31,31,,31,,31,,31,,31,31,31,31,31,31,31,,31',
',31,,,,,,,,,,,,30,31,31,,31,,31,30,30,30,,,30,30,30,714,30,714,714,714',
'714,714,,,,30,30,30,,,,714,,,,,30,30,,30,30,30,30,30,,,,,,,,,,714,,',
',,,,,,714,714,714,714,,30,30,30,30,30,30,30,30,30,30,30,30,30,30,,,30',
'30,30,,,30,,30,30,,,30,30,,30,714,30,,30,,30,30,30,30,30,30,30,,30,30',
'30,,,,,,214,214,,,214,,,30,30,,30,,30,214,214,,214,214,214,214,214,214',
'214,,,214,214,,,,214,214,214,214,,,,,,214,,,,,,,,214,214,,214,214,214',
'214,214,214,214,214,214,214,214,,,214,,,,,592,592,,,592,,,,,,,,,592',
'592,214,592,592,592,592,592,592,592,,,592,592,,,,592,592,592,592,,,',
',,592,,,,,,,,592,592,,592,592,592,592,592,592,592,592,592,592,592,,',
'592,,,,,593,593,,,593,,,,,,,,,593,593,592,593,593,593,593,593,593,593',
',,593,593,,,,593,593,593,593,,,,,,593,,,,,,,,593,593,,593,593,593,593',
'593,593,593,593,593,593,593,,920,593,920,920,920,920,920,,,,,,,,,,920',
',,,,593,,,,,,,,,1018,,1018,1018,1018,1018,1018,,920,522,522,,,522,,',
'1018,920,920,920,920,,522,522,,522,522,522,522,522,522,522,,,522,522',
',,1018,522,522,522,522,,,,,,522,1018,1018,,,920,,,522,522,,522,522,522',
'522,522,522,522,522,522,522,522,,,522,,,,,521,521,,,521,,1018,,,,,,',
'521,521,522,521,521,521,521,521,521,521,,,521,521,,,,521,521,521,521',
',,,,,521,,,,,,,,521,521,,521,521,521,521,521,521,521,521,521,521,521',
',,521,,,,,213,213,,,213,,,,,,,,,213,213,521,213,213,213,213,213,213',
'213,,,213,213,,,,213,213,213,213,,,,,,213,,,,,,,,213,213,,213,213,213',
'213,213,213,213,213,213,213,213,,664,213,664,664,664,664,664,,,,,,,',
',,664,,,,,213,,,,,,,,,,,,,,,,,664,453,453,,,453,,,,664,664,664,664,',
'453,453,,453,453,453,453,453,453,453,,,453,453,,,,453,453,453,453,,',
'664,,,453,,,,,664,,,453,453,,453,453,453,453,453,453,453,453,453,453',
'453,,605,453,605,605,605,605,605,895,,895,895,895,895,895,,,605,,,,',
'453,,895,892,,892,892,892,892,892,,,,,,,,605,605,892,,,,,895,,605,605',
'605,605,,,,895,895,895,895,,,,,892,,1005,,1005,1005,1005,1005,1005,892',
'892,892,892,,,,452,452,1005,,452,605,,,,,,,895,452,452,,452,452,452',
'452,452,452,452,,1005,452,452,,,892,452,452,452,452,,1005,1005,,,452',
',,,,,,,452,452,,452,452,452,452,452,452,452,452,452,452,452,,760,452',
'760,760,760,760,760,1005,,,,,,,,,760,,,,,452,,,,,,,,,1003,,1003,1003',
'1003,1003,1003,,760,1016,1016,,,1016,,,1003,760,760,760,760,,1016,1016',
',1016,1016,1016,1016,1016,1016,1016,,,1016,1016,,,1003,1016,1016,1016',
'1016,,,,,,1016,1003,1003,,,760,,,1016,1016,,1016,1016,1016,1016,1016',
'1016,1016,1016,1016,1016,1016,,,1016,,,,,1015,1015,,,1015,,1003,,,,',
',,1015,1015,1016,1015,1015,1015,1015,1015,1015,1015,,,1015,1015,,,,1015',
'1015,1015,1015,,,,,,1015,,,,,,,,1015,1015,,1015,1015,1015,1015,1015',
'1015,1015,1015,1015,1015,1015,,,1015,,,,,263,263,,,263,,,,,,,,,263,263',
'1015,263,263,263,263,263,263,263,,,263,263,,,,263,263,263,263,,,,,,',
',,,,,,,263,263,,263,263,263,263,263,263,263,263,263,263,263,,1001,263',
'1001,1001,1001,1001,1001,999,,999,999,999,999,999,,,1001,,,,,263,,999',
'550,,550,550,550,550,550,1049,,1049,1049,1049,1049,1049,1001,,550,,',
',,999,,1049,,1001,1001,,,,999,999,999,999,,,,,550,,,,,,,1049,,550,550',
'550,550,,,,966,966,1049,1049,966,1001,,,,,,,999,966,966,,966,966,966',
'966,966,966,966,,,966,966,,,550,966,966,966,966,,,1049,,,966,,,,,,,',
'966,966,,966,966,966,966,966,966,966,966,966,966,966,,718,966,718,718',
'718,718,718,,,750,750,,,750,,,718,,,,,966,750,750,,750,750,750,750,750',
'750,750,,,750,750,,,718,750,750,750,750,,,,,,750,718,718,,,,,,750,750',
',750,750,750,750,750,750,750,750,750,750,750,,,750,,,,,751,751,,,751',
',718,,,,,,,751,751,750,751,751,751,751,751,751,751,,,751,751,,,,751',
'751,751,751,,,,,,751,,,,,,,,751,751,,751,751,751,751,751,751,751,751',
'751,751,751,,716,751,716,716,716,716,716,,,,,,,,,,716,,,,,751,,,,,,',
',,,,,,,,,,716,532,532,,,532,,,,716,716,716,716,,532,532,,532,532,532',
'532,532,532,532,,,532,532,,,,532,532,532,532,,,,,,532,,,,,716,,,532',
'532,,532,532,532,532,532,532,532,532,532,532,532,,,532,,,,,531,531,',
',531,,,,,,,,,531,531,532,531,531,531,531,531,531,531,,,531,531,,,,531',
'531,531,531,,,,,,531,,,,,,,,531,531,,531,531,531,531,531,531,531,531',
'531,531,531,,,531,,,,,,,,,,,,,,,,,,,,531' ]
        racc_action_check = arr = ::Array.new(26475, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,   804,  1767,  1060,   nil,   553,   nil,   nil, 12429,  1470,
   nil, 24537, 24005,  1229,   nil,  1181,  1216,   390,   377,  1157,
   866,   nil,   -69,  9069,  2895,  1190,   nil,   454,   nil,     2,
 24973, 24848,  9629,  9769,  9909,   nil,  1908, 10189, 10329,   nil,
  1086,    96,   376,  1140,   161, 11029, 11169, 15509,  1064,   693,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil, 23347,
   nil,   -74, 11449,   nil,   -14,   nil, 11589, 11729,   nil,   nil,
 11869, 12009,  1069,   nil, 24138,   nil,   nil,   nil,   nil,   nil,
   -65,   nil,   nil,   nil,   nil,   nil,   nil,  1019,  1014,   995,
   988, 23739,   nil,   nil,   nil,   nil,   nil,   nil,   646,   nil,
   nil,   514,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil, 12569,   nil,   nil,   nil,   nil, 12709,
 12849, 12989, 13129, 13269,   958,   nil,   519,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   925,   nil,  3036,
 13969, 14109, 14249, 25414, 25041,   nil, 14669, 14809, 14949, 15089,
 15229, 15369,   nil,   nil,  1203,   126,   127,   956,   244,   860,
   897,   nil, 16489,  3318,   887, 16769, 16909, 17049, 17189, 17329,
 17469, 17609, 17749, 17889, 18029, 18169, 18309, 18449, 18589, 18729,
 18869, 19009, 19149, 19289, 19429, 19569, 19709, 19849, 19989, 20129,
 20269,   nil,   nil, 25892,   nil,   nil,   870, 20409,   nil,   873,
   nil,   nil,   nil, 20689,   nil,   nil, 20829,   nil,  1344,   nil,
   833,   832,   nil, 21389,   872, 21529,   nil, 21669,   nil,   832,
 21809,   nil,   nil,   469,   nil,  1344, 21949,   806,  3882,   808,
   838,   799, 22509,  4305,   -59,  1106,  1065,   785,   654,   nil,
   729,   682,   -19,   nil,   nil,   nil,   648,   159,   607,  5709,
   nil,   131,   645,  1062,   nil,   638,   nil,  6409,  4446,   nil,
  6549,   611,   nil,   368,   509,   600,  7249,   nil,   nil,   577,
   877,    22,    26,  7529,  7669,   537,   632,   508,    34,    42,
   957,   571,    25,   590,   nil,   nil,  8229,   nil,  8369,    12,
   393,   485,   474,   414,   551,   -56,   446,   488,   nil,   103,
   nil,   nil,   nil,   nil,   nil,   380,   nil,   314,   nil,   485,
   nil,   171,   290,   nil,   165,   414,   nil,   161,   114,   nil,
   104,   112,   nil,   243,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  4869, 24271,   nil,   nil,
   nil,   nil,   104,   nil,   nil,    61,  8649,   -96,   nil,   nil,
   921,  1226,   nil,   nil,  1222,  1213,   305,   431, 24656,   nil,
   nil,   nil,   125,     0,   -88,   nil,   nil, 23477, 23607,   nil,
  2472,   nil,   -93,   nil,   nil,   780,   nil,   nil,   nil,   nil,
    52,   nil, 25655, 25515, 22649,   -43, 22229, 20969, 20549,  3741,
  4446,   476,   689,   176,   180,   182,   198,  5289,  5149,  3342,
  4164,  3318,  3882,  5009,  3600,  3459,  4023,  4305,  4587,  4728,
  3153,   -43,  4869,  3177,  2331,   322, 24781,   nil,   nil,   nil,
   nil,   nil,   nil,   311,   292,   141,   145,   nil,   nil, 16629,
   nil,   nil, 14389,   nil, 13829,   nil,   119,   nil, 13689,   nil,
   nil, 13549,  1485,   186,   213,   nil,   nil,   243, 13409,   277,
 12149, 25346, 25278,   586,   337,   nil, 11309,   315,   nil, 10609,
 10469, 26340, 26272,  3036, 10049,   439,   463,   510,   nil,   nil,
  9489,   nil,   nil,  8929,   nil,   367,   nil,   288,   394,    25,
 25978,   nil,   367,   369,   nil,   400,   404,   433,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   421,   646,   nil,   nil,
  8789,   nil,   nil,   nil,   525,   nil,   nil,   nil,   545,   nil,
   nil,   553,  4728,   598,   nil,  4587,    60,    29,   600,   615,
   nil,  8089, 25109, 25177,     7,   nil,   220,   258,   129,   nil,
  1098,   nil,     9,  7949,   nil, 25577,   nil,  7809,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   186,
   nil,   nil,   151,   nil,   nil,   nil,   522,   nil,   nil,   539,
   nil,   568,   nil, 24404,   nil,   562,  7389,  7109,   168,   603,
  6969,  6829,  6689,  6269,   612,   nil,   nil,   nil,  6129,  5989,
   630,   nil,  5849,  5569,   nil,   166,   226,   250,   382,   620,
  1062,   640,   nil,   nil, 25476,   nil,   nil,   743,   -10,   -63,
   nil,   nil,   nil,   nil,   651,   nil,   706,  5429,   nil,   nil,
 23209,   nil,  1329,    46, 23069,   697,   nil,   710,   153,    30,
   753,   290,   780,   781,   779, 22929,  1203,   844,    11,   904,
 22789,   nil,   793,   432,   nil,   nil,   nil,  4164,  4023,   807,
   304,   nil,   nil,   792, 24937,   nil, 26233,   nil, 26094,   nil,
 22369,   nil,   514,   nil,   806,   388,   819,   nil,   nil,   nil,
   nil,   193,   nil,   933,   nil,   nil,   nil,   nil,   939,   nil,
 22089,   831,    21,    -1,    40,    86, 21249,   nil,  1134,   nil,
 26103, 26171, 21109,   nil,   nil,   nil,   418,   614,  3741,  3600,
 25717,   154, 23872,    59,   763,  3459,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   852, 16349,  1485, 16209,   nil,   879,   nil,
  1626,   nil,  1767,   nil,   nil,  1908,   nil,  2049,   nil,  2190,
 16069, 15929, 15789, 15649,   161,  5009,   883,   887,   nil,   892,
   904,   905,   nil,   935,   921,   918,   909, 14529,   nil,   nil,
  3177,   nil,   nil,   nil,  2895,  2754,   nil,   nil,   nil,   926,
   321,   nil,   nil,  1061,   nil,  2613,   945,   987,   nil,   nil,
   nil,   nil,   963,  1077,   962,   960,   nil,   nil,   nil,   961,
   969,   nil,   970,   972,   nil,   973,   nil,   nil,   977,   707,
   975,   653,   nil,  1099,   nil, 12289,  1113,   780,  2472,   nil,
    16,    41,    56,   422,   571,   nil,  1031,  2331,  5289,   nil,
   736,  1153,  1165,  1049,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,  1072,  1059,   nil,  2613,  5149, 10889,  2754,   239,
   nil,   nil, 25601,   nil,   nil, 25584,   nil, 24776,   nil,   nil,
  1084,  1189, 10749,   965,  1141,  1192,  2190,  1097,  1202,   nil,
  2049,   nil,   nil,    -8,  9349,   nil,   nil,   nil,   nil,   nil,
 25239,   nil, 24745,   nil, 23571,   nil, 23441,   nil,   nil,   nil,
   nil,   375,   639,  1087,   nil,    18,   nil,  1218,  1220,  9209,
  1626,   nil,   nil,  1221,   749,   nil,   nil,   nil,   nil, 23311,
   nil,  1102,   nil,   nil,  1110,  1116,  1120,  1130,   nil,  1134,
   nil,   259,   nil,   nil,   nil,   322, 26032,   nil,   nil,  1153,
   nil,   nil,   nil,  1485,   852,   921,   924,  1229,   993,   nil,
  1156,  1161,  1162,  1164,  1165,  3341,  1169,  3253,  1344,   nil,
   nil,   nil,     4,  1203,   nil,   nil,  1062,   921,   nil, 25961,
   nil, 25954,   nil, 25747,   nil, 25641,   nil,   nil,   nil,   712,
  1225,  1226,   nil,  1310,  8509, 25824, 25756,   783, 25269,   nil,
   nil,   nil,   nil,  3304,  1196,   793,   nil,   nil,   nil,  1317,
  1320,  1322,  1203,  1204,  1205,  1207,   nil,   nil,  1211,    20,
    -7,    -9,   816,   508,   647,   nil,   nil,   nil,   nil, 25985,
   nil,   nil,   nil,   nil,   -11,   nil,  1024,   nil ]

racc_action_default = [
    -1,  -627,  -626,  -627,    -2,  -613,    -4,    -5,  -627,    -8,
    -9,  -627,  -627,  -627,   -29,  -627,  -627,  -627,  -280,  -627,
   -40,   -43,  -615,  -627,   -48,   -50,   -51,   -52,   -57,  -257,
  -257,  -257,  -294,  -333,  -334,   -69,  -626,   -73,   -81,   -83,
  -627,  -516,  -517,  -627,  -627,  -627,  -627,  -627,  -615,  -238,
  -271,  -272,  -273,  -274,  -275,  -276,  -277,  -278,  -279,  -602,
  -282,  -285,  -626,  -292,  -302,  -405,  -627,  -627,  -307,  -310,
  -613,  -627,  -318,  -325,  -627,  -335,  -336,  -447,  -448,  -449,
  -450,  -451,  -452,  -626,  -455,  -626,  -626,  -626,  -626,  -626,
  -626,  -626,  -492,  -498,  -500,  -501,  -502,  -503,  -600,  -505,
  -506,  -601,  -508,  -509,  -510,  -511,  -512,  -513,  -514,  -515,
  -520,  -521,  1058,    -3,  -614,  -622,  -623,  -624,    -7,  -627,
  -627,  -627,  -627,  -627,  -627,   -17,  -627,  -112,  -113,  -114,
  -115,  -116,  -117,  -118,  -119,  -120,  -124,  -125,  -126,  -127,
  -128,  -129,  -130,  -131,  -132,  -133,  -134,  -135,  -136,  -137,
  -138,  -139,  -140,  -141,  -142,  -143,  -144,  -145,  -146,  -147,
  -148,  -149,  -150,  -151,  -152,  -153,  -154,  -155,  -156,  -157,
  -158,  -159,  -160,  -161,  -162,  -163,  -164,  -165,  -166,  -167,
  -168,  -169,  -170,  -171,  -172,  -173,  -174,  -175,  -176,  -177,
  -178,  -179,  -180,  -181,  -182,  -183,  -184,  -185,  -186,  -187,
  -188,  -189,  -190,  -191,  -192,  -193,  -194,   -22,  -121,  -626,
  -627,  -627,  -626,  -627,  -627,  -612,  -627,  -627,  -627,  -627,
  -627,  -615,  -616,   -47,  -627,  -516,  -517,  -627,  -280,  -627,
  -627,  -230,  -627,  -626,  -627,  -627,  -627,  -627,  -627,  -627,
  -627,  -627,  -627,  -627,  -627,  -627,  -627,  -627,  -627,  -627,
  -627,  -627,  -627,  -627,  -627,  -627,  -627,  -627,  -627,  -627,
  -627,  -411,  -414,  -627,  -610,  -611,   -58,  -627,  -301,  -627,
  -428,  -431,   -64,  -626,  -425,   -65,  -615,   -66,  -239,  -252,
  -626,  -626,  -256,  -627,  -262,  -627,  -626,  -492,  -593,  -615,
  -627,   -67,   -68,  -613,   -13,   -14,  -627,   -71,  -626,  -615,
  -627,   -74,   -77,  -626,   -89,   -90,  -627,  -627,   -97,  -294,
  -297,  -615,  -418,  -333,  -334,  -337,  -426,  -627,   -79,  -627,
   -85,  -290,  -499,  -627,  -215,  -216,  -231,  -627,  -626,  -284,
  -627,  -627,  -240,  -619,  -619,  -627,  -626,  -303,  -304,  -548,
   -49,  -627,  -627,  -627,  -627,  -613,  -627,  -614,  -516,  -517,
  -627,  -627,  -280,  -627,  -358,  -359,  -627,  -321,  -627,  -112,
  -113,  -154,  -155,  -156,  -172,  -177,  -184,  -187,  -328,  -627,
  -516,  -517,  -588,  -589,  -453,  -627,  -476,  -627,  -478,  -627,
  -480,  -627,  -627,  -460,  -627,  -627,  -466,  -627,  -627,  -472,
  -627,  -627,  -474,  -627,  -491,  -493,  -494,  -495,  -496,    -6,
  -625,   -23,   -24,   -25,   -26,   -27,  -626,  -627,   -19,   -20,
   -21,  -122,  -627,   -30,   -39,  -267,  -627,  -627,  -266,   -31,
  -197,  -615,  -247,  -248,  -626,  -626,  -603,  -604,  -257,  -423,
  -605,  -606,  -604,  -603,  -257,  -422,  -424,  -605,  -606,   -37,
  -205,   -38,  -627,   -41,   -42,  -195,  -262,   -44,   -45,   -46,
  -615,  -300,  -627,  -627,  -626,  -290,  -627,  -627,  -627,  -206,
  -207,  -208,  -209,  -210,  -211,  -212,  -213,  -217,  -218,  -219,
  -220,  -221,  -222,  -223,  -224,  -225,  -226,  -227,  -228,  -229,
  -232,  -233,  -234,  -235,  -615,  -626,  -257,  -603,  -604,   -54,
   -59,  -258,  -419,  -626,  -626,  -615,  -615,  -296,  -253,  -627,
  -261,  -254,  -627,  -259,  -627,  -263,  -627,  -598,  -627,  -599,
   -12,  -614,   -16,  -615,   -70,  -288,   -86,   -75,  -627,  -615,
  -626,  -627,  -627,   -96,  -627,  -499,  -627,   -82,   -87,  -627,
  -627,  -627,  -627,  -236,  -627,  -439,  -627,  -286,  -617,  -241,
  -621,  -620,  -243,  -621,  -291,  -627,  -591,  -619,  -627,  -627,
  -548,  -408,  -587,  -587,  -531,  -533,  -533,  -533,  -547,  -549,
  -550,  -551,  -552,  -553,  -554,  -555,  -556,  -627,  -558,  -560,
  -562,  -567,  -569,  -570,  -572,  -577,  -579,  -580,  -582,  -583,
  -584,  -627,  -626,  -349,  -350,  -626,  -627,  -627,  -627,  -627,
  -434,  -626,  -627,  -627,  -290,  -315,  -107,  -108,  -627,  -110,
  -627,  -280,  -627,  -627,  -326,  -548,  -330,  -627,  -454,  -477,
  -482,  -483,  -485,  -456,  -479,  -457,  -481,  -458,  -459,  -627,
  -462,  -464,  -627,  -465,  -468,  -469,  -627,  -470,  -471,  -627,
  -497,  -627,   -18,  -627,   -28,  -270,  -627,  -627,  -427,  -627,
  -249,  -251,  -627,  -627,   -60,  -245,  -246,  -420,  -627,  -627,
   -62,  -421,  -627,  -627,  -299,  -603,  -604,  -603,  -604,  -615,
  -195,  -627,  -394,  -395,  -615,  -397,  -412,   -53,  -415,  -626,
  -429,  -432,  -244,  -295,  -626,  -260,  -264,  -627,  -594,  -595,
  -627,  -596,   -15,   -72,  -627,   -78,   -84,  -615,  -603,  -604,
  -626,   -93,   -95,  -627,   -80,  -627,  -204,  -214,  -615,  -626,
  -626,  -283,  -615,  -619,  -293,  -592,  -406,  -626,  -626,  -615,
  -627,  -529,  -530,  -627,  -627,  -540,  -627,  -543,  -627,  -545,
  -627,  -360,  -627,  -362,  -364,  -371,  -615,  -561,  -571,  -581,
  -585,  -626,  -351,  -626,  -308,  -352,  -353,  -311,  -627,  -314,
  -627,  -615,  -603,  -604,  -607,  -289,  -627,  -107,  -108,  -109,
  -627,  -627,  -626,  -319,  -522,  -523,  -627,  -322,  -626,  -626,
  -548,  -627,  -627,  -615,  -627,  -626,  -461,  -463,  -467,  -473,
  -475,   -10,  -123,  -268,  -627,  -198,  -627,  -618,  -626,   -33,
  -200,   -34,  -201,   -61,   -35,  -203,   -36,  -202,   -63,  -196,
  -627,  -627,  -627,  -627,  -427,  -627,  -587,  -587,  -376,  -626,
  -626,  -626,  -393,  -627,  -615,  -399,  -556,  -564,  -565,  -575,
  -626,  -417,  -416,   -55,  -626,  -626,  -255,  -265,  -597,   -76,
   -91,   -88,  -298,  -626,  -356,  -626,  -440,  -626,  -441,  -442,
  -287,  -242,  -627,  -627,  -615,  -587,  -568,  -586,  -532,  -533,
  -533,  -559,  -533,  -533,  -578,  -533,  -556,  -573,  -615,  -627,
  -369,  -627,  -557,  -627,  -354,  -627,  -627,  -626,  -626,  -313,
  -627,  -427,  -627,  -107,  -108,  -111,  -615,  -626,  -627,  -525,
  -627,  -627,  -627,  -615,  -527,  -331,  -590,  -484,  -487,  -488,
  -489,  -490,  -627,  -269,   -32,  -199,  -250,  -627,  -237,  -627,
  -374,  -375,  -384,  -378,  -386,  -627,  -389,  -627,  -391,  -396,
  -627,  -627,  -627,  -563,  -627,  -627,  -626,  -627,  -627,   -11,
  -626,  -446,  -357,  -627,  -627,  -444,  -409,  -410,  -407,  -528,
  -627,  -536,  -627,  -538,  -627,  -541,  -627,  -544,  -546,  -361,
  -363,  -367,  -627,  -372,  -305,  -627,  -306,  -627,  -627,  -627,
  -626,  -316,  -427,  -627,  -627,  -323,  -327,  -329,  -526,  -548,
  -486,  -587,  -566,  -377,  -626,  -626,  -626,  -626,  -576,  -626,
  -398,  -615,  -401,  -403,  -404,  -574,  -627,  -290,  -413,  -627,
  -430,  -433,  -445,  -626,   -98,   -99,  -627,  -627,  -106,  -443,
  -533,  -533,  -533,  -533,  -365,  -627,  -370,  -627,  -626,  -309,
  -312,  -264,  -626,  -626,  -320,  -524,  -626,  -626,  -373,  -627,
  -381,  -627,  -383,  -627,  -387,  -627,  -390,  -392,  -400,  -627,
  -289,  -607,   -56,  -439,  -626,  -627,  -627,  -105,  -627,  -534,
  -537,  -539,  -542,  -627,  -368,  -626,  -435,  -436,  -437,  -627,
  -627,  -627,  -626,  -626,  -626,  -626,  -402,  -438,  -615,  -603,
  -604,  -607,  -104,  -533,  -366,  -355,  -317,  -324,  -332,  -627,
  -379,  -382,  -385,  -388,  -427,  -535,  -626,  -380 ]

clist = [
'6,536,213,220,428,434,368,301,315,315,337,262,421,589,135,135,501,130',
'130,566,133,133,444,395,125,208,117,699,551,327,418,279,279,279,558',
'678,759,441,114,341,342,675,315,345,675,263,4,340,340,582,585,340,113',
'800,486,539,542,638,9,375,332,933,853,844,9,274,322,266,272,275,726',
'118,964,495,823,749,678,803,318,962,130,376,958,378,380,383,386,389',
'392,378,930,117,401,402,403,404,666,130,490,993,340,340,340,340,670',
'671,527,299,856,841,281,281,281,734,737,377,356,346,711,712,619,393',
'834,622,280,280,280,602,867,604,603,297,870,614,996,616,358,758,620',
'605,334,620,986,762,223,949,329,633,802,614,906,277,291,292,333,804',
'669,961,549,706,501,339,407,414,485,810,493,814,494,815,9,1026,740,827',
'678,913,374,399,379,405,964,382,675,675,1,385,958,1036,388,391,877,764',
'765,394,868,1024,355,207,839,447,448,449,450,909,124,836,952,607,338',
'452,422,279,2,545,372,353,753,900,668,335,438,369,715,717,719,848,328',
'865,930,17,566,330,702,1044,336,17,343,857,344,709,858,746,,428,434',
'558,,,429,,224,,,,659,738,,,,224,224,224,506,17,306,306,279,844,,705',
'508,422,279,315,,279,,,500,500,813,954,,,376,566,,841,,528,315,521,524',
'224,224,794,,224,350,,558,,417,801,492,685,451,,531,417,,537,690,694',
'117,,586,587,,721,687,841,690,820,340,340,511,315,,315,16,413,419,,546',
'592,16,439,443,525,510,17,517,,806,281,224,224,224,224,17,274,512,840',
'281,842,1045,,,280,,497,890,891,16,,117,1027,280,513,,,,,519,767,,861',
'767,,997,,,690,514,,491,606,,941,300,741,588,297,566,496,566,,297,,841',
'919,639,,6,,,,,816,135,,,130,547,,133,,,678,632,,500,500,,831,645,,675',
',,871,872,,,,17,224,224,224,566,,16,224,224,224,224,224,224,873,631',
'16,422,279,,558,,444,,438,17,,9,646,,661,644,,,651,,819,650,,721,,783',
'850,807,,,,788,662,645,,,429,528,315,,662,662,,224,,528,315,,,224,,942',
'224,,1037,921,923,,925,927,,928,816,,698,,998,422,279,828,646,,17,667',
'17,,798,438,306,17,955,,,956,654,,16,438,,943,,690,,,,306,,,,,,866,',
',17,429,224,,980,,16,,412,,,429,682,940,,224,224,806,837,,806,837,674',
',,672,673,,600,757,600,,300,763,422,279,,,,,,,,683,438,566,721,,721',
'686,,,735,735,,,,,,812,,,,703,,,973,,754,16,,16,429,,566,,16,,17,,,135',
',1032,130,639,,133,988,558,805,772,1019,1020,1021,1022,,300,811,528',
'315,16,300,,1028,,797,,,,821,315,662,639,1030,1031,,500,,1054,,,,,806',
',224,,984,721,,,,645,,805,,,,875,,,824,829,,,,,807,,,807,835,,807,1055',
'807,,,,,,,778,862,,,639,,,646,,340,651,824,,824,,,16,,,721,17,721,,',
',,,306,,224,,,422,279,837,306,,798,438,,798,,798,224,,779,781,,,,130',
'784,786,,,443,,721,500,869,315,,,,874,822,,805,429,830,,,,,417,,,,,893',
'893,893,,,,,,,690,,,17,,852,17,807,1038,807,,807,224,807,,911,,,,915',
',,935,,224,,860,,224,,340,,,16,,944,,,,,,639,876,340,29,,,,,,29,,,,',
',798,807,798,,798,,798,224,224,29,,315,,224,224,,,224,29,29,29,735,29',
'315,951,,,797,,945,797,,797,,,884,,,,,,,,,,,,,16,306,798,16,29,29,,',
'29,918,,,306,,799,,,,,,,,,929,17,17,731,,,733,,,1008,,,,,,,,,,893,893',
'893,893,,893,948,,,1015,29,,,995,,29,29,29,29,29,438,224,,,843,,845',
'224,,,,,,17,17,,,,824,,17,,,,797,,797,,797,,797,224,,,,,,,,,422,279',
',,,,,639,,,438,824,,,,,,,893,893,893,893,903,16,16,17,41,,,17,17,,41',
',797,894,896,898,429,,17,,893,,,29,29,29,29,832,833,,29,29,29,29,29',
'29,,,41,304,304,,,,,,,29,224,,17,17,16,16,,,,,,16,17,224,,,,,,,,,,,',
'348,,,370,,,,,29,,,,882,,29,,,29,,,,,965,,,,17,,,,17,16,,,976,16,16',
'29,,29,,,,41,29,,16,,957,,959,,41,,,,,905,,,17,907,908,,,,,,,29,,29',
'912,981,,982,,983,16,16,,,,,29,29,,,16,,,,,17,,1000,1002,1004,1006,',
'1007,,,,937,938,,,17,,,,,17,,,17,17,,,,,,,42,,,16,,,42,16,,,224,,,,41',
',,,,19,,,,29,,19,,,1033,969,1034,,1035,972,42,305,305,16,41,,,,,,,,',
'1043,,1050,1051,1052,1053,19,,,,,,,,,,992,,,,,415,349,16,29,371,1057',
',446,,,1056,,,,,,,16,,,354,,16,,,16,16,,1013,,,,,41,,41,,,,304,41,,',
'1025,42,,,,1029,,,,,42,,,304,,,,29,,,19,,41,,,,29,,,19,503,,505,,507',
',,509,,,29,,,,,,,,,,370,,370,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,548,,,,,29',
',,29,,,,,42,29,,,41,,,,,,,,,29,,,,29,,19,,,,,42,,,442,,,,,,,,,,,,,,',
',19,,,,,,,,,29,29,,,,,29,29,,,29,,18,,,635,,,18,,,,,,,,,,,,,,,,,42,',
'42,,,,305,42,,,,18,308,308,,,,,,19,,19,41,305,,,19,,,304,29,29,42,,',
',,304,,,,,,,,,352,,,,,19,,,,,,,,,371,,371,676,,,548,,679,29,,,681,,',
'29,,,,,,29,29,,,,,,29,18,,,,41,,,41,,18,29,,,,,676,,,548,,,42,,,,,,',
',,,,,,,,,,,,19,,,,29,727,,,29,29,,,,,,,,,,29,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,29,,29,29,,,18,,,,,,29,29,,,,304,,,,,773,,,,676,548,304,,18,,',
',,,,42,,,41,41,,,305,,,,,,,29,305,,,29,19,,,,,,,817,,,818,,,,,,,,,,',
',,,,,,,,29,826,,,,,41,41,18,,18,,,41,308,18,,,,,,847,,42,,,42,,,,,308',
',29,,,,,,,18,446,19,,,19,,,29,,,,,29,,370,29,29,41,,,,41,41,,,,,601',
',601,,,41,29,883,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,41,41,,,,,,442,,,41,,',
'18,,,,,,,305,,,,,,,,,,,305,,,,,,,,,,,,42,42,370,,,,41,,,,41,,,,974,',
',,,19,19,,,,,,,,,,,,,,,,,,,548,41,,,,,,,,,,,42,42,,,,,,42,,,,,,,,,,',
',19,19,,41,,18,,19,,,,,308,,,,,,41,,308,,991,41,,,41,41,,,371,,,42,',
',,42,42,,,,,,,,,,42,,,,19,,,,19,19,,,,,231,,,,,19,,,,278,278,278,,,18',
',,18,42,42,,,324,325,326,,,,42,,,,,,,,,19,19,278,,,,,,,,19,,,,,,,,,',
',,,,,,371,,,,42,,,,42,,,,975,,,,,,,,,,,19,,,,19,,,,979,,,,,,,42,,,,',
',,,,,,,,,,308,,,,19,,,,,,,308,,,,,,,42,,,,,18,18,,,,,,,,,42,,,,19,42',
',,42,42,,,,,,,,,,19,,,,,19,,,19,19,,,,,,,,,,278,420,278,18,18,,440,445',
',881,18,,,,,,,,,,,,231,,,459,460,461,462,463,464,465,466,467,468,469',
'470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,,601,,,18',
',278,,18,18,,,278,,,278,,,,18,,,278,,278,,278,,,278,,,,,,,,,,,,,,,,',
',,,,,18,18,,,,,,,,,18,,,,,533,,,,,,,,,278,,,,,,,,,,,,,,,,,,,,,601,,',
',18,,,,18,,,,978,,,,,,,,,,,,,,,,,,,,,,,,,,18,,,,,,,,,,,,,,,,,,,,,278',
',,,,,,,,,,,18,,,,,,,,,,,,,,,18,,,,,18,,,18,18,,278,,440,660,420,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,278,,,278,,278,,,,278,,,,,,,,,,',
',278,,,,,,,,,696,697,,,,,,,,,,278,,,278,,,,,,,,,,,,,,,,,,,,,,,,,,,278',
',,,,,,,,,,,,,,,,,,,,278,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'278,775,,,278,278,780,782,,,,,785,787,,,660,789,,,,,,,,,,,,,,,,,,,,',
',,,278,,,278,,,,,,,,,,,,,,,,,,,,278,,,,,,,,,,,,,,,,,,,,278,,,,,,,,,',
',,,,,,,,,,278,,,,,,,,,,,,278,,,,,,,,,,,,,,,,,,,,,,278,,885,,,,,,,,,',
',,,,780,782,787,785,,888,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,278,885,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,278,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,278' ]
        racc_goto_table = arr = ::Array.new(3060, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'6,10,27,34,40,40,60,53,68,68,89,155,25,95,65,65,76,61,61,189,64,64,20',
'60,17,17,98,13,154,34,30,36,36,36,185,200,99,30,8,19,19,77,68,19,77',
'39,2,32,32,92,92,32,5,144,40,72,72,26,9,171,6,135,93,195,9,74,67,41',
'41,41,134,7,150,25,14,58,200,147,54,149,61,6,196,6,6,6,6,6,6,6,132,98',
'19,19,19,19,43,61,42,110,32,32,32,32,43,43,55,50,14,190,73,73,73,94',
'94,172,111,5,139,139,175,172,147,175,71,71,71,59,112,59,113,49,114,176',
'115,176,116,117,176,118,73,176,135,119,22,120,51,66,136,176,46,48,48',
'48,71,142,45,148,151,152,76,153,33,31,156,157,160,161,162,163,9,164',
'165,166,200,167,170,7,173,9,150,174,77,77,1,177,196,149,178,179,180',
'181,182,183,184,135,21,18,188,32,32,32,32,15,11,192,193,199,91,27,6',
'36,3,88,87,96,97,147,75,70,61,100,187,187,187,134,101,58,132,24,189',
'102,103,135,104,24,105,106,107,154,108,109,,40,40,185,,,74,,24,,,,25',
'95,,,,24,24,24,171,24,24,24,36,195,,72,34,6,36,68,,36,,,6,6,43,144,',
',6,189,,190,,53,68,27,34,24,24,26,,24,24,,185,,71,145,74,55,51,,27,71',
',32,40,55,98,,19,19,,133,25,190,40,26,32,32,8,68,,68,23,22,22,,6,27',
'23,22,22,67,5,24,54,,189,73,24,24,24,24,24,74,9,145,73,145,93,,,71,',
'51,139,139,23,,98,14,71,50,,,,,50,176,,26,176,,99,,,40,51,,48,39,,94',
'12,25,5,49,189,48,189,,49,,190,139,34,,6,,,,,76,65,,,61,73,,64,,,200',
'17,,6,6,,72,6,,77,,,10,10,,,,24,24,24,24,189,,23,24,24,24,24,24,24,154',
'2,23,6,36,,185,,20,,61,24,,9,74,,34,41,,,74,,55,41,,133,,42,133,191',
',,,42,6,6,,,74,53,68,,6,6,,24,,53,68,,,24,,26,24,,13,187,187,,187,187',
',187,76,,32,,139,6,36,30,74,,24,41,24,,140,61,24,24,145,,,145,51,,23',
'61,,10,,40,,,,24,,,,,,25,,,24,74,24,,145,,23,,12,,,74,9,92,,24,24,189',
'140,,189,140,73,,,51,51,,24,32,24,,12,32,6,36,,,,,,,,51,61,189,133,',
'133,51,,,98,98,,,,,,89,,,,73,,,92,,98,23,,23,74,,189,,23,,24,,,65,,145',
'61,34,,64,92,185,34,17,187,187,187,187,,12,155,53,68,23,12,,95,,138',
',,,53,68,6,34,10,10,,6,,26,,,,,189,,24,,133,133,,,,6,,34,,,,60,,,6,6',
',,,,191,,,191,138,,191,187,191,,,,,,,73,19,,,34,,,74,,32,74,6,,6,,,23',
',,133,24,133,,,,,,24,,24,,,6,36,140,24,,140,61,,140,,140,24,,22,22,',
',,61,22,22,,,22,,133,6,98,68,,,,98,51,,34,74,51,,,,,71,,,,,6,6,6,,,',
',,,40,,,24,,51,24,191,25,191,,191,24,191,,6,,,,6,,,19,,24,,71,,24,,32',
',,23,,19,,,,,,34,51,32,44,,,,,,44,,,,,,140,191,140,,140,,140,24,24,44',
',68,,24,24,,,24,44,44,44,98,44,68,138,,,138,,98,138,,138,,,22,,,,,,',
',,,,,,23,24,140,23,44,44,,,44,51,,,24,,143,,,,,,,,,51,24,24,12,,,12',
',,34,,,,,,,,,,6,6,6,6,,6,51,,,27,44,,,98,,44,44,44,44,44,61,24,,,143',
',143,24,,,,,,24,24,,,,6,,24,,,,138,,138,,138,,138,24,,,,,,,,,6,36,,',
',,,34,,,61,6,,,,,,,6,6,6,6,24,23,23,24,56,,,24,24,,56,,138,141,141,141',
'74,,24,,6,,,44,44,44,44,12,12,,44,44,44,44,44,44,,,56,56,56,,,,,,,44',
'24,,24,24,23,23,,,,,,23,24,24,,,,,,,,,,,,56,,,56,,,,,44,,,,12,,44,,',
'44,,,,,24,,,,24,,,,24,23,,,24,23,23,44,,44,,,,56,44,,23,,143,,143,,56',
',,,,12,,,24,12,12,,,,,,,44,,44,12,143,,143,,143,23,23,,,,,44,44,,,23',
',,,,24,,141,141,141,141,,141,,,,12,12,,,24,,,,,24,,,24,24,,,,,,,57,',
',23,,,57,23,,,24,,,,56,,,,,29,,,,44,,29,,,143,12,143,,143,12,57,57,57',
'23,56,,,,,,,,,143,,141,141,141,141,29,,,,,,,,,,12,,,,,69,57,23,44,57',
'141,,69,,,143,,,,,,,23,,,29,,23,,,23,23,,12,,,,,56,,56,,,,56,56,,,12',
'57,,,,12,,,,,57,,,56,,,,44,,,29,,56,,,,44,,,29,69,,69,,69,,,69,,,44',
',,,,,,,,,56,,56,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,69,,,,,44,,,44,,,,,57',
'44,,,56,,,,,,,,,44,,,,44,,29,,,,,57,,,29,,,,,,,,,,,,,,,,29,,,,,,,,,44',
'44,,,,,44,44,,,44,,28,,,69,,,28,,,,,,,,,,,,,,,,,57,,57,,,,57,57,,,,28',
'28,28,,,,,,29,,29,56,57,,,29,,,56,44,44,57,,,,,56,,,,,,,,,28,,,,,29',
',,,,,,,,57,,57,69,,,69,,69,44,,,69,,,44,,,,,,44,44,,,,,,44,28,,,,56',
',,56,,28,44,,,,,69,,,69,,,57,,,,,,,,,,,,,,,,,,,29,,,,44,69,,,44,44,',
',,,,,,,,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,44,,44,44,,,28,,,,,,44,44,,',
',56,,,,,69,,,,69,69,56,,28,,,,,,,57,,,56,56,,,57,,,,,,,44,57,,,44,29',
',,,,,,69,,,69,,,,,,,,,,,,,,,,,,,44,69,,,,,56,56,28,,28,,,56,28,28,,',
',,,69,,57,,,57,,,,,28,,44,,,,,,,28,69,29,,,29,,,44,,,,,44,,56,44,44',
'56,,,,56,56,,,,,28,,28,,,56,44,69,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,56,56',
',,,,,29,,,56,,,28,,,,,,,57,,,,,,,,,,,57,,,,,,,,,,,,57,57,56,,,,56,,',
',56,,,,56,,,,,29,29,,,,,,,,,,,,,,,,,,,69,56,,,,,,,,,,,57,57,,,,,,57',
',,,,,,,,,,,29,29,,56,,28,,29,,,,,28,,,,,,56,,28,,69,56,,,56,56,,,57',
',,57,,,,57,57,,,,,,,,,,57,,,,29,,,,29,29,,,,,35,,,,,29,,,,35,35,35,',
',28,,,28,57,57,,,35,35,35,,,,57,,,,,,,,,29,29,35,,,,,,,,29,,,,,,,,,',
',,,,,,57,,,,57,,,,57,,,,57,,,,,,,,,,,29,,,,29,,,,29,,,,,,,57,,,,,,,',
',,,,,,,28,,,,29,,,,,,,28,,,,,,,57,,,,,28,28,,,,,,,,,57,,,,29,57,,,57',
'57,,,,,,,,,,29,,,,,29,,,29,29,,,,,,,,,,35,35,35,28,28,,35,35,,28,28',
',,,,,,,,,,,35,,,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35',
'35,35,35,35,35,35,35,35,,28,,,28,,35,,28,28,,,35,,,35,,,,28,,,35,,35',
',35,,,35,,,,,,,,,,,,,,,,,,,,,,28,28,,,,,,,,,28,,,,,35,,,,,,,,,35,,,',
',,,,,,,,,,,,,,,,,28,,,,28,,,,28,,,,28,,,,,,,,,,,,,,,,,,,,,,,,,,28,,',
',,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,28,,,,,,,,,,,,,,,28,,,,,28,,,28,28,',
'35,,35,35,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,35,,35,,,',
'35,,,,,,,,,,,,35,,,,,,,,,35,35,,,,,,,,,,35,,,35,,,,,,,,,,,,,,,,,,,,',
',,,,,,35,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,35,35,,,35,35,35,35,,,,,35,35,,,35,35,,,,,,,,,,,,,,,,,,,,,,',
',35,,,35,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,',
',,,,35,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,35,,35,,,,,,,,,,,,,,35,35',
'35,35,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35' ]
        racc_goto_check = arr = ::Array.new(3060, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   184,    44,   212,   nil,    47,    -2,    63,    33,    56,
  -327,   194,   354,  -508,  -625,  -620,   nil,    13,   185,   -27,
  -195,   125,   121,   328,   227,  -200,  -364,   -15,  1500,  1248,
  -180,   -47,   -19,    37,   -19,  2045,    -1,   nil,   nil,    18,
  -209,    38,  -168,  -389,   848,  -333,  -663,   nil,   119,    95,
    71,    85,   nil,   -30,    40,  -213,  1036,  1229,  -523,  -229,
   -68,     6,   nil,   nil,     9,     3,  -264,    22,   -29,  1089,
   157,    92,  -278,    78,    35,  -268,  -265,  -458,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   140,  -123,   -54,
   nil,   143,  -292,  -669,  -473,  -333,   144,  -386,    21,  -569,
   147,   166,   170,  -305,   171,   168,  -497,   169,  -497,  -354,
  -842,    44,  -625,  -227,  -625,  -811,    63,  -467,  -229,  -463,
  -730,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,  -759,  -248,  -497,  -790,  -516,   nil,    -3,  -434,
  -137,   248,  -509,   260,  -611,  -361,   nil,  -587,  -744,  -822,
  -829,  -181,  -390,    96,  -311,   -14,   -97,  -501,   nil,   nil,
  -104,  -503,  -103,  -502,  -821,  -418,  -527,  -652,   nil,   nil,
    96,   -24,    30,    92,    94,  -262,  -244,    97,    99,    99,
  -574,  -420,  -420,   102,  -561,  -305,   nil,  -333,  -516,  -320,
  -605,  -186,  -505,  -683,   nil,  -653,  -813,   nil,   nil,  -166,
  -467 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,   nil,   294,     7,   347,   295,
   nil,   nil,   535,   nil,   854,   nil,   293,   nil,   nil,   nil,
    14,    15,    21,   230,   323,   nil,   nil,   751,   228,   229,
   nil,   nil,    20,   nil,   331,    24,    25,    26,    27,   nil,
   693,   nil,   nil,   nil,   312,   nil,   nil,    28,   423,    35,
   nil,   nil,    37,    40,    39,   nil,   225,   226,   599,   nil,
   132,   431,   131,   134,    78,    79,   nil,    93,    49,   284,
   nil,   424,   nil,   425,   436,   647,   498,   282,   267,    50,
    51,    52,    53,    54,    55,    56,    57,    58,   nil,   268,
    64,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   583,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   723,   565,   nil,   724,   953,   796,   553,   nil,
   554,   nil,   nil,   555,   nil,   557,   663,   nil,   nil,   nil,
   563,   nil,   nil,   nil,   761,   nil,   nil,   nil,   435,   269,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    77,    80,
    82,   nil,   nil,   nil,   nil,   nil,   609,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   838,   552,   nil,   556,   846,
   568,   570,   571,   808,   574,   575,   809,   578,   581,   nil,
   288 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 148, :_reduce_1,
  2, 146, :_reduce_2,
  2, 147, :_reduce_3,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  3, 149, :_reduce_6,
  2, 149, :_reduce_none,
  1, 152, :_reduce_8,
  0, 156, :_reduce_9,
  5, 152, :_reduce_10,
  4, 155, :_reduce_11,
  2, 157, :_reduce_12,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  3, 161, :_reduce_15,
  2, 161, :_reduce_16,
  0, 178, :_reduce_17,
  4, 154, :_reduce_18,
  3, 154, :_reduce_19,
  3, 154, :_reduce_20,
  3, 154, :_reduce_21,
  2, 154, :_reduce_22,
  3, 154, :_reduce_23,
  3, 154, :_reduce_24,
  3, 154, :_reduce_25,
  3, 154, :_reduce_26,
  3, 154, :_reduce_27,
  4, 154, :_reduce_28,
  1, 154, :_reduce_none,
  3, 154, :_reduce_30,
  3, 154, :_reduce_31,
  6, 154, :_reduce_32,
  5, 154, :_reduce_33,
  5, 154, :_reduce_34,
  5, 154, :_reduce_35,
  5, 154, :_reduce_36,
  3, 154, :_reduce_37,
  3, 154, :_reduce_38,
  3, 154, :_reduce_39,
  1, 154, :_reduce_none,
  3, 165, :_reduce_41,
  3, 165, :_reduce_42,
  1, 177, :_reduce_none,
  3, 177, :_reduce_44,
  3, 177, :_reduce_45,
  3, 177, :_reduce_46,
  2, 177, :_reduce_47,
  1, 177, :_reduce_none,
  1, 164, :_reduce_49,
  1, 167, :_reduce_none,
  1, 167, :_reduce_none,
  1, 182, :_reduce_none,
  4, 182, :_reduce_53,
  0, 190, :_reduce_54,
  0, 191, :_reduce_55,
  6, 187, :_reduce_56,
  1, 189, :_reduce_57,
  2, 181, :_reduce_58,
  3, 181, :_reduce_59,
  4, 181, :_reduce_60,
  5, 181, :_reduce_61,
  4, 181, :_reduce_62,
  5, 181, :_reduce_63,
  2, 181, :_reduce_64,
  2, 181, :_reduce_65,
  2, 181, :_reduce_66,
  2, 181, :_reduce_67,
  2, 181, :_reduce_68,
  1, 166, :_reduce_none,
  3, 166, :_reduce_70,
  1, 195, :_reduce_none,
  3, 195, :_reduce_72,
  1, 194, :_reduce_73,
  2, 194, :_reduce_74,
  3, 194, :_reduce_75,
  5, 194, :_reduce_76,
  2, 194, :_reduce_77,
  4, 194, :_reduce_78,
  2, 194, :_reduce_79,
  4, 194, :_reduce_80,
  1, 194, :_reduce_81,
  3, 194, :_reduce_82,
  1, 198, :_reduce_none,
  3, 198, :_reduce_84,
  2, 197, :_reduce_85,
  3, 197, :_reduce_86,
  1, 200, :_reduce_87,
  3, 200, :_reduce_88,
  1, 199, :_reduce_89,
  1, 199, :_reduce_90,
  4, 199, :_reduce_91,
  3, 199, :_reduce_92,
  3, 199, :_reduce_93,
  3, 199, :_reduce_94,
  3, 199, :_reduce_95,
  2, 199, :_reduce_96,
  1, 199, :_reduce_97,
  1, 174, :_reduce_98,
  1, 174, :_reduce_99,
  4, 174, :_reduce_100,
  3, 174, :_reduce_101,
  3, 174, :_reduce_102,
  3, 174, :_reduce_103,
  3, 174, :_reduce_104,
  2, 174, :_reduce_105,
  1, 174, :_reduce_106,
  1, 203, :_reduce_107,
  1, 203, :_reduce_none,
  2, 204, :_reduce_109,
  1, 204, :_reduce_110,
  3, 204, :_reduce_111,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 205, :_reduce_115,
  1, 205, :_reduce_116,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 162, :_reduce_119,
  1, 162, :_reduce_none,
  1, 163, :_reduce_121,
  0, 211, :_reduce_122,
  4, 163, :_reduce_123,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  3, 180, :_reduce_195,
  5, 180, :_reduce_196,
  3, 180, :_reduce_197,
  5, 180, :_reduce_198,
  6, 180, :_reduce_199,
  5, 180, :_reduce_200,
  5, 180, :_reduce_201,
  5, 180, :_reduce_202,
  5, 180, :_reduce_203,
  4, 180, :_reduce_204,
  3, 180, :_reduce_205,
  3, 180, :_reduce_206,
  3, 180, :_reduce_207,
  3, 180, :_reduce_208,
  3, 180, :_reduce_209,
  3, 180, :_reduce_210,
  3, 180, :_reduce_211,
  3, 180, :_reduce_212,
  3, 180, :_reduce_213,
  4, 180, :_reduce_214,
  2, 180, :_reduce_215,
  2, 180, :_reduce_216,
  3, 180, :_reduce_217,
  3, 180, :_reduce_218,
  3, 180, :_reduce_219,
  3, 180, :_reduce_220,
  3, 180, :_reduce_221,
  3, 180, :_reduce_222,
  3, 180, :_reduce_223,
  3, 180, :_reduce_224,
  3, 180, :_reduce_225,
  3, 180, :_reduce_226,
  3, 180, :_reduce_227,
  3, 180, :_reduce_228,
  3, 180, :_reduce_229,
  2, 180, :_reduce_230,
  2, 180, :_reduce_231,
  3, 180, :_reduce_232,
  3, 180, :_reduce_233,
  3, 180, :_reduce_234,
  3, 180, :_reduce_235,
  3, 180, :_reduce_236,
  6, 180, :_reduce_237,
  1, 180, :_reduce_none,
  1, 214, :_reduce_239,
  1, 215, :_reduce_none,
  2, 215, :_reduce_241,
  4, 215, :_reduce_242,
  2, 215, :_reduce_243,
  3, 219, :_reduce_244,
  1, 220, :_reduce_none,
  1, 220, :_reduce_none,
  1, 170, :_reduce_247,
  1, 170, :_reduce_248,
  2, 170, :_reduce_249,
  4, 170, :_reduce_250,
  2, 170, :_reduce_251,
  1, 193, :_reduce_252,
  2, 193, :_reduce_253,
  2, 193, :_reduce_254,
  4, 193, :_reduce_255,
  1, 193, :_reduce_256,
  0, 223, :_reduce_257,
  2, 186, :_reduce_258,
  2, 222, :_reduce_259,
  2, 221, :_reduce_260,
  1, 221, :_reduce_none,
  1, 216, :_reduce_262,
  2, 216, :_reduce_263,
  3, 216, :_reduce_264,
  4, 216, :_reduce_265,
  1, 176, :_reduce_266,
  1, 176, :_reduce_267,
  3, 175, :_reduce_268,
  4, 175, :_reduce_269,
  2, 175, :_reduce_270,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_281,
  0, 246, :_reduce_282,
  4, 213, :_reduce_283,
  2, 213, :_reduce_284,
  0, 247, :_reduce_285,
  0, 248, :_reduce_286,
  5, 213, :_reduce_287,
  3, 213, :_reduce_288,
  3, 213, :_reduce_289,
  2, 213, :_reduce_290,
  3, 213, :_reduce_291,
  0, 249, :_reduce_292,
  4, 213, :_reduce_293,
  1, 213, :_reduce_294,
  4, 213, :_reduce_295,
  3, 213, :_reduce_296,
  1, 213, :_reduce_297,
  5, 213, :_reduce_298,
  4, 213, :_reduce_299,
  3, 213, :_reduce_300,
  2, 213, :_reduce_301,
  1, 213, :_reduce_none,
  2, 213, :_reduce_303,
  2, 213, :_reduce_304,
  6, 213, :_reduce_305,
  6, 213, :_reduce_306,
  0, 250, :_reduce_307,
  0, 251, :_reduce_308,
  7, 213, :_reduce_309,
  0, 252, :_reduce_310,
  0, 253, :_reduce_311,
  7, 213, :_reduce_312,
  5, 213, :_reduce_313,
  4, 213, :_reduce_314,
  0, 254, :_reduce_315,
  0, 255, :_reduce_316,
  9, 213, :_reduce_317,
  0, 256, :_reduce_318,
  0, 257, :_reduce_319,
  7, 213, :_reduce_320,
  0, 258, :_reduce_321,
  0, 259, :_reduce_322,
  0, 260, :_reduce_323,
  9, 213, :_reduce_324,
  0, 261, :_reduce_325,
  0, 262, :_reduce_326,
  6, 213, :_reduce_327,
  0, 263, :_reduce_328,
  6, 213, :_reduce_329,
  0, 264, :_reduce_330,
  0, 265, :_reduce_331,
  9, 213, :_reduce_332,
  1, 213, :_reduce_333,
  1, 213, :_reduce_334,
  1, 213, :_reduce_335,
  1, 213, :_reduce_336,
  1, 169, :_reduce_337,
  1, 266, :_reduce_none,
  1, 267, :_reduce_none,
  1, 268, :_reduce_none,
  1, 269, :_reduce_none,
  1, 270, :_reduce_none,
  1, 271, :_reduce_none,
  1, 272, :_reduce_none,
  1, 273, :_reduce_none,
  1, 274, :_reduce_none,
  1, 275, :_reduce_none,
  1, 276, :_reduce_none,
  1, 237, :_reduce_none,
  1, 237, :_reduce_none,
  2, 237, :_reduce_none,
  1, 239, :_reduce_none,
  1, 239, :_reduce_none,
  1, 238, :_reduce_none,
  5, 238, :_reduce_355,
  1, 159, :_reduce_none,
  2, 159, :_reduce_357,
  1, 241, :_reduce_none,
  1, 241, :_reduce_359,
  1, 277, :_reduce_none,
  3, 277, :_reduce_361,
  1, 280, :_reduce_362,
  3, 280, :_reduce_363,
  1, 279, :_reduce_364,
  4, 279, :_reduce_365,
  6, 279, :_reduce_366,
  3, 279, :_reduce_367,
  5, 279, :_reduce_368,
  2, 279, :_reduce_369,
  4, 279, :_reduce_370,
  1, 279, :_reduce_371,
  3, 279, :_reduce_372,
  4, 281, :_reduce_373,
  2, 281, :_reduce_374,
  2, 281, :_reduce_375,
  1, 281, :_reduce_376,
  2, 286, :_reduce_377,
  1, 286, :_reduce_none,
  6, 287, :_reduce_379,
  8, 287, :_reduce_380,
  4, 287, :_reduce_381,
  6, 287, :_reduce_382,
  4, 287, :_reduce_383,
  2, 287, :_reduce_384,
  6, 287, :_reduce_385,
  2, 287, :_reduce_386,
  4, 287, :_reduce_387,
  6, 287, :_reduce_388,
  2, 287, :_reduce_389,
  4, 287, :_reduce_390,
  2, 287, :_reduce_391,
  4, 287, :_reduce_392,
  1, 287, :_reduce_393,
  1, 188, :_reduce_394,
  1, 188, :_reduce_none,
  3, 291, :_reduce_396,
  1, 291, :_reduce_397,
  4, 291, :_reduce_398,
  1, 292, :_reduce_none,
  4, 292, :_reduce_400,
  1, 293, :_reduce_401,
  3, 293, :_reduce_402,
  1, 294, :_reduce_403,
  1, 294, :_reduce_none,
  0, 298, :_reduce_405,
  3, 236, :_reduce_406,
  4, 296, :_reduce_407,
  1, 296, :_reduce_408,
  3, 297, :_reduce_409,
  3, 297, :_reduce_410,
  0, 301, :_reduce_411,
  0, 302, :_reduce_412,
  6, 300, :_reduce_413,
  2, 183, :_reduce_414,
  4, 183, :_reduce_415,
  5, 183, :_reduce_416,
  5, 183, :_reduce_417,
  0, 304, :_reduce_418,
  3, 235, :_reduce_419,
  4, 235, :_reduce_420,
  4, 235, :_reduce_421,
  3, 235, :_reduce_422,
  3, 235, :_reduce_423,
  3, 235, :_reduce_424,
  2, 235, :_reduce_425,
  1, 235, :_reduce_426,
  4, 235, :_reduce_427,
  0, 305, :_reduce_428,
  0, 306, :_reduce_429,
  6, 234, :_reduce_430,
  0, 307, :_reduce_431,
  0, 308, :_reduce_432,
  6, 234, :_reduce_433,
  0, 310, :_reduce_434,
  6, 240, :_reduce_435,
  1, 309, :_reduce_none,
  1, 309, :_reduce_none,
  6, 158, :_reduce_438,
  0, 158, :_reduce_439,
  1, 311, :_reduce_440,
  1, 311, :_reduce_none,
  1, 311, :_reduce_none,
  2, 312, :_reduce_443,
  1, 312, :_reduce_none,
  2, 160, :_reduce_445,
  1, 160, :_reduce_none,
  1, 224, :_reduce_447,
  1, 224, :_reduce_448,
  1, 224, :_reduce_none,
  1, 225, :_reduce_450,
  1, 314, :_reduce_451,
  1, 314, :_reduce_none,
  2, 314, :_reduce_453,
  3, 315, :_reduce_454,
  1, 315, :_reduce_455,
  3, 226, :_reduce_456,
  3, 227, :_reduce_457,
  3, 228, :_reduce_458,
  3, 228, :_reduce_459,
  1, 319, :_reduce_460,
  3, 319, :_reduce_461,
  1, 320, :_reduce_none,
  2, 320, :_reduce_463,
  3, 230, :_reduce_464,
  3, 230, :_reduce_465,
  1, 322, :_reduce_466,
  3, 322, :_reduce_467,
  3, 229, :_reduce_468,
  3, 229, :_reduce_469,
  3, 231, :_reduce_470,
  3, 231, :_reduce_471,
  1, 323, :_reduce_472,
  3, 323, :_reduce_473,
  1, 324, :_reduce_474,
  3, 324, :_reduce_475,
  1, 316, :_reduce_476,
  2, 316, :_reduce_477,
  1, 317, :_reduce_478,
  2, 317, :_reduce_479,
  1, 318, :_reduce_480,
  2, 318, :_reduce_481,
  1, 321, :_reduce_482,
  0, 326, :_reduce_483,
  3, 321, :_reduce_484,
  0, 327, :_reduce_485,
  4, 321, :_reduce_486,
  1, 325, :_reduce_487,
  1, 325, :_reduce_488,
  1, 325, :_reduce_489,
  1, 325, :_reduce_none,
  2, 209, :_reduce_491,
  1, 209, :_reduce_492,
  1, 328, :_reduce_none,
  1, 328, :_reduce_none,
  1, 328, :_reduce_none,
  1, 328, :_reduce_none,
  3, 210, :_reduce_497,
  1, 313, :_reduce_none,
  2, 313, :_reduce_499,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 202, :_reduce_509,
  1, 202, :_reduce_510,
  1, 202, :_reduce_511,
  1, 202, :_reduce_512,
  1, 202, :_reduce_513,
  1, 202, :_reduce_514,
  1, 202, :_reduce_515,
  1, 232, :_reduce_516,
  1, 232, :_reduce_517,
  1, 168, :_reduce_518,
  1, 168, :_reduce_519,
  1, 173, :_reduce_520,
  1, 173, :_reduce_521,
  1, 242, :_reduce_522,
  0, 329, :_reduce_523,
  4, 242, :_reduce_524,
  2, 242, :_reduce_525,
  3, 244, :_reduce_526,
  2, 244, :_reduce_527,
  4, 330, :_reduce_528,
  2, 330, :_reduce_529,
  2, 330, :_reduce_530,
  1, 330, :_reduce_none,
  2, 332, :_reduce_532,
  0, 332, :_reduce_533,
  6, 299, :_reduce_534,
  8, 299, :_reduce_535,
  4, 299, :_reduce_536,
  6, 299, :_reduce_537,
  4, 299, :_reduce_538,
  6, 299, :_reduce_539,
  2, 299, :_reduce_540,
  4, 299, :_reduce_541,
  6, 299, :_reduce_542,
  2, 299, :_reduce_543,
  4, 299, :_reduce_544,
  2, 299, :_reduce_545,
  4, 299, :_reduce_546,
  1, 299, :_reduce_547,
  0, 299, :_reduce_548,
  1, 295, :_reduce_549,
  1, 295, :_reduce_550,
  1, 295, :_reduce_551,
  1, 295, :_reduce_552,
  1, 278, :_reduce_none,
  1, 278, :_reduce_554,
  1, 334, :_reduce_none,
  1, 335, :_reduce_none,
  3, 335, :_reduce_557,
  1, 288, :_reduce_558,
  3, 288, :_reduce_559,
  1, 336, :_reduce_none,
  2, 337, :_reduce_561,
  1, 337, :_reduce_562,
  2, 338, :_reduce_563,
  1, 338, :_reduce_564,
  1, 282, :_reduce_none,
  3, 282, :_reduce_566,
  1, 331, :_reduce_none,
  3, 331, :_reduce_568,
  1, 339, :_reduce_none,
  1, 339, :_reduce_none,
  2, 283, :_reduce_571,
  1, 283, :_reduce_572,
  3, 340, :_reduce_573,
  3, 341, :_reduce_574,
  1, 289, :_reduce_575,
  3, 289, :_reduce_576,
  1, 333, :_reduce_577,
  3, 333, :_reduce_578,
  1, 342, :_reduce_none,
  1, 342, :_reduce_none,
  2, 290, :_reduce_581,
  1, 290, :_reduce_582,
  1, 343, :_reduce_none,
  1, 343, :_reduce_none,
  2, 285, :_reduce_585,
  2, 284, :_reduce_586,
  0, 284, :_reduce_587,
  1, 245, :_reduce_none,
  0, 344, :_reduce_589,
  4, 245, :_reduce_590,
  1, 233, :_reduce_591,
  2, 233, :_reduce_592,
  1, 218, :_reduce_none,
  3, 218, :_reduce_594,
  3, 345, :_reduce_595,
  3, 345, :_reduce_596,
  4, 345, :_reduce_597,
  2, 345, :_reduce_598,
  2, 345, :_reduce_599,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 192, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 303, :_reduce_none,
  1, 303, :_reduce_none,
  1, 303, :_reduce_none,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 172, :_reduce_none,
  0, 150, :_reduce_none,
  1, 150, :_reduce_none,
  0, 179, :_reduce_none,
  1, 179, :_reduce_none,
  2, 196, :_reduce_none,
  2, 171, :_reduce_none,
  0, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  1, 243, :_reduce_622,
  1, 243, :_reduce_none,
  1, 153, :_reduce_none,
  2, 153, :_reduce_625,
  0, 151, :_reduce_626 ]

racc_reduce_n = 627

racc_shift_n = 1058

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tREGEXP_END => 63,
  :tUPLUS => 64,
  :tUMINUS => 65,
  :tUMINUS_NUM => 66,
  :tPOW => 67,
  :tCMP => 68,
  :tEQ => 69,
  :tEQQ => 70,
  :tNEQ => 71,
  :tGEQ => 72,
  :tLEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tMATCH => 76,
  :tNMATCH => 77,
  :tDOT => 78,
  :tDOT2 => 79,
  :tDOT3 => 80,
  :tAREF => 81,
  :tASET => 82,
  :tLSHFT => 83,
  :tRSHFT => 84,
  :tCOLON2 => 85,
  :tCOLON3 => 86,
  :tOP_ASGN => 87,
  :tASSOC => 88,
  :tLPAREN => 89,
  :tLPAREN2 => 90,
  :tRPAREN => 91,
  :tLPAREN_ARG => 92,
  :tLBRACK => 93,
  :tLBRACK2 => 94,
  :tRBRACK => 95,
  :tLBRACE => 96,
  :tLBRACE_ARG => 97,
  :tSTAR => 98,
  :tSTAR2 => 99,
  :tAMPER => 100,
  :tAMPER2 => 101,
  :tTILDE => 102,
  :tPERCENT => 103,
  :tDIVIDE => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAMBDA => 132,
  :tLAMBEG => 133,
  :tDSTAR => 134,
  :tCHAR => 135,
  :tSYMBOLS_BEG => 136,
  :tQSYMBOLS_BEG => 137,
  :tSTRING_DEND => 138,
  :tUBANG => 139,
  :tRATIONAL => 140,
  :tIMAGINARY => 141,
  :tLABEL_END => 142,
  :tEQL => 143,
  :tLOWEST => 144 }

racc_nt_base = 145

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tDSTAR",
  "tCHAR",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DEND",
  "tUBANG",
  "tRATIONAL",
  "tIMAGINARY",
  "tLABEL_END",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "@2",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@3",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "block_call",
  "dot_or_colon",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_param",
  "fcall",
  "@4",
  "@5",
  "operation",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@6",
  "simple_numeric",
  "primary",
  "arg_value",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@7",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "@26",
  "@27",
  "k_begin",
  "k_if",
  "k_unless",
  "k_while",
  "k_until",
  "k_case",
  "k_for",
  "k_class",
  "k_module",
  "k_def",
  "k_end",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@28",
  "f_args",
  "do_block",
  "@29",
  "@30",
  "operation3",
  "@31",
  "@32",
  "@33",
  "@34",
  "@35",
  "cases",
  "@36",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@37",
  "@38",
  "sym",
  "@39",
  "args_tail",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_asgn",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "@40",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_2(val, _values, result)
                      result = new_compstmt val
                    
    result
end

def _reduce_3(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 4 omitted

# reduce 5 omitted

def _reduce_6(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 7 omitted

def _reduce_8(val, _values, result)
                      result = val[0]

                      # TODO: remove once I have more confidence this is fixed
                      # result.each_of_type :call_args do |s|
                      #   debug20 666, s, result
                      # end
                    
    result
end

def _reduce_9(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 1
                        yyerror "BEGIN in method"
                      end
                      self.env.extend
                    
    result
end

def _reduce_10(val, _values, result)
                      result = new_iter s(:preexe), nil, val[3]
                    
    result
end

def _reduce_11(val, _values, result)
                      result = new_body val
                    
    result
end

def _reduce_12(val, _values, result)
                      result = new_compstmt val
                    
    result
end

# reduce 13 omitted

# reduce 14 omitted

def _reduce_15(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

def _reduce_16(val, _values, result)
                      result = val[1]
                      debug20 2, val, result
                    
    result
end

def _reduce_17(val, _values, result)
                      lexer.lex_state = :expr_fname
                      result = self.lexer.lineno
                    
    result
end

def _reduce_18(val, _values, result)
                      result = s(:alias, val[1], val[3]).line(val[2])
                    
    result
end

def _reduce_19(val, _values, result)
                      result = s(:valias, val[1].to_sym, val[2].to_sym)
                    
    result
end

def _reduce_20(val, _values, result)
                      result = s(:valias, val[1].to_sym, :"$#{val[2]}")
                    
    result
end

def _reduce_21(val, _values, result)
                      yyerror "can't make alias for the number variables"
                    
    result
end

def _reduce_22(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_23(val, _values, result)
                      result = new_if val[2], val[0], nil
                    
    result
end

def _reduce_24(val, _values, result)
                      result = new_if val[2], nil, val[0]
                    
    result
end

def _reduce_25(val, _values, result)
                      result = new_while val[0], val[2], true
                    
    result
end

def _reduce_26(val, _values, result)
                      result = new_until val[0], val[2], true
                    
    result
end

def _reduce_27(val, _values, result)
                      result = s(:rescue, val[0], new_resbody(s(:array), val[2]))
                    
    result
end

def _reduce_28(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 3
                        yyerror "END in method; use at_exit"
                      end
                      result = new_iter s(:postexe), 0, val[2]
                    
    result
end

# reduce 29 omitted

def _reduce_30(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_31(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_32(val, _values, result)
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_33(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result.sexp_type = :safe_op_asgn
                      end
                      result.line = val[0].line
                    
    result
end

def _reduce_34(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result.sexp_type = :safe_op_asgn
                      end
                      result.line = val[0].line
                    
    result
end

def _reduce_35(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 4, val, result
                    
    result
end

def _reduce_36(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 5, val, result
                    
    result
end

def _reduce_37(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_38(val, _values, result)
                      result = new_assign val[0], s(:svalue, val[2])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = new_masgn val[0], val[2]
                    
    result
end

# reduce 40 omitted

def _reduce_41(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

def _reduce_42(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

# reduce 43 omitted

def _reduce_44(val, _values, result)
                      result = logical_op :and, val[0], val[2]
                    
    result
end

def _reduce_45(val, _values, result)
                      result = logical_op :or, val[0], val[2]
                    
    result
end

def _reduce_46(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_47(val, _values, result)
                      result = s(:call, val[1], :"!")
                    
    result
end

# reduce 48 omitted

def _reduce_49(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

def _reduce_53(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_54(val, _values, result)
                      self.env.extend(:dynamic)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_55(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_56(val, _values, result)
                      result = new_iter nil, val[2], val[4]
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_57(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_58(val, _values, result)
                      result = val[0].concat val[1].sexp_body # REFACTOR pattern
                    
    result
end

def _reduce_59(val, _values, result)
                      result = val[0].concat val[1].sexp_body
                      if val[2] then
                        block_dup_check result, val[2]

                        result, operation = val[2], result
                        result.insert 1, operation
                      end
                    
    result
end

def _reduce_60(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]
                    
    result
end

def _reduce_61(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args, val[1]

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_62(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_63(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_64(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_65(val, _values, result)
                      result = new_yield val[1]
                    
    result
end

def _reduce_66(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_67(val, _values, result)
                      line = val[0].last
                      result = s(:break, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_68(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)
                    
    result
end

# reduce 69 omitted

def _reduce_70(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 71 omitted

def _reduce_72(val, _values, result)
                      result = s(:masgn, s(:array, val[1]))
                    
    result
end

def _reduce_73(val, _values, result)
                      result = s(:masgn, val[0])
                    
    result
end

def _reduce_74(val, _values, result)
                      result = s(:masgn, val[0] << val[1].compact)
                    
    result
end

def _reduce_75(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat, val[2]))
                    
    result
end

def _reduce_76(val, _values, result)
                      ary1, _, splat, _, ary2 = val

                      result = list_append ary1, s(:splat, splat)
                      result.concat ary2.sexp_body
                      result = s(:masgn, result)
                    
    result
end

def _reduce_77(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat))
                    
    result
end

def _reduce_78(val, _values, result)
                      ary = list_append val[0], s(:splat)
                      ary.concat val[3].sexp_body
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_79(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat, val[1])))
                    
    result
end

def _reduce_80(val, _values, result)
                      ary = s(:array, s(:splat, val[1]))
                      ary.concat val[3].sexp_body
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_81(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat)))
                    
    result
end

def _reduce_82(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat), *val[2].sexp_body))
                    
    result
end

# reduce 83 omitted

def _reduce_84(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_85(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_86(val, _values, result)
                      result = val[0] << val[1].compact
                    
    result
end

def _reduce_87(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_88(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_89(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_90(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_91(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_92(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_93(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_94(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_95(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 7
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym), nil)
                    
    result
end

def _reduce_96(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 8
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, nil, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_97(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_98(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_99(val, _values, result)
                      result = self.assignable val[0]
                      debug20 9, val, result
                    
    result
end

def _reduce_100(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_101(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_102(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_103(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_104(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 10
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym))
                    
    result
end

def _reduce_105(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 11
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_106(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_107(val, _values, result)
                      yyerror "class/module name must be CONSTANT"
                    
    result
end

# reduce 108 omitted

def _reduce_109(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_110(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

def _reduce_111(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

def _reduce_115(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

def _reduce_116(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

# reduce 117 omitted

# reduce 118 omitted

def _reduce_119(val, _values, result)
                      result = s(:lit, val[0].to_sym)
                    
    result
end

# reduce 120 omitted

def _reduce_121(val, _values, result)
                      result = new_undef val[0]
                    
    result
end

def _reduce_122(val, _values, result)
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_123(val, _values, result)
                      result = new_undef val[0], val[3]
                    
    result
end

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

def _reduce_195(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

def _reduce_196(val, _values, result)
                      result = new_assign val[0], s(:rescue, val[2], new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_197(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_198(val, _values, result)
                      result = new_op_asgn val
                      result = s(:rescue, result, new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_199(val, _values, result)
                      val[2].sexp_type = :arglist if val[2]
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = new_op_asgn2 val
                    
    result
end

def _reduce_201(val, _values, result)
                      result = new_op_asgn2 val
                    
    result
end

def _reduce_202(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_203(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_204(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_205(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_206(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)..(v2.last))
                      else
                        result = s(:dot2, v1, v2)
                      end
                    
    result
end

def _reduce_207(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)...(v2.last))
                      else
                        result = s(:dot3, v1, v2)
                      end
                    
    result
end

def _reduce_208(val, _values, result)
                      result = new_call val[0], :+, argl(val[2])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = new_call val[0], :-, argl(val[2])
                    
    result
end

def _reduce_210(val, _values, result)
                      result = new_call val[0], :*, argl(val[2])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = new_call val[0], :"/", argl(val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = new_call val[0], :"%", argl(val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = new_call val[0], :**, argl(val[2])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", argl(val[3])), :"-@")
                    
    result
end

def _reduce_215(val, _values, result)
                      result = new_call val[1], :"+@"
                    
    result
end

def _reduce_216(val, _values, result)
                      result = new_call val[1], :"-@"
                    
    result
end

def _reduce_217(val, _values, result)
                      result = new_call val[0], :"|", argl(val[2])
                    
    result
end

def _reduce_218(val, _values, result)
                      result = new_call val[0], :"^", argl(val[2])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = new_call val[0], :"&", argl(val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = new_call val[0], :"<=>", argl(val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = new_call val[0], :">", argl(val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = new_call val[0], :">=", argl(val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = new_call val[0], :"<", argl(val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = new_call val[0], :"<=", argl(val[2])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = new_call val[0], :"==", argl(val[2])
                    
    result
end

def _reduce_226(val, _values, result)
                      result = new_call val[0], :"===", argl(val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = new_call val[0], :"!=", argl(val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = new_match val[0], val[2]
                    
    result
end

def _reduce_229(val, _values, result)
                      result = s(:not, new_match(val[0], val[2]))
                    
    result
end

def _reduce_230(val, _values, result)
                      result = new_call val[1], :"!"
                    
    result
end

def _reduce_231(val, _values, result)
                      result = new_call value_expr(val[1]), :"~"
                    
    result
end

def _reduce_232(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", argl(val[2])
                    
    result
end

def _reduce_233(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", argl(val[2])
                    
    result
end

def _reduce_234(val, _values, result)
                      result = logical_op :and, val[0], val[2]
                    
    result
end

def _reduce_235(val, _values, result)
                      result = logical_op :or, val[0], val[2]
                    
    result
end

def _reduce_236(val, _values, result)
                      result = s(:defined, val[2])
                    
    result
end

def _reduce_237(val, _values, result)
                      result = s(:if, val[0], val[2], val[5])
                    
    result
end

# reduce 238 omitted

def _reduce_239(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 240 omitted

def _reduce_241(val, _values, result)
                      result = args [val[0]]
                    
    result
end

def _reduce_242(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_243(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

def _reduce_244(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 245 omitted

# reduce 246 omitted

def _reduce_247(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_248(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_249(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_250(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_251(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

def _reduce_252(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = call_args val
                    
    result
end

def _reduce_253(val, _values, result)
                      result = call_args val
                      result = self.arg_blk_pass val[0], val[1]
                    
    result
end

def _reduce_254(val, _values, result)
                      result = call_args [array_to_hash(val[0])]
                      result = self.arg_blk_pass result, val[1]
                    
    result
end

def _reduce_255(val, _values, result)
                      result = call_args [val[0], array_to_hash(val[2])]
                      result = self.arg_blk_pass result, val[3]
                    
    result
end

def _reduce_256(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_257(val, _values, result)
                      result = lexer.cmdarg.stack.dup # TODO: smell?
                      lexer.cmdarg.push true
                    
    result
end

def _reduce_258(val, _values, result)
                      lexer.cmdarg.stack.replace val[0]
                      result = val[1]
                    
    result
end

def _reduce_259(val, _values, result)
                      result = s(:block_pass, val[1])
                    
    result
end

def _reduce_260(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 261 omitted

def _reduce_262(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_263(val, _values, result)
                      result = s(:array, s(:splat, val[1]))
                    
    result
end

def _reduce_264(val, _values, result)
                      result = self.list_append val[0], val[2]
                    
    result
end

def _reduce_265(val, _values, result)
                      result = self.list_append val[0], s(:splat, val[3])
                    
    result
end

def _reduce_266(val, _values, result)
                      result = new_masgn_arg val[0]
                    
    result
end

def _reduce_267(val, _values, result)
                      result = new_masgn_arg val[0], :wrap
                    
    result
end

def _reduce_268(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_269(val, _values, result)
                      result = self.arg_concat val[0], val[3]
                    
    result
end

def _reduce_270(val, _values, result)
                      result = s(:splat, val[1])
                    
    result
end

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

# reduce 280 omitted

def _reduce_281(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_282(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_283(val, _values, result)
                      unless val[2] then
                        result = s(:nil)
                      else
                        result = s(:begin, val[2])
                      end

                      result.line = val[1]
                    
    result
end

def _reduce_284(val, _values, result)
                      debug20 13, val, result
                    
    result
end

def _reduce_285(val, _values, result)
                      result = self.lexer.cmdarg.stack.dup
                      lexer.cmdarg.stack.replace [false] # TODO add api for these
                    
    result
end

def _reduce_286(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_287(val, _values, result)
                      warning "(...) interpreted as grouped expression"
                      lexer.cmdarg.stack.replace val[1]
                      result = val[2]
                    
    result
end

def _reduce_288(val, _values, result)
                      result = val[1] || s(:nil)
                      result.paren = true
                    
    result
end

def _reduce_289(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

def _reduce_290(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_291(val, _values, result)
                      result = val[1] || s(:array)
                      result.sexp_type = :array # aref_args is :args
                    
    result
end

def _reduce_292(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_293(val, _values, result)
                      result = new_hash val
                    
    result
end

def _reduce_294(val, _values, result)
                      result = s(:return)
                    
    result
end

def _reduce_295(val, _values, result)
                      result = new_yield val[2]
                    
    result
end

def _reduce_296(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_297(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_298(val, _values, result)
                      result = s(:defined, val[3])
                    
    result
end

def _reduce_299(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_300(val, _values, result)
                      debug20 14, val, result
                    
    result
end

def _reduce_301(val, _values, result)
                      oper, iter = val[0], val[1]
                      call = oper # FIX
                      iter.insert 1, call
                      result = iter
                      call.line = iter.line
                    
    result
end

# reduce 302 omitted

def _reduce_303(val, _values, result)
                      call, iter = val[0], val[1]
                      block_dup_check call, iter
                      iter.insert 1, call # FIX
                      result = iter
                    
    result
end

def _reduce_304(val, _values, result)
                      result = val[1] # TODO: fix lineno
                    
    result
end

def _reduce_305(val, _values, result)
                      result = new_if val[1], val[3], val[4]
                    
    result
end

def _reduce_306(val, _values, result)
                      result = new_if val[1], val[4], val[3]
                    
    result
end

def _reduce_307(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_308(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_309(val, _values, result)
                      result = new_while val[5], val[2], true
                    
    result
end

def _reduce_310(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_311(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_312(val, _values, result)
                      result = new_until val[5], val[2], true
                    
    result
end

def _reduce_313(val, _values, result)
                      (_, line), expr, _, body, _ = val
                      result = new_case expr, body, line
                    
    result
end

def _reduce_314(val, _values, result)
                      (_, line), _, body, _ = val
                      result = new_case nil, body, line
                    
    result
end

def _reduce_315(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_316(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_317(val, _values, result)
                      result = new_for val[4], val[1], val[7]
                    
    result
end

def _reduce_318(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_319(val, _values, result)
                      self.comments.push self.lexer.comments
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend
                    
    result
end

def _reduce_320(val, _values, result)
                      result = new_class val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_321(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_322(val, _values, result)
                      result = self.in_def
                      self.in_def = false
                    
    result
end

def _reduce_323(val, _values, result)
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend
                    
    result
end

def _reduce_324(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_325(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_326(val, _values, result)
                      self.comments.push self.lexer.comments
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend
                    
    result
end

def _reduce_327(val, _values, result)
                      result = new_module val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_328(val, _values, result)
                      result = [self.in_def, self.lexer.cmdarg.stack.dup]

                      self.comments.push self.lexer.comments
                      self.in_def = true
                      self.env.extend
                      # TODO: local->cmdargs = cmdarg_stack;
                      # TODO: port local_push_gen and local_pop_gen
                      lexer.cmdarg.stack.replace [false]
                    
    result
end

def _reduce_329(val, _values, result)
                      in_def, cmdarg = val[2]

                      result = new_defn val

                      lexer.cmdarg.stack.replace cmdarg
                      self.env.unextend
                      self.in_def = in_def
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_330(val, _values, result)
                      self.comments.push self.lexer.comments
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_331(val, _values, result)
                      self.in_single += 1
                      self.env.extend
                      lexer.lex_state = :expr_endfn # force for args
                      result = [lexer.lineno, self.lexer.cmdarg.stack.dup]
                      lexer.cmdarg.stack.replace [false]
                    
    result
end

def _reduce_332(val, _values, result)
                      line, cmdarg = val[5]
                      result = new_defs val
                      result[3].line line

                      lexer.cmdarg.stack.replace cmdarg

                      self.env.unextend
                      self.in_single -= 1
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_333(val, _values, result)
                      result = s(:break)
                    
    result
end

def _reduce_334(val, _values, result)
                      result = s(:next)
                    
    result
end

def _reduce_335(val, _values, result)
                      result = s(:redo)
                    
    result
end

def _reduce_336(val, _values, result)
                      result = s(:retry)
                    
    result
end

def _reduce_337(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 338 omitted

# reduce 339 omitted

# reduce 340 omitted

# reduce 341 omitted

# reduce 342 omitted

# reduce 343 omitted

# reduce 344 omitted

# reduce 345 omitted

# reduce 346 omitted

# reduce 347 omitted

# reduce 348 omitted

# reduce 349 omitted

# reduce 350 omitted

# reduce 351 omitted

# reduce 352 omitted

# reduce 353 omitted

# reduce 354 omitted

def _reduce_355(val, _values, result)
                      result = s(:if, val[1], val[3], val[4])
                    
    result
end

# reduce 356 omitted

def _reduce_357(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 358 omitted

def _reduce_359(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK
                    
    result
end

# reduce 360 omitted

def _reduce_361(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_362(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_363(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_364(val, _values, result)
                      args, = val

                      result = block_var args
                    
    result
end

def _reduce_365(val, _values, result)
                      args, _, _, splat = val

                      result = block_var args, "*#{splat}".to_sym
                    
    result
end

def _reduce_366(val, _values, result)
                      args, _, _, splat, _, args2 = val

                      result = block_var args, "*#{splat}".to_sym, args2
                    
    result
end

def _reduce_367(val, _values, result)
                      args, _, _ = val

                      result = block_var args, :*
                    
    result
end

def _reduce_368(val, _values, result)
                      args, _, _, _, args2 = val

                      result = block_var args, :*, args2
                    
    result
end

def _reduce_369(val, _values, result)
                      _, splat = val

                      result = block_var :"*#{splat}"
                    
    result
end

def _reduce_370(val, _values, result)
                      _, splat, _, args = val

                      result = block_var :"*#{splat}", args
                    
    result
end

def _reduce_371(val, _values, result)
                      result = block_var :*
                    
    result
end

def _reduce_372(val, _values, result)
                      _, _, args = val

                      result = block_var :*, args
                    
    result
end

def _reduce_373(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_374(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_375(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_376(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_377(val, _values, result)
                      result = args val
                    
    result
end

# reduce 378 omitted

def _reduce_379(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_380(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_381(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_382(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_383(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_384(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_385(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_386(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_387(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_388(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_389(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_390(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_391(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_392(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_393(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_394(val, _values, result)
 result = 0 
    result
end

# reduce 395 omitted

def _reduce_396(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_397(val, _values, result)
                      self.lexer.command_start = true
                      result = s(:args)
                    
    result
end

def _reduce_398(val, _values, result)
                      result = args val
                    
    result
end

# reduce 399 omitted

def _reduce_400(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_401(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_402(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_403(val, _values, result)
                      result = s(:shadow, val[0].to_sym)
                    
    result
end

# reduce 404 omitted

def _reduce_405(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

                      result = lexer.lpar_beg
                      lexer.paren_nest += 1
                      lexer.lpar_beg = lexer.paren_nest
                    
    result
end

def _reduce_406(val, _values, result)
                      lpar, args, body = val
                      lexer.lpar_beg = lpar

                      call = new_call nil, :lambda
                      result = new_iter call, args, body
                      self.env.unextend
                    
    result
end

def _reduce_407(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_408(val, _values, result)
                      result = val[0]
                      result = 0 if result == s(:args)
                    
    result
end

def _reduce_409(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_410(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_411(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_412(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_413(val, _values, result)
                      args   = val[2]
                      body   = val[4]
                      result = new_iter nil, args, body
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_414(val, _values, result)
                      # TODO:
                      ## if (nd_type($1) == NODE_YIELD) {
                      ##     compile_error(PARSER_ARG "block given to yield");

                      syntax_error "Both block arg and actual block given." if
                        val[0].block_pass?

                      val = invert_block_call val if inverted? val

                      result = val[1]
                      result.insert 1, val[0]
                    
    result
end

def _reduce_415(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_416(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_417(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_418(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_419(val, _values, result)
                      args = self.call_args val[2..-1]
                      result = val[0].concat args.sexp_body
                    
    result
end

def _reduce_420(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]
                    
    result
end

def _reduce_421(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_422(val, _values, result)
                      result = new_call val[0], val[2].to_sym
                    
    result
end

def _reduce_423(val, _values, result)
                      result = new_call val[0], :call, val[2], val[1]
                    
    result
end

def _reduce_424(val, _values, result)
                      result = new_call val[0], :call, val[2]
                    
    result
end

def _reduce_425(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_426(val, _values, result)
                      result = s(:zsuper)
                    
    result
end

def _reduce_427(val, _values, result)
                      result = new_aref val
                    
    result
end

def _reduce_428(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_429(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_430(val, _values, result)
                      _, line, args, _, body, _ = val

                      result = new_iter nil, args, body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_431(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_432(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_433(val, _values, result)
                      _, line, args, _, body, _ = val

                      result = new_iter nil, args, body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_434(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_435(val, _values, result)
                      result = new_when(val[2], val[4])
                      result.line = val[1]
                      result << val[5] if val[5]
                    
    result
end

# reduce 436 omitted

# reduce 437 omitted

def _reduce_438(val, _values, result)
                      (_, line), klasses, var, _, body, rest = val

                      klasses ||= s(:array)
                      klasses << new_assign(var, s(:gvar, :"$!")) if var
                      klasses.line line

                      result = new_resbody(klasses, body)
                      result << rest if rest # UGH, rewritten above
                    
    result
end

def _reduce_439(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_440(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

# reduce 441 omitted

# reduce 442 omitted

def _reduce_443(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 444 omitted

def _reduce_445(val, _values, result)
                      _, body = val

                      result = body || s(:nil)
                    
    result
end

# reduce 446 omitted

def _reduce_447(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

def _reduce_448(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

# reduce 449 omitted

def _reduce_450(val, _values, result)
                      val[0] = s(:dstr, val[0].value) if val[0].sexp_type == :evstr
                      result = val[0]
                    
    result
end

def _reduce_451(val, _values, result)
                      debug20 23, val, result
                    
    result
end

# reduce 452 omitted

def _reduce_453(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_454(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_455(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_456(val, _values, result)
                      result = new_xstring val[1]
                    
    result
end

def _reduce_457(val, _values, result)
                      result = new_regexp val
                    
    result
end

def _reduce_458(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_459(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_460(val, _values, result)
                      result = new_word_list
                    
    result
end

def _reduce_461(val, _values, result)
                      result = val[0].dup << new_word_list_entry(val)
                    
    result
end

# reduce 462 omitted

def _reduce_463(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_464(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_465(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_466(val, _values, result)
                      result = new_symbol_list
                    
    result
end

def _reduce_467(val, _values, result)
                      result = val[0].dup << new_symbol_list_entry(val)
                    
    result
end

def _reduce_468(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_469(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_470(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_471(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_472(val, _values, result)
                      result = new_qword_list
                    
    result
end

def _reduce_473(val, _values, result)
                      result = val[0].dup << new_qword_list_entry(val)
                    
    result
end

def _reduce_474(val, _values, result)
                      result = new_qsym_list
                    
    result
end

def _reduce_475(val, _values, result)
                      result = val[0].dup << new_qsym_list_entry(val)
                    
    result
end

def _reduce_476(val, _values, result)
                      result = s(:str, "")
                    
    result
end

def _reduce_477(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_478(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_479(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_480(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_481(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_482(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_483(val, _values, result)
                      result = lexer.lex_strterm

                      lexer.lex_strterm = nil
                      lexer.lex_state = :expr_beg # TODO: expr_value ?
                    
    result
end

def _reduce_484(val, _values, result)
                      lexer.lex_strterm = val[1]
                      result = s(:evstr, val[2])
                    
    result
end

def _reduce_485(val, _values, result)
                      result = [lexer.lex_strterm,
                                lexer.brace_nest,
                                lexer.string_nest, # TODO: remove
                                lexer.cond.store,
                                lexer.cmdarg.store,
                                lexer.lex_state,
                               ]

                      lexer.lex_strterm = nil
                      lexer.brace_nest  = 0
                      lexer.string_nest = 0

                      lexer.lex_state   = :expr_value
                    
    result
end

def _reduce_486(val, _values, result)
                      # TODO: tRCURLY -> tSTRING_END
                      _, memo, stmt, _ = val

                      lex_strterm, brace_nest, string_nest, oldcond, oldcmdarg, oldlex_state = memo

                      lexer.lex_strterm = lex_strterm
                      lexer.brace_nest  = brace_nest
                      lexer.string_nest = string_nest

                      lexer.cond.restore oldcond
                      lexer.cmdarg.restore oldcmdarg

                      lexer.lex_state = oldlex_state

                      case stmt
                      when Sexp then
                        case stmt.sexp_type
                        when :str, :dstr, :evstr then
                          result = stmt
                        else
                          result = s(:evstr, stmt)
                        end
                      when nil then
                        result = s(:evstr)
                      else
                        debug20 25
                        raise "unknown string body: #{stmt.inspect}"
                      end
                    
    result
end

def _reduce_487(val, _values, result)
 result = s(:gvar, val[0].to_sym) 
    result
end

def _reduce_488(val, _values, result)
 result = s(:ivar, val[0].to_sym) 
    result
end

def _reduce_489(val, _values, result)
 result = s(:cvar, val[0].to_sym) 
    result
end

# reduce 490 omitted

def _reduce_491(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1].to_sym
                    
    result
end

def _reduce_492(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

# reduce 493 omitted

# reduce 494 omitted

# reduce 495 omitted

# reduce 496 omitted

def _reduce_497(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1]

                      result ||= s(:str, "")

                      case result.sexp_type
                      when :dstr then
                        result.sexp_type = :dsym
                      when :str then
                        result = s(:lit, result.last.to_sym)
                      when :evstr then
                        result = s(:dsym, "", result)
                      else
                        debug20 26, val, result
                      end
                    
    result
end

# reduce 498 omitted

def _reduce_499(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

# reduce 500 omitted

# reduce 501 omitted

# reduce 502 omitted

# reduce 503 omitted

# reduce 504 omitted

# reduce 505 omitted

# reduce 506 omitted

# reduce 507 omitted

# reduce 508 omitted

def _reduce_509(val, _values, result)
 result = s(:nil)   
    result
end

def _reduce_510(val, _values, result)
 result = s(:self)  
    result
end

def _reduce_511(val, _values, result)
 result = s(:true)  
    result
end

def _reduce_512(val, _values, result)
 result = s(:false) 
    result
end

def _reduce_513(val, _values, result)
 result = s(:str, self.file) 
    result
end

def _reduce_514(val, _values, result)
 result = s(:lit, lexer.lineno) 
    result
end

def _reduce_515(val, _values, result)
                      result =
                        if defined? Encoding then
                          s(:colon2, s(:const, :Encoding), :UTF_8)
                        else
                          s(:str, "Unsupported!")
                        end
                    
    result
end

def _reduce_516(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_517(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_518(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_519(val, _values, result)
                      result = self.assignable val[0]
                      debug20 29, val, result
                    
    result
end

def _reduce_520(val, _values, result)
 result = s(:nth_ref,  val[0]) 
    result
end

def _reduce_521(val, _values, result)
 result = s(:back_ref, val[0]) 
    result
end

def _reduce_522(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_523(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_524(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_525(val, _values, result)
                      yyerrok
                      result = nil
                      debug20 30, val, result
                    
    result
end

def _reduce_526(val, _values, result)
                      result = val[1]
                      self.lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                      # TODO:
                      # $<num>$ = parser->parser_in_kwarg;
                      # parser->parser_in_kwarg = 1;
                    
    result
end

def _reduce_527(val, _values, result)
                      # TODO: parser->parser_in_kwarg = $<num>1;
                      result = val[0]
                      self.lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                    
    result
end

def _reduce_528(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_529(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_530(val, _values, result)
                      result = args val
                    
    result
end

# reduce 531 omitted

def _reduce_532(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_533(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_534(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_535(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_536(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_537(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_538(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_539(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_540(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_541(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_542(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_543(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_544(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_545(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_546(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_547(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_548(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_549(val, _values, result)
                      yyerror "formal argument cannot be a constant"
                    
    result
end

def _reduce_550(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"
                    
    result
end

def _reduce_551(val, _values, result)
                      yyerror "formal argument cannot be a global variable"
                    
    result
end

def _reduce_552(val, _values, result)
                      yyerror "formal argument cannot be a class variable"
                    
    result
end

# reduce 553 omitted

def _reduce_554(val, _values, result)
                      identifier = val[0].to_sym
                      self.env[identifier] = :lvar

                      result = identifier
                    
    result
end

# reduce 555 omitted

# reduce 556 omitted

def _reduce_557(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_558(val, _values, result)
                      case val[0]
                      when Symbol then
                        result = s(:args)
                        result << val[0]
                      when Sexp then
                        result = val[0]
                      else
                        debug20 32
                        raise "Unknown f_arg type: #{val.inspect}"
                      end
                    
    result
end

def _reduce_559(val, _values, result)
                      list, _, item = val

                      if list.sexp_type == :args then
                        result = list
                      else
                        result = s(:args, list)
                      end

                      result << item
                    
    result
end

# reduce 560 omitted

def _reduce_561(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

def _reduce_562(val, _values, result)
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier))
                    
    result
end

def _reduce_563(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

def _reduce_564(val, _values, result)
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier))
                    
    result
end

# reduce 565 omitted

def _reduce_566(val, _values, result)
                      list, _, item = val
                      result = list << item.last
                    
    result
end

# reduce 567 omitted

def _reduce_568(val, _values, result)
                      result = args val
                    
    result
end

# reduce 569 omitted

# reduce 570 omitted

def _reduce_571(val, _values, result)
                      result = :"**#{val[1]}"
                    
    result
end

def _reduce_572(val, _values, result)
                      result = :"**"
                    
    result
end

def _reduce_573(val, _values, result)
                      result = self.assignable val[0], val[2]
                      # TODO: detect duplicate names
                    
    result
end

def _reduce_574(val, _values, result)
                      result = self.assignable val[0], val[2]
                    
    result
end

def _reduce_575(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_576(val, _values, result)
                      result = val[0]
                      result << val[2]
                    
    result
end

def _reduce_577(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_578(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 579 omitted

# reduce 580 omitted

def _reduce_581(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      name = val[1].to_sym
                      self.assignable name
                      result = :"*#{name}"
                    
    result
end

def _reduce_582(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = name
                    
    result
end

# reduce 583 omitted

# reduce 584 omitted

def _reduce_585(val, _values, result)
                      identifier = val[1].to_sym

                      self.env[identifier] = :lvar
                      result = "&#{identifier}".to_sym
                    
    result
end

def _reduce_586(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_587(val, _values, result)
                      result = nil
                    
    result
end

# reduce 588 omitted

def _reduce_589(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_590(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result.sexp_type == :lit
                    
    result
end

def _reduce_591(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_592(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 593 omitted

def _reduce_594(val, _values, result)
                      list = val[0].dup
                      more = val[2].sexp_body
                      list.push(*more) unless more.empty?
                      result = list
                      result.sexp_type = :hash
                    
    result
end

def _reduce_595(val, _values, result)
                      result = s(:array, val[0], val[2])
                    
    result
end

def _reduce_596(val, _values, result)
                      result = s(:array, s(:lit, val[0][0].to_sym), val.last)
                    
    result
end

def _reduce_597(val, _values, result)
                      _, sym, _, value = val
                      sym.sexp_type = :dsym
                      result = s(:array, sym, value)
                    
    result
end

def _reduce_598(val, _values, result)
                      raise "not yet: #{val.inspect}"
                      # result = s(:array, s(:lit, val[1].to_sym), val[1])
                    
    result
end

def _reduce_599(val, _values, result)
                      result = s(:array, s(:kwsplat, val[1]))
                    
    result
end

# reduce 600 omitted

# reduce 601 omitted

# reduce 602 omitted

# reduce 603 omitted

# reduce 604 omitted

# reduce 605 omitted

# reduce 606 omitted

# reduce 607 omitted

# reduce 608 omitted

# reduce 609 omitted

# reduce 610 omitted

# reduce 611 omitted

# reduce 612 omitted

# reduce 613 omitted

# reduce 614 omitted

# reduce 615 omitted

# reduce 616 omitted

# reduce 617 omitted

# reduce 618 omitted

# reduce 619 omitted

# reduce 620 omitted

# reduce 621 omitted

def _reduce_622(val, _values, result)
 yyerrok 
    result
end

# reduce 623 omitted

# reduce 624 omitted

def _reduce_625(val, _values, result)
 yyerrok 
    result
end

def _reduce_626(val, _values, result)
 result = nil; 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Ruby22Parser
