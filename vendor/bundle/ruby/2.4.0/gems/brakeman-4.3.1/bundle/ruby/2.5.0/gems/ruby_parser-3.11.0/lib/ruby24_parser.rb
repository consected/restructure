#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'
class Ruby24Parser < RubyParser::Parser


require "ruby_lexer"
require "ruby_parser_extras"

# :stopdoc:

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-607,272,530,-101,-104,-98,272,-607,-607,-607,757,272,222,-607,-607',
'-616,-607,94,95,-105,-84,83,223,-104,-507,-607,666,630,585,84,748,-507',
'627,116,749,-70,-607,-607,115,-607,-607,-607,-607,-607,-96,-100,116',
'826,223,591,223,115,-91,-92,-94,-103,-100,457,-99,-105,665,856,826,585',
'-103,585,-98,-607,-607,-607,-607,-607,-607,-607,-607,-607,-607,-607',
'-607,-607,-607,737,-604,-607,-607,-607,709,650,271,-604,629,-607,-99',
'271,-607,626,96,97,271,-607,505,-607,-264,-607,-607,-607,-607,-607,-607',
'-607,-89,-607,-607,-607,-106,503,756,-101,-104,-91,-92,-94,-101,-104',
'-96,-504,-607,-607,-95,-93,-106,-607,-504,-504,-504,116,-102,-504,-504',
'-504,115,-504,116,-607,-102,940,-105,115,585,-504,-91,-504,-504,-504',
'-91,-92,-94,-91,-92,-94,-94,-504,-504,-90,-504,-504,-504,-504,-504,585',
'-100,-263,-91,-92,-94,-100,-93,116,-103,116,-98,116,115,-103,115,-98',
'115,-101,-106,500,-519,708,-504,-504,-504,-504,-504,-504,-504,-504,-504',
'-504,-504,-504,-504,-504,-99,737,-504,-504,-504,-99,-504,-504,-603,737',
'-504,887,-102,-504,-504,272,-504,791,-504,792,-504,772,-504,-504,-504',
'-504,-504,-504,-504,771,-504,770,-504,219,220,888,-603,-93,-106,94,95',
'-99,274,-106,-102,-504,-504,-504,-504,-102,-504,-601,-504,265,-105,-518',
'116,-507,530,-105,266,115,-504,-504,-507,-507,-507,219,220,-507,-507',
'-507,-93,-507,-101,-93,-103,116,-603,666,-418,-507,115,-507,-507,-507',
'-92,-97,219,220,-93,490,-100,-507,-507,222,-507,-507,-507,-507,-507',
'116,271,116,-507,890,115,714,115,116,611,-507,-98,665,115,-105,-601',
'-93,96,97,-507,666,893,223,-507,-507,-507,-507,-507,-507,-507,-507,-507',
'-507,-507,-507,-507,-507,-601,-518,-507,-507,-507,666,-507,-507,542',
'223,-507,544,1010,-507,-507,611,-507,665,-507,223,-507,-600,-507,-507',
'-507,-507,-507,-507,-507,265,-507,-507,-507,613,612,609,266,215,-519',
'665,223,856,826,-89,1017,-507,-507,-507,-507,611,-507,116,-507,1015',
'681,243,115,-607,-98,896,-510,898,-507,-507,-607,-607,-607,-510,570',
'-607,-607,-607,542,-607,-504,541,613,612,631,573,-90,-504,-607,-607',
'-607,-607,-600,240,219,220,-504,242,241,-607,-607,-99,-607,-607,-607',
'-607,-607,565,216,562,561,560,542,563,-600,544,613,612,581,580,565,777',
'562,561,560,767,563,900,-607,223,-607,-607,-607,-607,-607,-607,-607',
'-607,-607,-607,-607,-607,-607,-607,217,-504,-607,-607,-607,215,793,-607',
'574,902,-607,903,454,-607,-607,611,-607,459,-607,-91,-607,455,-607,-607',
'-607,-607,-607,-607,-607,570,-607,-607,-607,542,-100,458,544,-607,611',
'456,573,986,-97,611,-607,-607,-607,-607,-607,-603,-607,-289,-607,-607',
'852,696,116,-106,-289,-289,-289,115,-607,-102,-289,-289,911,-289,-337',
'-262,216,-607,915,581,580,-337,613,612,243,-290,219,220,215,917,-337',
'769,-290,-289,-289,967,-289,-289,-289,-289,-289,-290,-289,918,753,613',
'612,624,-607,-289,613,612,619,574,-604,644,240,643,-289,611,242,241',
'616,223,-289,-289,-289,-289,-289,-289,-289,-289,-289,-289,-289,-289',
'-289,-289,215,-337,-289,-289,-289,714,649,594,921,116,-289,923,-290',
'-289,115,216,592,925,-289,-94,-289,-92,-289,-289,-289,-289,-289,-289',
'-289,-289,-289,215,-289,-290,-103,927,-101,927,523,223,-290,611,613',
'612,-289,-289,-289,521,-95,-290,-289,-289,-289,-289,219,220,-289,-289',
'-289,-514,-289,-517,-289,-104,933,216,-514,-509,-517,-513,-289,-289',
'-289,409,-509,-516,-513,-517,411,410,-289,-289,-516,-289,-289,-289,-289',
'-289,-504,740,-512,-516,-511,215,215,-504,216,-512,-290,-511,967,214',
'613,612,614,581,580,219,220,753,212,-289,-289,-289,-289,-289,-289,-289',
'-289,-289,-289,-289,-289,-289,-289,935,-517,-289,-289,-289,-515,794',
'-289,591,937,-289,733,-515,-289,-289,-516,-289,611,-289,412,-289,407',
'-289,-289,-289,-289,-289,-289,-289,391,-289,116,-289,216,216,731,115',
'565,223,562,561,560,570,563,-289,-289,-289,-289,-289,388,-289,-289,-289',
'573,385,947,-604,-281,948,223,-289,951,-289,-104,-281,-281,-281,-265',
'730,-281,-281,-281,382,-281,215,568,729,618,613,612,609,533,721,-281',
'-281,-281,581,580,215,719,455,717,961,-281,-281,751,-281,-281,-281,-281',
'-281,358,715,968,753,969,714,-280,971,-289,972,711,223,964,-280,562',
'561,560,505,563,574,705,622,-280,-281,-281,-281,-281,-281,-281,-281',
'-281,-281,-281,-281,-281,-281,-281,702,216,-281,-281,-281,701,988,-281',
'322,990,-281,991,625,-281,-281,216,-281,628,-281,995,-281,696,-281,-281',
'-281,-281,-281,-281,-281,714,-281,1000,-281,565,-280,562,561,560,570',
'563,119,120,121,122,123,-281,-281,-281,-281,573,-281,-426,-281,119,120',
'121,122,123,-426,-426,-426,1002,-281,-426,-426,-426,565,-426,562,561',
'560,568,563,1004,1006,1006,-426,-426,-426,535,879,880,581,580,881,110',
'111,-426,-426,223,-426,-426,-426,-426,-426,565,1013,562,561,560,321',
'563,262,635,723,1018,565,685,562,561,560,1019,563,726,927,927,574,927',
'-426,-426,-426,-426,-426,-426,-426,-426,-426,-426,-426,-426,-426,-426',
'1024,723,-426,-426,-426,-84,988,-426,223,274,-426,218,723,-426,-426',
'-262,-426,637,-426,223,-426,726,-426,-426,-426,-426,-426,-426,-426,243',
'-426,-426,-426,641,223,565,-604,562,561,560,-603,563,701,223,-609,-426',
'-426,642,-426,243,-426,-609,-609,-609,211,243,-609,-609,-609,243,-609',
'240,-426,243,988,242,241,238,239,-609,-609,-609,-609,723,1047,257,258',
'1048,1049,1050,-609,-609,932,-609,-609,-609,-609,-609,1006,1006,1006',
'240,223,246,210,242,241,238,239,209,927,244,565,245,562,561,560,988',
'563,243,112,-609,-609,-609,-609,-609,-609,-609,-609,-609,-609,-609,-609',
'-609,-609,505,274,-609,-609,-609,539,243,-609,503,696,-609,223,531,-609',
'-609,723,-609,653,-609,274,-609,527,-609,-609,-609,-609,-609,-609,-609',
'1006,-609,-609,-609,565,274,562,561,560,570,563,119,120,121,122,123',
'-609,-609,-609,-609,573,-609,-297,-609,119,120,121,122,123,-297,-297',
'-297,696,-609,-297,-297,-297,262,-297,243,796,565,568,562,561,560,243',
'563,-297,-297,274,826,3,581,580,257,258,223,-297,-297,223,-297,-297',
'-297,-297,-297,964,277,562,561,560,240,563,246,223,242,241,238,239,723',
'223,244,565,245,562,561,560,574,563,-297,-297,-297,-297,-297,-297,-297',
'-297,-297,-297,-297,-297,-297,-297,545,243,-297,-297,-297,490,850,-297',
'223,277,-297,826,860,-297,-297,524,-297,723,-297,223,-297,490,-297,-297',
'-297,-297,-297,-297,-297,591,-297,401,-297,240,517,516,595,242,241,238',
'239,778,596,223,-608,-297,-297,-69,-297,,-297,-608,-608,-608,,,-608',
'-608,-608,243,-608,565,-297,562,561,560,,563,,-608,-608,-608,-608,,',
'257,258,,,,-608,-608,,-608,-608,-608,-608,-608,,,,240,,246,,242,241',
'238,239,723,,244,,245,,,,,,,,-608,-608,-608,-608,-608,-608,-608,-608',
'-608,-608,-608,-608,-608,-608,,,-608,-608,-608,,,-608,,,-608,,,-608',
'-608,,-608,,-608,,-608,,-608,-608,-608,-608,-608,-608,-608,,-608,-608',
'-608,565,,562,561,560,570,563,,,,,,-608,-608,-608,-608,573,-608,-627',
'-608,,,,,,-627,-627,-627,,-608,-627,-627,-627,,-627,243,,,568,,,,,-627',
'-627,-627,,,,581,580,257,258,,-627,-627,,-627,-627,-627,-627,-627,,',
',,,240,,246,,242,241,238,239,,,244,,245,,,,574,,-627,-627,-627,-627',
'-627,-627,-627,-627,-627,-627,-627,-627,-627,-627,,,-627,-627,-627,',
',-627,,274,-627,,,-627,-627,,-627,,-627,,-627,,-627,-627,-627,-627,-627',
'-627,-627,,-627,-627,-627,,,,,,,,,,,,,-627,-627,,-627,,-627,297,72,73',
'74,12,60,,,,66,67,-627,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,654,11,48,,13,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,243,247,252,253,254,249,251,259,260,255,256',
',236,237,,,257,258,,43,,,36,,,61,62,,,63,,38,240,,246,47,242,241,238',
'239,250,248,244,23,245,,,,91,83,85,86,87,89,,,,84,92,,261,,-239,,,65',
',,81,88,90,,,96,97,297,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34',
'75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,654,11,48,,13,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,243,247,252,253,254,249',
'251,259,260,255,256,,236,237,,,257,258,,43,,,36,,,61,62,,,63,,38,240',
',246,47,242,241,238,239,250,248,244,23,245,,,,91,83,85,86,87,89,,,,84',
'92,,261,,,,,65,,,81,88,90,,,96,97,297,72,73,74,12,60,,,,66,67,,,,70',
',68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,638,11',
'48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,243',
'247,252,253,254,249,251,259,260,255,256,,236,237,,,257,258,,43,,,36',
',,61,62,,,63,,38,240,,246,47,242,241,238,239,250,248,244,23,245,,,,91',
'83,85,86,87,89,,,,84,92,,261,,,,,65,,,81,88,90,,,96,97,297,72,73,74',
'12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105',
'106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94',
'95,,45,46,44,243,247,252,253,254,249,251,259,260,255,256,,236,237,,',
'257,258,,43,,,36,,,61,62,,,63,,38,240,,246,47,242,241,238,239,250,248',
'244,23,245,,,,91,83,85,86,87,89,,,,84,92,,261,,,,,65,,,81,88,90,,,96',
'97,297,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,243,247,252,253,254,249,251,259,260,255',
'256,,236,237,,,257,258,,43,,,36,,,61,62,,,63,,38,240,,246,47,242,241',
'238,239,250,248,244,23,245,,,,91,83,85,86,87,89,,,,84,92,,261,,,,,65',
',,81,88,90,,,96,97,297,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34',
'75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,243,247,252,253,254,249',
'251,259,260,255,256,,236,237,,,257,258,,43,,,36,,,61,62,,,63,,38,240',
',246,47,242,241,238,239,250,248,244,23,245,,,,91,83,85,86,87,89,,,,84',
'92,,261,,,,,65,,,81,88,90,,,96,97,297,72,73,74,12,60,,,,66,67,,,,70',
',68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48',
',13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,243,247',
'252,253,254,249,251,259,260,255,256,,236,237,,,257,258,,43,,,36,,,61',
'62,,,63,,38,240,,246,47,242,241,238,239,250,248,244,23,245,,,,91,83',
'85,86,87,89,,,,84,92,,261,,,,,65,,,81,88,90,,,96,97,297,72,73,74,12',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,243,247,252,253,254,249,251,259,260,255,256,,236,237,,,257',
'258,,43,,,36,,,61,62,,,63,,38,240,,246,47,242,241,238,239,250,248,244',
'23,245,,,,91,83,85,86,87,89,,,,84,92,,261,,,,,65,,,81,88,90,,,96,97',
'297,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30',
'104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,243,247,252,253,254,249,251,259,260,255,256',
',236,237,,,257,258,,43,,,36,,,61,62,,,63,,38,240,,246,47,242,241,238',
'239,250,248,244,23,245,,,,91,83,85,86,87,89,,,,84,92,,261,,,,,65,,,81',
'88,90,,,96,97,297,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,243,247,252,253,254,249,251',
'259,260,255,256,,236,237,,,257,258,,43,,,36,,,61,62,,,63,,38,240,,246',
'47,242,241,238,239,250,248,244,23,245,,,,91,83,85,86,87,89,,,,84,92',
',261,,,,,65,,,81,88,90,,,96,97,297,72,73,74,12,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,243,247,252',
'253,254,249,251,259,260,255,256,,236,237,,,257,258,,43,,,36,,,61,62',
',,63,,38,240,,246,47,242,241,238,239,250,248,244,23,245,,,,91,83,85',
'86,87,89,,,,84,92,,261,,,,,65,,,81,88,90,,,96,97,297,72,73,74,12,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,',
',22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,243,247,252,253,254,249,251,259,260,255,256,,236,237,,,257',
'258,,43,,,299,,,61,62,,,63,,38,240,,246,47,242,241,238,239,250,248,244',
'23,245,,,,91,83,85,86,87,89,,,,84,92,,261,,,,,65,,,81,88,90,,,96,97',
'297,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30',
'104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,243,247,252,253,254,249,251,259,260,255,256',
',236,237,,,257,258,,43,,,36,,,61,62,,,63,,38,240,,246,47,242,241,238',
'239,250,248,244,23,245,,,,91,83,85,86,87,89,,,,84,92,,261,,,,,65,,,81',
'88,90,,,96,97,297,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,243,247,252,253,254,249,251',
'259,260,255,256,,236,237,,,257,258,,43,,,36,,,61,62,,,63,,38,240,,246',
'47,242,241,238,239,250,248,244,23,245,,,,91,83,85,86,87,89,,,,84,92',
',261,,,,,65,,,81,88,90,,,96,97,297,72,73,74,12,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,243,247,252',
'253,254,249,251,259,260,255,256,,236,237,,,257,258,,43,,,36,,,61,62',
',,63,,38,240,,246,47,242,241,238,239,250,248,244,23,245,,,,91,83,85',
'86,87,89,,,,84,92,223,261,,,,,65,,,81,88,90,,,96,97,297,72,73,74,12',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,243,247,252,253,254,249,251,259,260,255,256,,236,237,,,257',
'258,,43,,,36,,,61,62,,,63,,38,240,,246,47,242,241,238,239,250,248,244',
'23,245,,,,91,83,85,86,87,89,,,,84,92,,261,,,,,65,,,81,88,90,,,96,97',
'297,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30',
'104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,243,247,252,253,254,249,251,259,260,255,256',
',236,237,,,257,258,,43,,,36,,,61,62,,,63,,38,240,,246,47,242,241,238',
'239,250,248,244,23,245,,,,91,83,85,86,87,89,,,,84,92,,261,,,,,65,,,81',
'88,90,,,96,97,297,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,243,247,252,253,254,249,251',
',,255,256,,,,,,257,258,,43,,,299,,,61,62,,,63,,38,240,,246,47,242,241',
'238,239,250,248,244,23,245,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,',
'81,88,90,,,96,97,297,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,243,247,252,253,254,249',
'251,259,260,255,256,,-628,-628,,,257,258,,43,,,36,,,61,62,,,63,,38,240',
',246,47,242,241,238,239,250,248,244,23,245,,,,91,83,85,86,87,89,,,,84',
'92,,,,,,,65,,,81,88,90,,,96,97,297,72,73,74,12,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,243,247,252',
'253,254,249,251,259,260,255,256,,-628,-628,,,257,258,,43,,,36,,,61,62',
',,63,,38,240,,246,47,242,241,238,239,250,248,244,23,245,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,297,72,73,74,12,60,,,',
'66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22',
',,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,243,-628,-628,-628,-628,249,251,,,-628,-628,,,,,,257,258,,43,',
',36,,,61,62,,,63,,38,240,,246,47,242,241,238,239,250,248,244,23,245',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,8,72,73,74',
'12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105',
'106,,,22,,,,,,11,48,10,13,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,243,-628,-628,-628,-628,249,251,,,-628,-628,,,,,,257',
'258,,43,,,36,,,61,62,,,63,,38,240,,246,47,242,241,238,239,250,248,244',
'23,245,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,297',
'72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,243,-628,-628,-628,-628,249,251,,,-628,-628,,,',
',,257,258,,43,,,36,,,61,62,,,63,,38,240,,246,47,242,241,238,239,250',
'248,244,23,245,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,297,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,243,-628,-628,-628,-628,249,251,,,-628',
'-628,,,,,,257,258,,43,,,36,,,61,62,,,63,,38,240,,246,47,242,241,238',
'239,250,248,244,23,245,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,297,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,',
',,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,243,247,252,253,254,249,251,259',
',255,256,,,,,,257,258,,43,,,36,,,61,62,,,63,,38,240,,246,47,242,241',
'238,239,250,248,244,23,245,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,',
'81,88,90,,,96,97,297,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,243,-628,-628,-628,-628',
'249,251,,,-628,-628,,,,,,257,258,,43,,,36,,,61,62,,,63,,38,240,,246',
'47,242,241,238,239,250,248,244,23,245,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,8,72,73,74,12,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,10,13,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,243,-628,-628',
'-628,-628,249,251,,,-628,-628,,,,,,257,258,,43,,,36,,,61,62,,,63,,38',
'240,,246,47,242,241,238,239,250,248,244,23,245,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,297,72,73,74,12,60,,,,66,67,,,',
'70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11',
'48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,243',
',,,,,,,,,,,,,,,257,258,,43,,,299,,243,61,62,,,63,,38,240,,246,47,242',
'241,238,239,257,258,,23,,,,,91,83,85,86,87,89,,,240,84,92,,242,241,238',
'239,,65,,,81,88,90,,,96,97,297,72,73,74,12,60,,,,66,67,,,,70,,68,69',
'71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,243,,,,,,,,,',
',,,,,,257,258,,43,,,36,,,61,62,,,63,,38,240,,246,47,242,241,238,239',
',,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,297',
'72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,61,62,,,63,,38,,,',
'47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311',
'317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,',
',,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,290',
'102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,',
'63,,286,,284,,47,,,,,,,,233,,,,,91,287,85,86,87,89,,,,84,288,,,,,,,65',
',291,81,88,90,,,96,97,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34',
'75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,10,13,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,43',
',,36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,,48,,,108,107,109',
'98,59,100,99,101,290,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,',
',228,,,234,,,61,62,,,63,,286,,284,,47,,,,,,,,233,,,,,91,287,85,86,87',
'89,,,,84,288,,,,,,,65,,291,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,',
',70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,',
'48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,',
',,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,235,,,,',
',,48,,,108,107,109,98,59,100,99,101,290,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,286,,284,,47,,,,,,,,233,',
',,,91,287,85,86,87,89,,,,84,288,,,,,,,65,,291,81,88,90,,,96,97,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105',
'106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,290,102,110,111,,94',
'95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,286,,284,,47',
',,,,,,,233,,,,,91,287,85,86,87,89,,,,84,288,,,,,,,65,,291,81,88,90,',
',96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,290',
'102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,',
'63,,286,,284,,47,,,,,,,,233,,,,,91,287,85,86,87,89,,,,84,288,,,,,,,65',
',291,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315',
'75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,312,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,,,318,,,,,,,,,,,,,,,,,,,,308,',
',304,,,61,62,,,63,,303,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,',
',,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314',
'315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,312,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,,,318,,,,,,,,,,,,,,,,,,,,308',
',,234,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,320',
',,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315',
'75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228',
',,234,,,61,62,,,63,,678,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84',
'92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,312,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,,,318,,,,,,,,,,,,,,,,',
',,,978,,,234,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84',
'92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106',
',,235,,,,,,,48,,,108,107,109,98,59,100,99,101,290,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,286,,,,47,,,,,',
',,233,,,,,91,287,85,86,87,89,,,,84,288,,,,,,,65,,291,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,116,,,,,115,65,,,81,88,90,,',
'96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311',
'317,104,103,105,106,,,235,,,,,,,312,,,108,107,109,98,59,100,99,101,',
'102,110,111,,94,95,,,,318,,,,,,,,,,,,,,,,,,,,352,,,36,,,61,62,,,63,',
'38,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,',
'96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311',
'317,104,103,105,106,,,235,,,,,,,312,,,108,107,109,98,59,100,99,101,',
'102,110,111,,94,95,,,,318,,,,,,,,,,,,,,,,,,,,905,,,234,,,61,62,,,63',
',,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311',
'317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,',
',,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310',
'311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101',
'290,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62',
',,63,,,,284,,47,,,,,,,,233,,,,,91,287,85,86,87,89,,,,84,288,,,,,,,65',
',291,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,',
'61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,10,13,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,',
'36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,',
',,,,401,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228',
',,234,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,',
',234,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,',
',,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,',
',234,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,',
',,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,',
',234,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,',
',,,,,65,,,81,88,90,,,96,97,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,43',
',,36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228',
',,234,,,61,62,,,63,,417,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84',
'92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228',
',,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,,48,,,108,107,109',
'98,59,100,99,101,290,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,',
',228,,,234,,,61,62,,,63,,286,,284,,47,,,,,,,,233,,,,,91,287,85,86,87',
'89,,,,84,288,,,,,,,65,,291,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,',
',70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,',
'48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,',
',,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,235,,,,',
',,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,',
',,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,417,,,,47,,,,,,,,233,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22',
',,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83',
'85,86,87,89,,,,84,92,223,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22',
',,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,',
'235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,286,,,,47,,,,,,,,233',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103',
'105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,',
',,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317',
'104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,417',
',,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310',
'311,317,104,103,105,106,,,235,,,,,,,312,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,,,318,,,,,,,,,,,,,,,,,,,,308,,,304,,,61,62,,,63',
',,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311',
'317,104,103,105,106,,,235,,,,,,,312,,,108,107,109,98,59,100,99,101,',
'102,110,111,,94,95,,,,318,,,,,,,,,,,,,,,,,,,,308,,,304,,,61,62,,,63',
',,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311',
'317,104,103,105,106,,,235,,,,,,,312,,,108,107,109,98,59,100,99,101,',
'102,110,111,,94,95,,,,318,,,,,,,,,,,,,,,,,,,,308,,,304,,,61,62,,,63',
',,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311',
'317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,',
',,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310',
'311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,535,,61,62',
',,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,',
',32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,',
',63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,',
'310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99',
'101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61',
'62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,',
',81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76',
',,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234',
',,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,',
',65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315',
'75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109',
'98,59,100,99,101,290,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,',
',228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,287,85,86,87,89,,',
',84,288,,,,,,,65,,291,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,',
'68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,,48,,',
'108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,',
',,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,',
',,,,48,,,108,107,109,98,59,100,99,101,290,102,110,111,,94,95,,45,46',
'44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,284,,47,,,,,,,,233,',
',,,91,287,85,86,87,89,,,,84,288,,,,,,,65,,291,81,88,90,,,96,97,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103',
'105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,290,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,678,,284',
',47,,,,,,,,233,,,,,91,287,85,86,87,89,,,,84,288,,,,,,,65,,291,81,88',
'90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,',
'310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99',
'101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61',
'62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,',
',81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76',
',,,,,310,311,317,104,103,105,106,,,235,,,,,,,312,,,108,107,109,597,59',
'100,99,598,,102,110,111,,94,95,,,,318,,,,,,,,,,,,,,,,,,,,599,,,234,',
',61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,',
'81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76',
',,,,,310,311,317,104,103,105,106,,,235,,,,,,,312,,,108,107,109,597,59',
'100,99,598,,102,110,111,,94,95,,,,318,,,,,,,,,,,,,,,,,,,,599,,,234,',
',61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,',
'81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76',
',,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234',
',,61,62,,,63,,775,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,',
',,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34',
'75,76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234',
',,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,',
'65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,104,103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,',
'61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100',
'99,101,290,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234',
',,61,62,,,63,,286,,284,,47,,,,,,,,233,,,,,91,287,85,86,87,89,,,,84,288',
',,,,,,65,,291,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48',
',,108,107,109,98,59,100,99,101,290,102,110,111,,94,95,,45,46,44,,,,',
',,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,287',
'85,86,87,89,,,,84,288,,,,,,,65,,291,81,88,90,,,96,97,72,73,74,,60,,',
',66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106',
',,235,,,,,,,48,,,108,107,109,98,59,100,99,101,290,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,678,,,,47,,,,,',
',,233,,,,,91,287,85,86,87,89,,,,84,288,,,,,,,65,,291,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317',
'104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,',
'47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311',
'317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,',
',,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310',
'311,317,104,103,105,106,,,235,,,,,,,312,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,,,318,,,,,,,,,,,,,,,,,,,,308,,,304,,,61,62,,,63',
',,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,290,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,286',
',284,,47,,,,,,,,233,,,,,91,287,85,86,87,89,,,,84,288,,,,,,,65,,291,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,',
',,,310,311,317,104,103,105,106,,,235,,,,,,,312,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,,,318,,,,,,,,,,,,,,,,,,,,308,,,304,,,61',
'62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,,,96,97,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,',
'32,31,30,104,103,105,106,,,22,,,,,,11,48,,13,108,107,109,98,59,100,99',
'101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,61,62',
',,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,401,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75',
'76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,',
',234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314',
'315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48',
',,108,107,109,98,59,100,99,101,290,102,110,111,,94,95,,45,46,44,,,,',
',,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,284,,47,,,,,,,,233,,,,,91,287',
'85,86,87,89,,,,84,288,,,,,,,65,,291,81,88,90,,,96,97,72,73,74,,60,,',
',66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106',
',,235,,,,,,,48,,,108,107,109,98,59,100,99,101,290,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,678,,284,,47,,',
',,,,,233,,,,,91,287,85,86,87,89,,,,84,288,,,,,,,65,,291,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311',
'317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,',
',,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310',
'311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,',
',63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,',
',,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,',
'61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75',
'76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,312,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,,,318,,,,,,,,,,,,,,,,,,,,905,,,234',
',,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,',
',81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76',
',,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234',
',,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,',
',65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315',
'75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228',
',,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314',
'315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106',
',,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105',
'106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103',
'105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,',
',,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317',
'104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,',
'47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311',
'317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,',
',,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310',
'311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,',
',63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,',
',,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,',
'61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75',
'76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,',
',234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314',
'315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106',
',,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45',
'46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,',
'60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105',
'106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103',
'105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,',
'94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,',
',,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317',
'104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,',
'47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311',
'317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,',
',,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
',,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310',
'311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101',
',102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,',
',63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,',
',,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100',
'99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,',
'61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75',
'76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98',
'59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,',
',234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314',
'315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,,48',
',,108,107,109,98,59,100,99,101,290,102,110,111,,94,95,,45,46,44,,,,',
',,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,286,,284,,47,,,,,,,,233,,,,,91',
'287,85,86,87,89,,,,84,288,,,,,,,65,,291,81,88,90,,,96,97,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105',
'106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,235,,,,,,,48,,,108,107,109,98,59,100,99,101,290,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,286,,284,,47,,',
',,,,,233,,,,,91,287,85,86,87,89,,,,84,288,,,,,,,65,,291,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,235,,,,,,,48,,,108,107,109,98,59,100,99,101,290,102,110',
'111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,286',
',284,,47,,,,,,,,233,,,,,91,287,85,86,87,89,,,,84,288,223,,,,,,65,,291',
'81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76',
',,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234',
',,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,',
',65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,104,103,105,106,,,235,,,,,,,48,,,108,107,109,98,59',
'100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234',
',,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92,,,,,',
',65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315',
'75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107,109',
'98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228',
',,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,314',
'315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108,107',
'109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,,,,,',
',,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48,,,108',
'107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,,,,,,,',
',,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,,,,,,48',
',,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44,,,,,,,',
',,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,,60,,,,66,67,,,',
'70,,68,69,71,314,315,75,76,,,,,,310,311,317,104,103,105,106,,,235,,',
',,,,48,,,108,107,109,98,59,100,99,101,,102,110,111,,94,95,,45,46,44',
',,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,,,,,,,,233,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74,12,60,',
',,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106,,',
'22,,,,,,11,48,,13,108,107,109,98,59,100,99,101,,102,110,111,,94,95,',
'45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,61,62,,,63,,38,,,,47,,,,,,,,23',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104,103,105,106',
',,235,,,,,,,48,,,108,107,109,98,59,100,99,101,290,102,110,111,,94,95',
',45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,286,,284,,47,,',
',,,,,233,,,,,91,287,85,86,87,89,,,,84,288,,,,,,,65,,291,81,88,90,,,96',
'97,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,104',
'103,105,106,,,22,,,,,,,48,,,108,107,109,98,59,100,99,101,,102,110,111',
',94,95,,45,46,44,,,,,,,,,,,,,,,,,,,,228,,,234,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,,,96,97',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,314,315,75,76,,,,,,310,311,317',
'104,103,105,106,,,235,,,,,,,312,,,108,107,109,98,59,100,99,101,,102',
'110,111,,94,95,,,,318,,,,,,,,,,,,,,,,,,,,308,,,234,,,61,62,,,63,,,,',
',,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,519,,,65,,,81,88,90,,,96',
'97,176,187,177,200,173,193,183,182,203,204,198,181,180,175,201,205,206',
'185,174,188,192,194,186,179,,,,195,202,197,196,189,199,184,172,191,190',
',,,,,171,178,169,170,166,167,168,127,129,398,397,128,,399,,,,,,,161',
'162,,157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,',
',,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,',
',,,,,,,,,,,,,,,,,158,176,187,177,200,173,193,183,182,203,204,198,181',
'180,175,201,205,206,185,174,188,192,194,186,179,,,,195,202,197,196,189',
'199,184,172,191,190,,,,,,171,178,169,170,166,167,168,127,129,,,128,',
',,,,,,,161,162,,157,139,140,141,148,145,147,,,142,143,,,,163,164,149',
'150,,,,,,,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137',
',,165,91,,,,,,,,,,92,,,,,,,,,158,176,187,177,200,173,193,183,182,203',
'204,198,181,180,175,201,205,206,185,174,188,192,194,186,179,,,,195,202',
'197,367,366,368,365,172,191,190,,,,,,171,178,169,170,362,363,364,360',
'129,100,99,361,,102,,,,,,,161,162,,157,139,140,141,148,145,147,,,142',
'143,,,,163,164,149,150,,,,,,374,,,,,,,,154,153,,138,160,156,155,151',
'152,146,144,136,159,137,,,165,,,,,,,,,,,,,,,,,,,,158,176,187,177,200',
'173,193,183,182,203,204,198,181,180,175,201,205,206,185,174,188,192',
'194,186,179,,,,195,202,197,196,189,199,184,172,191,190,,,,,,171,178',
'169,170,166,167,168,127,129,,,128,,,,,,,,,161,162,,157,139,140,141,148',
'145,147,,,142,143,,,,163,164,149,150,,,,,,,,,,,,,,154,153,,138,160,156',
'155,151,152,146,144,136,159,137,,,165,,,,,,,,,,,,,,,,,,,,158,176,187',
'177,200,173,193,183,182,203,204,198,181,180,175,201,205,206,185,174',
'188,192,194,186,179,,,,195,202,197,196,189,199,184,172,191,190,,,,,',
'171,178,169,170,166,167,168,127,129,,,128,,,,,,,,,161,162,,157,139,140',
'141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,,,,,,,,,154,153,,138',
'160,156,155,151,152,146,144,136,159,137,,,165,91,,,,,,,,,,92,,,,,,,',
',158,176,187,177,200,173,193,183,182,203,204,198,181,180,175,201,205',
'206,185,174,188,192,194,186,179,,,,195,202,197,196,189,199,184,172,191',
'190,,,,,,171,178,169,170,166,167,168,127,129,126,,128,,,,,,,,,161,162',
',157,139,140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,,,,,',
',,,154,153,,138,160,156,155,151,152,146,144,136,159,137,,,165,91,,,',
',,,,,,92,,,,,,,,,158,176,187,177,200,173,193,183,182,203,204,198,181',
'180,175,201,205,206,185,174,188,192,194,186,179,,,,195,202,197,196,189',
'199,184,172,191,190,,,,,,171,178,169,170,166,167,168,127,129,,,128,',
',,,,,,,161,162,,157,139,140,141,148,145,147,,,142,143,,,,163,164,149',
'150,,,,,,,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136,159,137',
',,165,91,,,,-627,,,,,,92,-627,-627,-627,,,-627,-627,-627,158,-627,,',
',,,,,,-627,-627,,,,,,,,,,-627,-627,,-627,-627,-627,-627,-627,,,,,,,',
'488,431,,,489,,,,,,,,,161,162,,157,139,140,141,148,145,147,,,142,143',
'-627,,,163,164,149,150,-627,,,,,274,-627,,,,,,,154,153,,138,160,156',
'155,151,152,146,144,136,159,137,-627,-627,165,,,,,1042,438,,,1043,,',
'-627,,,,,-627,161,162,158,157,139,140,141,148,145,147,,,142,143,,,,163',
'164,149,150,,,,,,274,,,,,,,,154,153,,138,160,156,155,151,152,146,144',
'136,159,137,,,165,,,,,656,431,,,657,,,,,,,,,161,162,158,157,139,140',
'141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,274,,,,,,,,154,153',
',138,160,156,155,151,152,146,144,136,159,137,,,165,,,,,1040,431,,,1041',
',,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142,143,,,,163,164',
'149,150,,,,,,274,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136',
'159,137,,,165,,,,,658,438,,,659,,,,,,,,,161,162,158,157,139,140,141',
'148,145,147,,,142,143,,,,163,164,149,150,,,,,,274,,,,,,,,154,153,,138',
'160,156,155,151,152,146,144,136,159,137,,565,165,562,561,560,570,563',
'565,,562,561,560,570,563,,,573,,,,,158,,573,,,,,,,,,,,,,,,568,,,,,,',
'568,,1012,438,581,580,1011,,,578,577,581,580,,,161,162,,157,139,140',
'141,148,145,147,,,142,143,,,,163,164,149,150,,,574,,,274,,,,574,,,,154',
'153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,,,,689,431,',
',690,,,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142,143,,,,163',
'164,149,150,,,,,,274,,,,,,,,154,153,,138,160,156,155,151,152,146,144',
'136,159,137,,,165,,,,,692,438,,,693,,,,,,,,,161,162,158,157,139,140',
'141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,274,,,,,,,,154,153',
',138,160,156,155,151,152,146,144,136,159,137,,565,165,562,561,560,570',
'563,,,,,,,,,,573,,,,,158,,,,,,,,,,,,,,,,,568,761,656,431,,,657,,,578',
'577,581,580,,,161,162,,157,139,140,141,148,145,147,,,142,143,,,,163',
'164,149,150,,,,,,274,,,,574,,,,154,153,,138,160,156,155,151,152,146',
'144,136,159,137,,,165,,,,,658,438,,,659,,,,,,,,,161,162,158,157,139',
'140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,274,,,,,,,,154',
'153,,138,160,156,155,151,152,146,144,136,159,137,,565,165,562,561,560',
'570,563,565,,562,561,560,570,563,,,573,,,,,158,,573,565,,562,561,560',
'570,563,565,,562,561,560,570,563,568,,573,,,,,568,,573,,581,580,,,,',
',581,580,,,,565,568,562,561,560,570,563,,568,,,,581,580,,,573,578,577',
'581,580,565,574,562,561,560,570,563,565,574,562,561,560,570,563,,,573',
'568,,,,,,573,,574,578,577,581,580,,565,574,562,561,560,570,563,568,',
',,,,,568,,573,,581,580,,,,578,577,581,580,,,,,574,,,,,,,568,,,,,,,,',
'578,577,581,580,,574,,427,431,,,428,574,,,,,,,,161,162,,157,139,140',
'141,148,145,147,,,142,143,,,574,163,164,149,150,,,,,,274,,,,,,,,154',
'153,,138,160,156,155,151,152,146,144,136,159,137,,,165,,,,,434,438,',
',433,,,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142,143,,,,163',
'164,149,150,,,,,,274,,,,,,,,154,153,,138,160,156,155,151,152,146,144',
'136,159,137,,,165,,,,,743,431,,,744,,,,,,,,,161,162,158,157,139,140',
'141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,274,,,,,,,,154,153',
',138,160,156,155,151,152,146,144,136,159,137,,,165,,,,,745,438,,,746',
',,,,,,,,161,162,158,157,139,140,141,148,145,147,,,142,143,,,,163,164',
'149,150,,,,,,274,,,,,,,,154,153,,138,160,156,155,151,152,146,144,136',
'159,137,,565,165,562,561,560,570,563,565,,562,561,560,570,563,,,573',
',,,,158,,573,,,,,565,,562,561,560,570,563,,,,568,761,,,,,573,568,,578',
'577,581,580,,,,578,577,581,580,,,,,,,,,568,,,,,,,,,488,431,581,580,489',
',,,574,,,,,161,162,574,157,139,140,141,148,145,147,,,142,143,,,,163',
'164,149,150,,,574,,,274,,,,,,,,154,153,,138,160,156,155,151,152,146',
'144,136,159,137,,,165,,,,,864,438,,,865,,,,,,,,,161,162,158,157,139',
'140,141,148,145,147,,,142,143,,,,163,164,149,150,,,,,,274,,,,,,,,154',
'153,,138,160,156,155,151,152,146,144,136,159,137,,565,165,562,561,560',
'570,563,565,,562,561,560,570,563,,,573,,,,,158,,573,565,,562,561,560',
'570,563,,,,,,,,568,551,573,,,,,568,,578,577,581,580,,,,578,577,581,580',
',,,565,568,562,561,560,570,563,,,,578,577,581,580,,,573,,,,,,574,,,',
',,,574,,,,,,,,,568,,,,,,,,574,578,577,581,580,,,,,,,,,,,,,,,,,,,,,,',
',,223,,,,,,,,574' ]
        racc_action_table = arr = ::Array.new(26642, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'434,313,322,1040,1043,349,64,434,434,434,603,669,22,434,434,61,434,318',
'318,595,684,80,290,746,361,434,670,392,861,80,599,361,389,757,599,684',
'434,434,757,434,434,434,434,434,322,862,871,993,22,993,61,871,821,689',
'690,744,1055,229,350,322,670,732,732,914,1041,936,975,434,434,434,434',
'434,434,434,434,434,434,434,434,434,434,587,1043,434,434,434,550,434',
'313,746,392,434,976,64,434,389,318,318,669,434,285,434,774,434,434,434',
'434,434,434,434,349,434,434,434,229,282,603,1040,1043,821,689,690,1040',
'1043,595,98,434,434,746,434,979,434,98,98,98,603,1042,98,98,98,603,98',
'861,434,434,861,1018,861,342,98,862,98,98,98,821,689,690,821,689,690',
'744,98,98,350,98,98,98,98,98,343,1055,636,821,689,690,1055,692,914,1041',
'936,975,587,914,1041,936,975,587,743,353,281,227,550,98,98,98,98,98',
'98,98,98,98,98,98,98,98,98,976,588,98,98,98,976,98,98,1042,863,98,779',
'745,98,98,29,98,656,98,657,98,632,98,98,98,98,98,98,98,630,98,627,98',
'764,764,795,692,692,979,44,44,227,270,979,1042,98,98,98,98,1042,98,598',
'98,370,1018,226,342,101,456,1018,370,342,98,98,101,101,101,451,451,101',
'101,101,692,101,656,692,657,343,745,486,29,101,343,101,101,101,743,353',
'699,699,692,267,795,101,101,235,101,101,101,101,101,588,29,945,598,797',
'588,798,945,863,507,598,226,486,863,456,598,745,44,44,598,494,800,764',
'101,101,101,101,101,101,101,101,101,101,101,101,101,101,598,41,101,101',
'101,495,101,101,704,962,101,704,962,101,101,394,101,494,101,451,101',
'597,101,101,101,101,101,101,101,27,101,598,101,507,507,507,27,977,42',
'495,699,1026,1026,41,977,101,101,101,101,620,101,762,101,977,507,462',
'762,658,41,801,367,802,101,101,658,658,658,367,711,658,658,658,334,658',
'597,334,394,394,394,711,42,597,658,658,658,658,597,462,341,341,597,462',
'462,658,658,42,658,658,658,658,658,932,977,932,932,932,335,932,597,335',
'620,620,711,711,726,639,726,726,726,620,726,804,864,805,658,658,658',
'658,658,658,658,658,658,658,658,658,658,658,18,597,658,658,658,225,658',
'658,711,806,658,807,225,658,658,623,658,231,658,639,658,225,658,658',
'658,658,658,658,658,890,658,658,658,548,639,230,548,864,386,228,890',
'932,18,383,864,658,658,658,658,864,658,433,658,864,726,820,294,18,433',
'433,433,294,658,658,433,433,824,433,49,827,225,864,828,890,890,49,623',
'623,463,524,538,538,966,833,49,623,524,433,433,966,433,433,433,433,433',
'524,865,834,966,386,386,386,864,865,383,383,383,890,865,428,463,427',
'865,380,463,463,380,835,433,433,433,433,433,433,433,433,433,433,433',
'433,433,433,351,49,433,433,433,836,433,351,840,346,433,841,524,433,346',
'966,351,843,433,428,433,427,433,433,433,433,433,433,433,865,433,307',
'433,749,428,844,427,846,307,849,749,378,380,380,659,433,433,307,433',
'749,433,659,659,659,758,758,659,659,659,362,659,306,433,433,851,351',
'362,366,306,363,659,659,659,126,366,305,363,306,126,126,659,659,305',
'659,659,659,659,659,360,590,365,305,368,904,17,360,307,365,749,368,904',
'17,378,378,378,714,714,20,20,904,17,659,659,659,659,659,659,659,659',
'659,659,659,659,659,659,854,306,659,659,659,364,659,659,589,857,659',
'584,364,659,659,305,659,376,659,207,659,124,659,659,659,659,659,659',
'659,90,659,5,659,904,17,582,5,1050,867,1050,1050,1050,1050,1050,693',
'659,659,659,659,89,659,693,659,1050,88,872,693,59,873,874,693,883,659',
'659,59,59,59,884,579,59,59,59,87,59,324,1050,575,382,376,376,376,324',
'567,59,59,59,1050,1050,601,558,324,557,901,59,59,601,59,59,59,59,59',
'72,556,905,601,906,554,309,908,693,909,553,48,1010,309,1010,1010,1010',
'549,1010,1050,546,385,309,59,59,59,59,59,59,59,59,59,59,59,59,59,59',
'537,324,59,59,59,536,934,59,43,938,59,939,388,59,59,601,59,391,59,944',
'59,528,59,59,59,59,59,59,59,952,59,955,59,1019,309,1019,1019,1019,1019',
'1019,9,9,9,9,9,59,59,59,59,1019,59,30,59,296,296,296,296,296,30,30,30',
'956,59,30,30,30,568,30,568,568,568,1019,568,957,958,960,30,30,30,525',
'765,765,1019,1019,765,765,765,30,30,520,30,30,30,30,30,1024,970,1024',
'1024,1024,40,1024,25,413,568,978,723,518,723,723,723,981,723,568,982',
'983,1019,984,30,30,30,30,30,30,30,30,30,30,30,30,30,30,985,1024,30,30',
'30,515,987,30,514,30,30,19,723,30,30,416,30,418,30,422,30,723,30,30',
'30,30,30,30,30,481,30,30,30,425,497,850,1011,850,850,850,1012,850,1014',
'496,439,30,30,426,30,467,30,439,439,439,16,466,439,439,439,472,439,481',
'30,465,1025,481,481,481,481,439,439,439,439,850,1030,472,472,1031,1032',
'1033,439,439,850,439,439,439,439,439,1034,1035,1036,472,1039,472,15',
'472,472,472,472,13,1044,472,988,472,988,988,988,1045,988,464,3,439,439',
'439,439,439,439,439,439,439,439,439,439,439,439,677,435,439,439,439',
'332,326,439,675,686,439,688,323,439,439,988,439,443,439,691,439,319',
'439,439,439,439,439,439,439,1057,439,439,439,1006,694,1006,1006,1006',
'1006,1006,683,683,683,683,683,439,439,439,439,1006,439,31,439,513,513',
'513,513,513,31,31,31,695,439,31,31,31,668,31,473,662,986,1006,986,986',
'986,698,986,31,31,317,700,1,1006,1006,473,473,703,31,31,312,31,31,31',
'31,31,902,311,902,902,902,473,902,473,710,473,473,473,473,986,660,473',
'852,473,852,852,852,1006,852,31,31,31,31,31,31,31,31,31,31,31,31,31',
'31,336,482,31,31,31,651,725,31,727,31,31,734,739,31,31,308,31,852,31',
'742,31,645,31,31,31,31,31,31,31,347,31,348,31,482,302,301,352,482,482',
'482,482,640,354,300,438,31,31,298,31,,31,438,438,438,,,438,438,438,474',
'438,933,31,933,933,933,,933,,438,438,438,438,,,474,474,,,,438,438,,438',
'438,438,438,438,,,,474,,474,,474,474,474,474,933,,474,,474,,,,,,,,438',
'438,438,438,438,438,438,438,438,438,438,438,438,438,,,438,438,438,,',
'438,,,438,,,438,438,,438,,438,,438,,438,438,438,438,438,438,438,,438',
'438,438,1004,,1004,1004,1004,1004,1004,,,,,,438,438,438,438,1004,438',
'429,438,,,,,,429,429,429,,438,429,429,429,,429,475,,,1004,,,,,429,429',
'429,,,,1004,1004,475,475,,429,429,,429,429,429,429,429,,,,,,475,,475',
',475,475,475,475,,,475,,475,,,,1004,,429,429,429,429,429,429,429,429',
'429,429,429,429,429,429,,,429,429,429,,,429,,429,429,,,429,429,,429',
',429,,429,,429,429,429,429,429,429,429,,429,429,429,,,,,,,,,,,,,429',
'429,,429,,429,974,974,974,974,974,974,,,,974,974,429,,,974,,974,974',
'974,974,974,974,974,,,,,,974,974,974,974,974,974,974,,,974,,,,,446,974',
'974,,974,974,974,974,974,974,974,974,974,,974,974,974,,974,974,,974',
'974,974,446,446,446,446,446,446,446,446,446,446,446,,446,446,,,446,446',
',974,,,974,,,974,974,,,974,,974,446,,446,974,446,446,446,446,446,446',
'446,974,446,,,,974,974,974,974,974,974,,,,974,974,,446,,446,,,974,,',
'974,974,974,,,974,974,234,234,234,234,234,234,,,,234,234,,,,234,,234',
'234,234,234,234,234,234,,,,,,234,234,234,234,234,234,234,,,234,,,,,661',
'234,234,,234,234,234,234,234,234,234,234,234,,234,234,234,,234,234,',
'234,234,234,661,661,661,661,661,661,661,661,661,661,661,,661,661,,,661',
'661,,234,,,234,,,234,234,,,234,,234,661,,661,234,661,661,661,661,661',
'661,661,234,661,,,,234,234,234,234,234,234,,,,234,234,,661,,,,,234,',
',234,234,234,,,234,234,811,811,811,811,811,811,,,,811,811,,,,811,,811',
'811,811,811,811,811,811,,,,,,811,811,811,811,811,811,811,,,811,,,,,421',
'811,811,,811,811,811,811,811,811,811,811,811,,811,811,811,,811,811,',
'811,811,811,421,421,421,421,421,421,421,421,421,421,421,,421,421,,,421',
'421,,811,,,811,,,811,811,,,811,,811,421,,421,811,421,421,421,421,421',
'421,421,811,421,,,,811,811,811,811,811,811,,,,811,811,,421,,,,,811,',
',811,811,811,,,811,811,209,209,209,209,209,209,,,,209,209,,,,209,,209',
'209,209,209,209,209,209,,,,,,209,209,209,209,209,209,209,,,209,,,,,',
'209,209,,209,209,209,209,209,209,209,209,209,,209,209,209,,209,209,',
'209,209,209,776,776,776,776,776,776,776,776,776,776,776,,776,776,,,776',
'776,,209,,,209,,,209,209,,,209,,209,776,,776,209,776,776,776,776,776',
'776,776,209,776,,,,209,209,209,209,209,209,,,,209,209,,776,,,,,209,',
',209,209,209,,,209,209,941,941,941,941,941,941,,,,941,941,,,,941,,941',
'941,941,941,941,941,941,,,,,,941,941,941,941,941,941,941,,,941,,,,,',
'941,941,,941,941,941,941,941,941,941,941,941,,941,941,941,,941,941,',
'941,941,941,788,788,788,788,788,788,788,788,788,788,788,,788,788,,,788',
'788,,941,,,941,,,941,941,,,941,,941,788,,788,941,788,788,788,788,788',
'788,788,941,788,,,,941,941,941,941,941,941,,,,941,941,,788,,,,,941,',
',941,941,941,,,941,941,709,709,709,709,709,709,,,,709,709,,,,709,,709',
'709,709,709,709,709,709,,,,,,709,709,709,709,709,709,709,,,709,,,,,',
'709,709,,709,709,709,709,709,709,709,709,709,,709,709,709,,709,709,',
'709,709,709,781,781,781,781,781,781,781,781,781,781,781,,781,781,,,781',
'781,,709,,,709,,,709,709,,,709,,709,781,,781,709,781,781,781,781,781',
'781,781,709,781,,,,709,709,709,709,709,709,,,,709,709,,781,,,,,709,',
',709,709,709,,,709,709,859,859,859,859,859,859,,,,859,859,,,,859,,859',
'859,859,859,859,859,859,,,,,,859,859,859,859,859,859,859,,,859,,,,,',
'859,859,,859,859,859,859,859,859,859,859,859,,859,859,859,,859,859,',
'859,859,859,889,889,889,889,889,889,889,889,889,889,889,,889,889,,,889',
'889,,859,,,859,,,859,859,,,859,,859,889,,889,859,889,889,889,889,889',
'889,889,859,889,,,,859,859,859,859,859,859,,,,859,859,,889,,,,,859,',
',859,859,859,,,859,859,858,858,858,858,858,858,,,,858,858,,,,858,,858',
'858,858,858,858,858,858,,,,,,858,858,858,858,858,858,858,,,858,,,,,',
'858,858,,858,858,858,858,858,858,858,858,858,,858,858,858,,858,858,',
'858,858,858,24,24,24,24,24,24,24,24,24,24,24,,24,24,,,24,24,,858,,,858',
',,858,858,,,858,,858,24,,24,858,24,24,24,24,24,24,24,858,24,,,,858,858',
'858,858,858,858,,,,858,858,,24,,,,,858,,,858,858,858,,,858,858,998,998',
'998,998,998,998,,,,998,998,,,,998,,998,998,998,998,998,998,998,,,,,',
'998,998,998,998,998,998,998,,,998,,,,,,998,998,,998,998,998,998,998',
'998,998,998,998,,998,998,998,,998,998,,998,998,998,697,697,697,697,697',
'697,697,697,697,697,697,,697,697,,,697,697,,998,,,998,,,998,998,,,998',
',998,697,,697,998,697,697,697,697,697,697,697,998,697,,,,998,998,998',
'998,998,998,,,,998,998,,697,,,,,998,,,998,998,998,,,998,998,997,997',
'997,997,997,997,,,,997,997,,,,997,,997,997,997,997,997,997,997,,,,,',
'997,997,997,997,997,997,997,,,997,,,,,,997,997,,997,997,997,997,997',
'997,997,997,997,,997,997,997,,997,997,,997,997,997,886,886,886,886,886',
'886,886,886,886,886,886,,886,886,,,886,886,,997,,,997,,,997,997,,,997',
',997,886,,886,997,886,886,886,886,886,886,886,997,886,,,,997,997,997',
'997,997,997,,,,997,997,,886,,,,,997,,,997,997,997,,,997,997,994,994',
'994,994,994,994,,,,994,994,,,,994,,994,994,994,994,994,994,994,,,,,',
'994,994,994,994,994,994,994,,,994,,,,,,994,994,,994,994,994,994,994',
'994,994,994,994,,994,994,994,,994,994,,994,994,994,783,783,783,783,783',
'783,783,783,783,783,783,,783,783,,,783,783,,994,,,994,,,994,994,,,994',
',994,783,,783,994,783,783,783,783,783,783,783,994,783,,,,994,994,994',
'994,994,994,,,,994,994,,783,,,,,994,,,994,994,994,,,994,994,304,304',
'304,304,304,304,,,,304,304,,,,304,,304,304,304,304,304,304,304,,,,,',
'304,304,304,304,304,304,304,,,304,,,,,,304,304,,304,304,304,304,304',
'304,304,304,304,,304,304,304,,304,304,,304,304,304,441,441,441,441,441',
'441,441,441,441,441,441,,441,441,,,441,441,,304,,,304,,,304,304,,,304',
',304,441,,441,304,441,441,441,441,441,441,441,304,441,,,,304,304,304',
'304,304,304,,,,304,304,,441,,,,,304,,,304,304,304,,,304,304,911,911',
'911,911,911,911,,,,911,911,,,,911,,911,911,911,911,911,911,911,,,,,',
'911,911,911,911,911,911,911,,,911,,,,,,911,911,,911,911,911,911,911',
'911,911,911,911,,911,911,911,,911,911,,911,911,911,786,786,786,786,786',
'786,786,786,786,786,786,,786,786,,,786,786,,911,,,911,,,911,911,,,911',
',911,786,,786,911,786,786,786,786,786,786,786,911,786,,,,911,911,911',
'911,911,911,,,,911,911,,786,,,,,911,,,911,911,911,,,911,911,826,826',
'826,826,826,826,,,,826,826,,,,826,,826,826,826,826,826,826,826,,,,,',
'826,826,826,826,826,826,826,,,826,,,,,,826,826,,826,826,826,826,826',
'826,826,826,826,,826,826,826,,826,826,,826,826,826,279,279,279,279,279',
'279,279,279,279,279,279,,279,279,,,279,279,,826,,,826,,,826,826,,,826',
',826,279,,279,826,279,279,279,279,279,279,279,826,279,,,,826,826,826',
'826,826,826,,,,826,826,,279,,,,,826,,,826,826,826,,,826,826,815,815',
'815,815,815,815,,,,815,815,,,,815,,815,815,815,815,815,815,815,,,,,',
'815,815,815,815,815,815,815,,,815,,,,,,815,815,,815,815,815,815,815',
'815,815,815,815,,815,815,815,,815,815,,815,815,815,485,485,485,485,485',
'485,485,485,485,485,485,,485,485,,,485,485,,815,,,815,,,815,815,,,815',
',815,485,,485,815,485,485,485,485,485,485,485,815,485,,,,815,815,815',
'815,815,815,,,,815,815,485,485,,,,,815,,,815,815,815,,,815,815,816,816',
'816,816,816,816,,,,816,816,,,,816,,816,816,816,816,816,816,816,,,,,',
'816,816,816,816,816,816,816,,,816,,,,,,816,816,,816,816,816,816,816',
'816,816,816,816,,816,816,816,,816,816,,816,816,816,790,790,790,790,790',
'790,790,790,790,790,790,,790,790,,,790,790,,816,,,816,,,816,816,,,816',
',816,790,,790,816,790,790,790,790,790,790,790,816,790,,,,816,816,816',
'816,816,816,,,,816,816,,790,,,,,816,,,816,816,816,,,816,816,907,907',
'907,907,907,907,,,,907,907,,,,907,,907,907,907,907,907,907,907,,,,,',
'907,907,907,907,907,907,907,,,907,,,,,,907,907,,907,907,907,907,907',
'907,907,907,907,,907,907,907,,907,907,,907,907,907,534,534,534,534,534',
'534,534,534,534,534,534,,534,534,,,534,534,,907,,,907,,,907,907,,,907',
',907,534,,534,907,534,534,534,534,534,534,534,907,534,,,,907,907,907',
'907,907,907,,,,907,907,,534,,,,,907,,,907,907,907,,,907,907,299,299',
'299,299,299,299,,,,299,299,,,,299,,299,299,299,299,299,299,299,,,,,',
'299,299,299,299,299,299,299,,,299,,,,,,299,299,,299,299,299,299,299',
'299,299,299,299,,299,299,299,,299,299,,299,299,299,483,483,483,483,483',
'483,483,,,483,483,,,,,,483,483,,299,,,299,,,299,299,,,299,,299,483,',
'483,299,483,483,483,483,483,483,483,299,483,,,,299,299,299,299,299,299',
',,,299,299,,,,,,,299,,,299,299,299,,,299,299,989,989,989,989,989,989',
',,,989,989,,,,989,,989,989,989,989,989,989,989,,,,,,989,989,989,989',
'989,989,989,,,989,,,,,,989,989,,989,989,989,989,989,989,989,989,989',
',989,989,989,,989,989,,989,989,989,460,460,460,460,460,460,460,460,460',
'460,460,,460,460,,,460,460,,989,,,989,,,989,989,,,989,,989,460,,460',
'989,460,460,460,460,460,460,460,989,460,,,,989,989,989,989,989,989,',
',,989,989,,,,,,,989,,,989,989,989,,,989,989,329,329,329,329,329,329',
',,,329,329,,,,329,,329,329,329,329,329,329,329,,,,,,329,329,329,329',
'329,329,329,,,329,,,,,,329,329,,329,329,329,329,329,329,329,329,329',
',329,329,329,,329,329,,329,329,329,461,461,461,461,461,461,461,461,461',
'461,461,,461,461,,,461,461,,329,,,329,,,329,329,,,329,,329,461,,461',
'329,461,461,461,461,461,461,461,329,461,,,,329,329,329,329,329,329,',
',,329,329,,,,,,,329,,,329,329,329,,,329,329,708,708,708,708,708,708',
',,,708,708,,,,708,,708,708,708,708,708,708,708,,,,,,708,708,708,708',
'708,708,708,,,708,,,,,,708,708,,708,708,708,708,708,708,708,708,708',
',708,708,708,,708,708,,708,708,708,477,477,477,477,477,477,477,,,477',
'477,,,,,,477,477,,708,,,708,,,708,708,,,708,,708,477,,477,708,477,477',
'477,477,477,477,477,708,477,,,,708,708,708,708,708,708,,,,708,708,,',
',,,,708,,,708,708,708,,,708,708,2,2,2,2,2,2,,,,2,2,,,,2,,2,2,2,2,2,2',
'2,,,,,,2,2,2,2,2,2,2,,,2,,,,,,2,2,2,2,2,2,2,2,2,2,2,2,,2,2,2,,2,2,,2',
'2,2,478,478,478,478,478,478,478,,,478,478,,,,,,478,478,,2,,,2,,,2,2',
',,2,,2,478,,478,2,478,478,478,478,478,478,478,2,478,,,,2,2,2,2,2,2,',
',,2,2,,,,,,,2,,,2,2,2,,,2,2,759,759,759,759,759,759,,,,759,759,,,,759',
',759,759,759,759,759,759,759,,,,,,759,759,759,759,759,759,759,,,759',
',,,,,759,759,,759,759,759,759,759,759,759,759,759,,759,759,759,,759',
'759,,759,759,759,479,479,479,479,479,479,479,,,479,479,,,,,,479,479',
',759,,,759,,,759,759,,,759,,759,479,,479,759,479,479,479,479,479,479',
'479,759,479,,,,759,759,759,759,759,759,,,,759,759,,,,,,,759,,,759,759',
'759,,,759,759,868,868,868,868,868,868,,,,868,868,,,,868,,868,868,868',
'868,868,868,868,,,,,,868,868,868,868,868,868,868,,,868,,,,,,868,868',
',868,868,868,868,868,868,868,868,868,,868,868,868,,868,868,,868,868',
'868,480,480,480,480,480,480,480,,,480,480,,,,,,480,480,,868,,,868,,',
'868,868,,,868,,868,480,,480,868,480,480,480,480,480,480,480,868,480',
',,,868,868,868,868,868,868,,,,868,868,,,,,,,868,,,868,868,868,,,868',
'868,760,760,760,760,760,760,,,,760,760,,,,760,,760,760,760,760,760,760',
'760,,,,,,760,760,760,760,760,760,760,,,760,,,,,,760,760,,760,760,760',
'760,760,760,760,760,760,,760,760,760,,760,760,,760,760,760,484,484,484',
'484,484,484,484,484,,484,484,,,,,,484,484,,760,,,760,,,760,760,,,760',
',760,484,,484,760,484,484,484,484,484,484,484,760,484,,,,760,760,760',
'760,760,760,,,,760,760,,,,,,,760,,,760,760,760,,,760,760,766,766,766',
'766,766,766,,,,766,766,,,,766,,766,766,766,766,766,766,766,,,,,,766',
'766,766,766,766,766,766,,,766,,,,,,766,766,,766,766,766,766,766,766',
'766,766,766,,766,766,766,,766,766,,766,766,766,471,471,471,471,471,471',
'471,,,471,471,,,,,,471,471,,766,,,766,,,766,766,,,766,,766,471,,471',
'766,471,471,471,471,471,471,471,766,471,,,,766,766,766,766,766,766,',
',,766,766,,,,,,,766,,,766,766,766,,,766,766,407,407,407,407,407,407',
',,,407,407,,,,407,,407,407,407,407,407,407,407,,,,,,407,407,407,407',
'407,407,407,,,407,,,,,,407,407,407,407,407,407,407,407,407,407,407,407',
',407,407,407,,407,407,,407,407,407,476,476,476,476,476,476,476,,,476',
'476,,,,,,476,476,,407,,,407,,,407,407,,,407,,407,476,,476,407,476,476',
'476,476,476,476,476,407,476,,,,407,407,407,407,407,407,,,,407,407,,',
',,,,407,,,407,407,407,,,407,407,36,36,36,36,36,36,,,,36,36,,,,36,,36',
'36,36,36,36,36,36,,,,,,36,36,36,36,36,36,36,,,36,,,,,,36,36,,36,36,36',
'36,36,36,36,36,36,,36,36,36,,36,36,,36,36,36,468,,,,,,,,,,,,,,,,468',
'468,,36,,,36,,470,36,36,,,36,,36,468,,468,36,468,468,468,468,470,470',
',36,,,,,36,36,36,36,36,36,,,470,36,36,,470,470,470,470,,36,,,36,36,36',
',,36,36,583,583,583,583,583,583,,,,583,583,,,,583,,583,583,583,583,583',
'583,583,,,,,,583,583,583,583,583,583,583,,,583,,,,,,583,583,,583,583',
'583,583,583,583,583,583,583,,583,583,583,,583,583,,583,583,583,469,',
',,,,,,,,,,,,,,469,469,,583,,,583,,,583,583,,,583,,583,469,,469,583,469',
'469,469,469,,,,583,,,,,583,583,583,583,583,583,,,,583,583,,,,,,,583',
',,583,583,583,,,583,583,586,586,586,586,586,586,,,,586,586,,,,586,,586',
'586,586,586,586,586,586,,,,,,586,586,586,586,586,586,586,,,586,,,,,',
'586,586,,586,586,586,586,586,586,586,586,586,,586,586,586,,586,586,',
'586,586,586,,,,,,,,,,,,,,,,,,,,586,,,586,,,586,586,,,586,,586,,,,586',
',,,,,,,586,,,,,586,586,586,586,586,586,,,,586,586,,,,,,,586,,,586,586',
'586,,,586,586,257,257,257,,257,,,,257,257,,,,257,,257,257,257,257,257',
'257,257,,,,,,257,257,257,257,257,257,257,,,257,,,,,,,257,,,257,257,257',
'257,257,257,257,257,,257,257,257,,257,257,,257,257,257,,,,,,,,,,,,,',
',,,,,,257,,,257,,,257,257,,,257,,,,,,257,,,,,,,,257,,,,,257,257,257',
'257,257,257,,,,257,257,,,,,,,257,,,257,257,257,,,257,257,455,455,455',
',455,,,,455,455,,,,455,,455,455,455,455,455,455,455,,,,,,455,455,455',
'455,455,455,455,,,455,,,,,,,455,,,455,455,455,455,455,455,455,455,455',
'455,455,455,,455,455,,455,455,455,,,,,,,,,,,,,,,,,,,,455,,,455,,,455',
'455,,,455,,455,,455,,455,,,,,,,,455,,,,,455,455,455,455,455,455,,,,455',
'455,,,,,,,455,,455,455,455,455,,,455,455,8,8,8,8,8,,,,8,8,,,,8,,8,8',
'8,8,8,8,8,,,,,,8,8,8,8,8,8,8,,,8,,,,,,8,8,8,8,8,8,8,8,8,8,8,8,,8,8,8',
',8,8,,8,8,8,,,,,,,,,,,,,,,,,,,,8,,,8,,,8,8,,,8,,8,,,,8,,,,,,,,8,,,,',
'8,8,8,8,8,8,,,,8,8,,,,,,,8,,,8,8,8,,,8,8,1015,1015,1015,,1015,,,,1015',
'1015,,,,1015,,1015,1015,1015,1015,1015,1015,1015,,,,,,1015,1015,1015',
'1015,1015,1015,1015,,,1015,,,,,,,1015,,,1015,1015,1015,1015,1015,1015',
'1015,1015,1015,1015,1015,1015,,1015,1015,,1015,1015,1015,,,,,,,,,,,',
',,,,,,,,1015,,,1015,,,1015,1015,,,1015,,1015,,1015,,1015,,,,,,,,1015',
',,,,1015,1015,1015,1015,1015,1015,,,,1015,1015,,,,,,,1015,,1015,1015',
'1015,1015,,,1015,1015,23,23,23,,23,,,,23,23,,,,23,,23,23,23,23,23,23',
'23,,,,,,23,23,23,23,23,23,23,,,23,,,,,,,23,,,23,23,23,23,23,23,23,23',
',23,23,23,,23,23,,23,23,23,,,,,,,,,,,,,,,,,,,,23,,,23,,,23,23,,,23,',
',,,,23,,,,,,,,23,,,,,23,23,23,23,23,23,,,,23,23,,,,,,,23,,,23,23,23',
',,23,23,32,32,32,,32,,,,32,32,,,,32,,32,32,32,32,32,32,32,,,,,,32,32',
'32,32,32,32,32,,,32,,,,,,,32,,,32,32,32,32,32,32,32,32,32,32,32,32,',
'32,32,,32,32,32,,,,,,,,,,,,,,,,,,,,32,,,32,,,32,32,,,32,,32,,32,,32',
',,,,,,,32,,,,,32,32,32,32,32,32,,,,32,32,,,,,,,32,,32,32,32,32,,,32',
'32,33,33,33,,33,,,,33,33,,,,33,,33,33,33,33,33,33,33,,,,,,33,33,33,33',
'33,33,33,,,33,,,,,,,33,,,33,33,33,33,33,33,33,33,33,33,33,33,,33,33',
',33,33,33,,,,,,,,,,,,,,,,,,,,33,,,33,,,33,33,,,33,,33,,33,,33,,,,,,',
',33,,,,,33,33,33,33,33,33,,,,33,33,,,,,,,33,,33,33,33,33,,,33,33,34',
'34,34,,34,,,,34,34,,,,34,,34,34,34,34,34,34,34,,,,,,34,34,34,34,34,34',
'34,,,34,,,,,,,34,,,34,34,34,34,34,34,34,34,34,34,34,34,,34,34,,34,34',
'34,,,,,,,,,,,,,,,,,,,,34,,,34,,,34,34,,,34,,34,,34,,34,,,,,,,,34,,,',
',34,34,34,34,34,34,,,,34,34,,,,,,,34,,34,34,34,34,,,34,34,37,37,37,',
'37,,,,37,37,,,,37,,37,37,37,37,37,37,37,,,,,,37,37,37,37,37,37,37,,',
'37,,,,,,,37,,,37,37,37,37,37,37,37,37,,37,37,37,,37,37,,,,37,,,,,,,',
',,,,,,,,,,,,37,,,37,,,37,37,,,37,,37,,,,,,,,,,,,,,,,,37,37,37,37,37',
'37,,,,37,37,,,,,,,37,,,37,37,37,,,37,37,38,38,38,,38,,,,38,38,,,,38',
',38,38,38,38,38,38,38,,,,,,38,38,38,38,38,38,38,,,38,,,,,,,38,,,38,38',
'38,38,38,38,38,38,,38,38,38,,38,38,,,,38,,,,,,,,,,,,,,,,,,,,38,,,38',
',,38,38,,,38,,,,,,,,,,,,,,,,,,,38,38,38,38,38,38,,,,38,38,,,,38,,,38',
',,38,38,38,,,38,38,940,940,940,,940,,,,940,940,,,,940,,940,940,940,940',
'940,940,940,,,,,,940,940,940,940,940,940,940,,,940,,,,,,,940,,,940,940',
'940,940,940,940,940,940,,940,940,940,,940,940,,940,940,940,,,,,,,,,',
',,,,,,,,,,940,,,940,,,940,940,,,940,,940,,,,940,,,,,,,,940,,,,,940,940',
'940,940,940,940,,,,940,940,,,,,,,940,,,940,940,940,,,940,940,915,915',
'915,,915,,,,915,915,,,,915,,915,915,915,915,915,915,915,,,,,,915,915',
'915,915,915,915,915,,,915,,,,,,,915,,,915,915,915,915,915,915,915,915',
',915,915,915,,915,915,,,,915,,,,,,,,,,,,,,,,,,,,915,,,915,,,915,915',
',,915,,,,,,,,,,,,,,,,,,,915,915,915,915,915,915,,,,915,915,,,,,,,915',
',,915,915,915,,,915,915,45,45,45,,45,,,,45,45,,,,45,,45,45,45,45,45',
'45,45,,,,,,45,45,45,45,45,45,45,,,45,,,,,,,45,,,45,45,45,45,45,45,45',
'45,,45,45,45,,45,45,,45,45,45,,,,,,,,,,,,,,,,,,,,45,,,45,,,45,45,,,45',
',,,,,45,,,,,,,,45,,,,,45,45,45,45,45,45,,,,45,45,,,,,,,45,,,45,45,45',
',,45,45,46,46,46,,46,,,,46,46,,,,46,,46,46,46,46,46,46,46,,,,,,46,46',
'46,46,46,46,46,,,46,,,,,,,46,,,46,46,46,46,46,46,46,46,,46,46,46,,46',
'46,,46,46,46,,,,,,,,,,,,,,,,,,,,46,,,46,,,46,46,,,46,,,,,,46,,,,,,,',
'46,,,,,46,46,46,46,46,46,,,,46,46,,,,,,,46,,,46,46,46,,,46,46,47,47',
'47,,47,,,,47,47,,,,47,,47,47,47,47,47,47,47,,,,,,47,47,47,47,47,47,47',
',,47,,,,,,,47,,,47,47,47,47,47,47,47,47,,47,47,47,,47,47,,47,47,47,',
',,,,,,,,,,,,,,,,,,47,,,47,,,47,47,,,47,,,,,,47,,,,,,,,47,,,,,47,47,47',
'47,47,47,,,,47,47,,,,,,,47,,,47,47,47,,,47,47,62,62,62,,62,,,,62,62',
',,,62,,62,62,62,62,62,62,62,,,,,,62,62,62,62,62,62,62,,,62,,,,,,,62',
',,62,62,62,62,62,62,62,62,62,62,62,62,,62,62,,62,62,62,,,,,,,,,,,,,',
',,,,,,62,,,62,,,62,62,,,62,,62,,,,62,,,,,,,,62,,,,,62,62,62,62,62,62',
',,,62,62,,,,,,,62,,62,62,62,62,,,62,62,66,66,66,,66,,,,66,66,,,,66,',
'66,66,66,66,66,66,66,,,,,,66,66,66,66,66,66,66,,,66,,,,,,,66,,,66,66',
'66,66,66,66,66,66,,66,66,66,,66,66,,66,66,66,,,,,,,,,,,,,,,,,,,,66,',
',66,,,66,66,,,66,,,,,,66,,,,,,,,66,,,,,66,66,66,66,66,66,,,,66,66,,',
',,,,66,,,66,66,66,,,66,66,67,67,67,,67,,,,67,67,,,,67,,67,67,67,67,67',
'67,67,,,,,,67,67,67,67,67,67,67,,,67,,,,,,,67,,,67,67,67,67,67,67,67',
'67,,67,67,67,,67,67,,67,67,67,,,,,,,,,,,,,,,,,,,,67,,,67,,,67,67,,,67',
',,,,,67,,,,,,,,67,,,,,67,67,67,67,67,67,,,,67,67,,,,,,,67,,,67,67,67',
',,67,67,70,70,70,,70,,,,70,70,,,,70,,70,70,70,70,70,70,70,,,,,,70,70',
'70,70,70,70,70,,,70,,,,,,,70,,,70,70,70,70,70,70,70,70,,70,70,70,,70',
'70,,70,70,70,,,,,,,,,,,,,,,,,,,,70,,,70,,,70,70,,,70,,,,,,70,,,,,,,',
'70,,,,,70,70,70,70,70,70,,,,70,70,70,,,,,70,70,,,70,70,70,,,70,70,71',
'71,71,,71,,,,71,71,,,,71,,71,71,71,71,71,71,71,,,,,,71,71,71,71,71,71',
'71,,,71,,,,,,,71,,,71,71,71,71,71,71,71,71,,71,71,71,,71,71,,,,71,,',
',,,,,,,,,,,,,,,,,71,,,71,,,71,71,,,71,,71,,,,,,,,,,,,,,,,,71,71,71,71',
'71,71,,,,71,71,,,,,,,71,,,71,71,71,,,71,71,903,903,903,,903,,,,903,903',
',,,903,,903,903,903,903,903,903,903,,,,,,903,903,903,903,903,903,903',
',,903,,,,,,,903,,,903,903,903,903,903,903,903,903,,903,903,903,,903',
'903,,,,903,,,,,,,,,,,,,,,,,,,,903,,,903,,,903,903,,,903,,,,,,,,,,,,',
',,,,,,903,903,903,903,903,903,,,,903,903,,,,,,,903,,,903,903,903,,,903',
'903,888,888,888,,888,,,,888,888,,,,888,,888,888,888,888,888,888,888',
',,,,,888,888,888,888,888,888,888,,,888,,,,,,,888,,,888,888,888,888,888',
'888,888,888,,888,888,888,,888,888,,888,888,888,,,,,,,,,,,,,,,,,,,,888',
',,888,,,888,888,,,888,,,,,,888,,,,,,,,888,,,,,888,888,888,888,888,888',
',,,888,888,,,,,,,888,,,888,888,888,,,888,888,887,887,887,,887,,,,887',
'887,,,,887,,887,887,887,887,887,887,887,,,,,,887,887,887,887,887,887',
'887,,,887,,,,,,,887,,,887,887,887,887,887,887,887,887,887,887,887,887',
',887,887,,887,887,887,,,,,,,,,,,,,,,,,,,,887,,,887,,,887,887,,,887,',
',,887,,887,,,,,,,,887,,,,,887,887,887,887,887,887,,,,887,887,,,,,,,887',
',887,887,887,887,,,887,887,869,869,869,,869,,,,869,869,,,,869,,869,869',
'869,869,869,869,869,,,,,,869,869,869,869,869,869,869,,,869,,,,,,,869',
',,869,869,869,869,869,869,869,869,,869,869,869,,869,869,,869,869,869',
',,,,,,,,,,,,,,,,,,,869,,,869,,,869,869,,,869,,,,,,869,,,,,,,,869,,,',
',869,869,869,869,869,869,,,,869,869,,,,,,,869,,,869,869,869,,,869,869',
'114,114,114,114,114,,,,114,114,,,,114,,114,114,114,114,114,114,114,',
',,,,114,114,114,114,114,114,114,,,114,,,,,,114,114,114,114,114,114,114',
'114,114,114,114,114,,114,114,114,,114,114,,114,114,114,,,,,,,,,,,,,',
',,,,,,114,,,114,,,114,114,,,114,,114,,,,114,,,,,,,,114,,,,,114,114,114',
'114,114,114,,,,114,114,,,,,,114,114,,,114,114,114,,,114,114,119,119',
'119,,119,,,,119,119,,,,119,,119,119,119,119,119,119,119,,,,,,119,119',
'119,119,119,119,119,,,119,,,,,,,119,,,119,119,119,119,119,119,119,119',
',119,119,119,,119,119,,119,119,119,,,,,,,,,,,,,,,,,,,,119,,,119,,,119',
'119,,,119,,,,,,119,,,,,,,,119,,,,,119,119,119,119,119,119,,,,119,119',
',,,,,,119,,,119,119,119,,,119,119,120,120,120,,120,,,,120,120,,,,120',
',120,120,120,120,120,120,120,,,,,,120,120,120,120,120,120,120,,,120',
',,,,,,120,,,120,120,120,120,120,120,120,120,,120,120,120,,120,120,,120',
'120,120,,,,,,,,,,,,,,,,,,,,120,,,120,,,120,120,,,120,,,,,,120,,,,,,',
',120,,,,,120,120,120,120,120,120,,,,120,120,,,,,,,120,,,120,120,120',
',,120,120,121,121,121,,121,,,,121,121,,,,121,,121,121,121,121,121,121',
'121,,,,,,121,121,121,121,121,121,121,,,121,,,,,,,121,,,121,121,121,121',
'121,121,121,121,,121,121,121,,121,121,,121,121,121,,,,,,,,,,,,,,,,,',
',,121,,,121,,,121,121,,,121,,,,,,121,,,,,,,,121,,,,,121,121,121,121',
'121,121,,,,121,121,,,,,,,121,,,121,121,121,,,121,121,122,122,122,,122',
',,,122,122,,,,122,,122,122,122,122,122,122,122,,,,,,122,122,122,122',
'122,122,122,,,122,,,,,,,122,,,122,122,122,122,122,122,122,122,,122,122',
'122,,122,122,,122,122,122,,,,,,,,,,,,,,,,,,,,122,,,122,,,122,122,,,122',
',,,,,122,,,,,,,,122,,,,,122,122,122,122,122,122,,,,122,122,,,,,,,122',
',,122,122,122,,,122,122,123,123,123,123,123,,,,123,123,,,,123,,123,123',
'123,123,123,123,123,,,,,,123,123,123,123,123,123,123,,,123,,,,,,123',
'123,,123,123,123,123,123,123,123,123,123,,123,123,123,,123,123,,123',
'123,123,,,,,,,,,,,,,,,,,,,,123,,,123,,,123,123,,,123,,123,,,,123,,,',
',,,,123,,,,,123,123,123,123,123,123,,,,123,123,,,,,,,123,,,123,123,123',
',,123,123,210,210,210,,210,,,,210,210,,,,210,,210,210,210,210,210,210',
'210,,,,,,210,210,210,210,210,210,210,,,210,,,,,,,210,,,210,210,210,210',
'210,210,210,210,,210,210,210,,210,210,,210,210,210,,,,,,,,,,,,,,,,,',
',,210,,,210,,,210,210,,,210,,210,,,,210,,,,,,,,210,,,,,210,210,210,210',
'210,210,,,,210,210,,,,,,,210,,,210,210,210,,,210,210,211,211,211,,211',
',,,211,211,,,,211,,211,211,211,211,211,211,211,,,,,,211,211,211,211',
'211,211,211,,,211,,,,,,,211,,,211,211,211,211,211,211,211,211,,211,211',
'211,,211,211,,211,211,211,,,,,,,,,,,,,,,,,,,,211,,,211,,,211,211,,,211',
',,,,,211,,,,,,,,211,,,,,211,211,211,211,211,211,,,,211,211,,,,,,,211',
',,211,211,211,,,211,211,212,212,212,,212,,,,212,212,,,,212,,212,212',
'212,212,212,212,212,,,,,,212,212,212,212,212,212,212,,,212,,,,,,,212',
',,212,212,212,212,212,212,212,212,212,212,212,212,,212,212,,212,212',
'212,,,,,,,,,,,,,,,,,,,,212,,,212,,,212,212,,,212,,212,,212,,212,,,,',
',,,212,,,,,212,212,212,212,212,212,,,,212,212,,,,,,,212,,212,212,212',
'212,,,212,212,217,217,217,,217,,,,217,217,,,,217,,217,217,217,217,217',
'217,217,,,,,,217,217,217,217,217,217,217,,,217,,,,,,,217,,,217,217,217',
'217,217,217,217,217,,217,217,217,,217,217,,217,217,217,,,,,,,,,,,,,',
',,,,,,217,,,217,,,217,217,,,217,,,,,,217,,,,,,,,217,,,,,217,217,217',
'217,217,217,,,,217,217,,,,,,,217,,,217,217,217,,,217,217,218,218,218',
',218,,,,218,218,,,,218,,218,218,218,218,218,218,218,,,,,,218,218,218',
'218,218,218,218,,,218,,,,,,,218,,,218,218,218,218,218,218,218,218,,218',
'218,218,,218,218,,218,218,218,,,,,,,,,,,,,,,,,,,,218,,,218,,,218,218',
',,218,,218,,,,218,,,,,,,,218,,,,,218,218,218,218,218,218,,,,218,218',
',,,,,,218,,,218,218,218,,,218,218,219,219,219,,219,,,,219,219,,,,219',
',219,219,219,219,219,219,219,,,,,,219,219,219,219,219,219,219,,,219',
',,,,,,219,,,219,219,219,219,219,219,219,219,,219,219,219,,219,219,,219',
'219,219,,,,,,,,,,,,,,,,,,,,219,,,219,,,219,219,,,219,,,,,,219,,,,,,',
',219,,,,,219,219,219,219,219,219,,,,219,219,,,,,,,219,,,219,219,219',
',,219,219,220,220,220,,220,,,,220,220,,,,220,,220,220,220,220,220,220',
'220,,,,,,220,220,220,220,220,220,220,,,220,,,,,,,220,,,220,220,220,220',
'220,220,220,220,,220,220,220,,220,220,,220,220,220,,,,,,,,,,,,,,,,,',
',,220,,,220,,,220,220,,,220,,,,,,220,,,,,,,,220,,,,,220,220,220,220',
'220,220,,,,220,220,,,,,,,220,,,220,220,220,,,220,220,221,221,221,,221',
',,,221,221,,,,221,,221,221,221,221,221,221,221,,,,,,221,221,221,221',
'221,221,221,,,221,,,,,,,221,,,221,221,221,221,221,221,221,221,,221,221',
'221,,221,221,,221,221,221,,,,,,,,,,,,,,,,,,,,221,,,221,,,221,221,,,221',
',,,,,221,,,,,,,,221,,,,,221,221,221,221,221,221,,,,221,221,,,,,,,221',
',,221,221,221,,,221,221,222,222,222,,222,,,,222,222,,,,222,,222,222',
'222,222,222,222,222,,,,,,222,222,222,222,222,222,222,,,222,,,,,,,222',
',,222,222,222,222,222,222,222,222,,222,222,222,,222,222,,222,222,222',
',,,,,,,,,,,,,,,,,,,222,,,222,,,222,222,,,222,,,,,,222,,,,,,,,222,,,',
',222,222,222,222,222,222,,,,222,222,222,,,,,,222,,,222,222,222,,,222',
'222,856,856,856,,856,,,,856,856,,,,856,,856,856,856,856,856,856,856',
',,,,,856,856,856,856,856,856,856,,,856,,,,,,,856,,,856,856,856,856,856',
'856,856,856,,856,856,856,,856,856,,856,856,856,,,,,,,,,,,,,,,,,,,,856',
',,856,,,856,856,,,856,,,,,,856,,,,,,,,856,,,,,856,856,856,856,856,856',
',,,856,856,,,,,,,856,,,856,856,856,,,856,856,741,741,741,,741,,,,741',
'741,,,,741,,741,741,741,741,741,741,741,,,,,,741,741,741,741,741,741',
'741,,,741,,,,,,,741,,,741,741,741,741,741,741,741,741,,741,741,741,',
'741,741,,741,741,741,,,,,,,,,,,,,,,,,,,,741,,,741,,,741,741,,,741,,741',
',,,741,,,,,,,,741,,,,,741,741,741,741,741,741,,,,741,741,,,,,,,741,',
',741,741,741,,,741,741,721,721,721,,721,,,,721,721,,,,721,,721,721,721',
'721,721,721,721,,,,,,721,721,721,721,721,721,721,,,721,,,,,,,721,,,721',
'721,721,721,721,721,721,721,,721,721,721,,721,721,,721,721,721,,,,,',
',,,,,,,,,,,,,,721,,,721,,,721,721,,,721,,,,,,721,,,,,,,,721,,,,,721',
'721,721,721,721,721,,,,721,721,,,,,,,721,,,721,721,721,,,721,721,701',
'701,701,,701,,,,701,701,,,,701,,701,701,701,701,701,701,701,,,,,,701',
'701,701,701,701,701,701,,,701,,,,,,,701,,,701,701,701,701,701,701,701',
'701,,701,701,701,,701,701,,701,701,701,,,,,,,,,,,,,,,,,,,,701,,,701',
',,701,701,,,701,,701,,,,701,,,,,,,,701,,,,,701,701,701,701,701,701,',
',,701,701,,,,,,,701,,,701,701,701,,,701,701,696,696,696,,696,,,,696',
'696,,,,696,,696,696,696,696,696,696,696,,,,,,696,696,696,696,696,696',
'696,,,696,,,,,,,696,,,696,696,696,696,696,696,696,696,,696,696,696,',
'696,696,,,,696,,,,,,,,,,,,,,,,,,,,696,,,696,,,696,696,,,696,,,,,,,,',
',,,,,,,,,,696,696,696,696,696,696,,,,696,696,,,,,,,696,,,696,696,696',
',,696,696,320,320,320,,320,,,,320,320,,,,320,,320,320,320,320,320,320',
'320,,,,,,320,320,320,320,320,320,320,,,320,,,,,,,320,,,320,320,320,320',
'320,320,320,320,,320,320,320,,320,320,,,,320,,,,,,,,,,,,,,,,,,,,320',
',,320,,,320,320,,,320,,,,,,,,,,,,,,,,,,,320,320,320,320,320,320,,,,320',
'320,,,,,,,320,,,320,320,320,,,320,320,685,685,685,,685,,,,685,685,,',
',685,,685,685,685,685,685,685,685,,,,,,685,685,685,685,685,685,685,',
',685,,,,,,,685,,,685,685,685,685,685,685,685,685,,685,685,685,,685,685',
',,,685,,,,,,,,,,,,,,,,,,,,685,,,685,,,685,685,,,685,,,,,,,,,,,,,,,,',
',,685,685,685,685,685,685,,,,685,685,,,,,,,685,,,685,685,685,,,685,685',
'681,681,681,,681,,,,681,681,,,,681,,681,681,681,681,681,681,681,,,,',
',681,681,681,681,681,681,681,,,681,,,,,,,681,,,681,681,681,681,681,681',
'681,681,,681,681,681,,681,681,,681,681,681,,,,,,,,,,,,,,,,,,,,681,,',
'681,,,681,681,,,681,,,,,,681,,,,,,,,681,,,,,681,681,681,681,681,681',
',,,681,681,,,,,,,681,,,681,681,681,,,681,681,328,328,328,,328,,,,328',
'328,,,,328,,328,328,328,328,328,328,328,,,,,,328,328,328,328,328,328',
'328,,,328,,,,,,,328,,,328,328,328,328,328,328,328,328,,328,328,328,',
'328,328,,328,328,328,,,,,,,,,,,,,,,,,,,,328,,,328,328,,328,328,,,328',
',,,,,328,,,,,,,,328,,,,,328,328,328,328,328,328,,,,328,328,,,,,,,328',
',,328,328,328,,,328,328,331,331,331,,331,,,,331,331,,,,331,,331,331',
'331,331,331,331,331,,,,,,331,331,331,331,331,331,331,,,331,,,,,,,331',
',,331,331,331,331,331,331,331,331,,331,331,331,,331,331,,331,331,331',
',,,,,,,,,,,,,,,,,,,331,,,331,,,331,331,,,331,,,,,,331,,,,,,,,331,,,',
',331,331,331,331,331,331,,,,331,331,,,,,,,331,,,331,331,331,,,331,331',
'678,678,678,,678,,,,678,678,,,,678,,678,678,678,678,678,678,678,,,,',
',678,678,678,678,678,678,678,,,678,,,,,,,678,,,678,678,678,678,678,678',
'678,678,,678,678,678,,678,678,,678,678,678,,,,,,,,,,,,,,,,,,,,678,,',
'678,,,678,678,,,678,,,,,,678,,,,,,,,678,,,,,678,678,678,678,678,678',
',,,678,678,,,,,,,678,,,678,678,678,,,678,678,654,654,654,,654,,,,654',
'654,,,,654,,654,654,654,654,654,654,654,,,,,,654,654,654,654,654,654',
'654,,,654,,,,,,,654,,,654,654,654,654,654,654,654,654,,654,654,654,',
'654,654,,654,654,654,,,,,,,,,,,,,,,,,,,,654,,,654,,,654,654,,,654,,',
',,,654,,,,,,,,654,,,,,654,654,654,654,654,654,,,,654,654,,,,,,,654,',
',654,654,654,,,654,654,337,337,337,,337,,,,337,337,,,,337,,337,337,337',
'337,337,337,337,,,,,,337,337,337,337,337,337,337,,,337,,,,,,,337,,,337',
'337,337,337,337,337,337,337,337,337,337,337,,337,337,,337,337,337,,',
',,,,,,,,,,,,,,,,,337,,,337,,,337,337,,,337,,,,,,337,,,,,,,,337,,,,,337',
'337,337,337,337,337,,,,337,337,,,,,,,337,,337,337,337,337,,,337,337',
'653,653,653,,653,,,,653,653,,,,653,,653,653,653,653,653,653,653,,,,',
',653,653,653,653,653,653,653,,,653,,,,,,,653,,,653,653,653,653,653,653',
'653,653,,653,653,653,,653,653,,653,653,653,,,,,,,,,,,,,,,,,,,,653,,',
'653,,,653,653,,,653,,,,,,653,,,,,,,,653,,,,,653,653,653,653,653,653',
',,,653,653,,,,,,,653,,,653,653,653,,,653,653,650,650,650,,650,,,,650',
'650,,,,650,,650,650,650,650,650,650,650,,,,,,650,650,650,650,650,650',
'650,,,650,,,,,,,650,,,650,650,650,650,650,650,650,650,,650,650,650,',
'650,650,,650,650,650,,,,,,,,,,,,,,,,,,,,650,,,650,,,650,650,,,650,,',
',,,650,,,,,,,,650,,,,,650,650,650,650,650,650,,,,650,650,,,,,,,650,',
',650,650,650,,,650,650,344,344,344,,344,,,,344,344,,,,344,,344,344,344',
'344,344,344,344,,,,,,344,344,344,344,344,344,344,,,344,,,,,,,344,,,344',
'344,344,344,344,344,344,344,,344,344,344,,344,344,,344,344,344,,,,,',
',,,,,,,,,,,,,,344,,,344,,,344,344,,,344,,,,,,344,,,,,,,,344,,,,,344',
'344,344,344,344,344,,,,344,344,,,,,,,344,,,344,344,344,,,344,344,345',
'345,345,,345,,,,345,345,,,,345,,345,345,345,345,345,345,345,,,,,,345',
'345,345,345,345,345,345,,,345,,,,,,,345,,,345,345,345,345,345,345,345',
'345,,345,345,345,,345,345,,345,345,345,,,,,,,,,,,,,,,,,,,,345,,,345',
',,345,345,,,345,,,,,,345,,,,,,,,345,,,,,345,345,345,345,345,345,,,,345',
'345,,,,,,,345,,,345,345,345,,,345,345,649,649,649,,649,,,,649,649,,',
',649,,649,649,649,649,649,649,649,,,,,,649,649,649,649,649,649,649,',
',649,,,,,,,649,,,649,649,649,649,649,649,649,649,,649,649,649,,649,649',
',649,649,649,,,,,,,,,,,,,,,,,,,,649,,,649,,,649,649,,,649,,,,,,649,',
',,,,,,649,,,,,649,649,649,649,649,649,,,,649,649,,,,,,,649,,,649,649',
'649,,,649,649,644,644,644,,644,,,,644,644,,,,644,,644,644,644,644,644',
'644,644,,,,,,644,644,644,644,644,644,644,,,644,,,,,,,644,,,644,644,644',
'644,644,644,644,644,,644,644,644,,644,644,,644,644,644,,,,,,,,,,,,,',
',,,,,,644,,,644,,,644,644,,,644,,,,,,644,,,,,,,,644,,,,,644,644,644',
'644,644,644,,,,644,644,,,,,,,644,,,644,644,644,,,644,644,643,643,643',
',643,,,,643,643,,,,643,,643,643,643,643,643,643,643,,,,,,643,643,643',
'643,643,643,643,,,643,,,,,,,643,,,643,643,643,643,643,643,643,643,,643',
'643,643,,643,643,,643,643,643,,,,,,,,,,,,,,,,,,,,643,,,643,,,643,643',
',,643,,,,,,643,,,,,,,,643,,,,,643,643,643,643,643,643,,,,643,643,,,',
',,,643,,,643,643,643,,,643,643,642,642,642,,642,,,,642,642,,,,642,,642',
'642,642,642,642,642,642,,,,,,642,642,642,642,642,642,642,,,642,,,,,',
',642,,,642,642,642,642,642,642,642,642,642,642,642,642,,642,642,,642',
'642,642,,,,,,,,,,,,,,,,,,,,642,,,642,,,642,642,,,642,,,,642,,642,,,',
',,,,642,,,,,642,642,642,642,642,642,,,,642,642,,,,,,,642,,642,642,642',
'642,,,642,642,641,641,641,,641,,,,641,641,,,,641,,641,641,641,641,641',
'641,641,,,,,,641,641,641,641,641,641,641,,,641,,,,,,,641,,,641,641,641',
'641,641,641,641,641,641,641,641,641,,641,641,,641,641,641,,,,,,,,,,',
',,,,,,,,,641,,,641,,,641,641,,,641,,641,,641,,641,,,,,,,,641,,,,,641',
'641,641,641,641,641,,,,641,641,,,,,,,641,,641,641,641,641,,,641,641',
'638,638,638,,638,,,,638,638,,,,638,,638,638,638,638,638,638,638,,,,',
',638,638,638,638,638,638,638,,,638,,,,,,,638,,,638,638,638,638,638,638',
'638,638,,638,638,638,,638,638,,638,638,638,,,,,,,,,,,,,,,,,,,,638,,',
'638,,,638,638,,,638,,,,,,638,,,,,,,,638,,,,,638,638,638,638,638,638',
',,,638,638,,,,,,,638,,,638,638,638,,,638,638,357,357,357,,357,,,,357',
'357,,,,357,,357,357,357,357,357,357,357,,,,,,357,357,357,357,357,357',
'357,,,357,,,,,,,357,,,357,357,357,357,357,357,357,357,,357,357,357,',
'357,357,,,,357,,,,,,,,,,,,,,,,,,,,357,,,357,,,357,357,,,357,,,,,,,,',
',,,,,,,,,,357,357,357,357,357,357,,,,357,357,,,,,,,357,,,357,357,357',
',,357,357,359,359,359,,359,,,,359,359,,,,359,,359,359,359,359,359,359',
'359,,,,,,359,359,359,359,359,359,359,,,359,,,,,,,359,,,359,359,359,359',
'359,359,359,359,,359,359,359,,359,359,,,,359,,,,,,,,,,,,,,,,,,,,359',
',,359,,,359,359,,,359,,,,,,,,,,,,,,,,,,,359,359,359,359,359,359,,,,359',
'359,,,,,,,359,,,359,359,359,,,359,359,637,637,637,,637,,,,637,637,,',
',637,,637,637,637,637,637,637,637,,,,,,637,637,637,637,637,637,637,',
',637,,,,,,,637,,,637,637,637,637,637,637,637,637,,637,637,637,,637,637',
',637,637,637,,,,,,,,,,,,,,,,,,,,637,,,637,,,637,637,,,637,,637,,,,637',
',,,,,,,637,,,,,637,637,637,637,637,637,,,,637,637,,,,,,,637,,,637,637',
'637,,,637,637,608,608,608,,608,,,,608,608,,,,608,,608,608,608,608,608',
'608,608,,,,,,608,608,608,608,608,608,608,,,608,,,,,,,608,,,608,608,608',
'608,608,608,608,608,,608,608,608,,608,608,,608,608,608,,,,,,,,,,,,,',
',,,,,,608,,,608,,,608,608,,,608,,,,,,608,,,,,,,,608,,,,,608,608,608',
'608,608,608,,,,608,608,,,,,,,608,,,608,608,608,,,608,608,604,604,604',
',604,,,,604,604,,,,604,,604,604,604,604,604,604,604,,,,,,604,604,604',
'604,604,604,604,,,604,,,,,,,604,,,604,604,604,604,604,604,604,604,,604',
'604,604,,604,604,,604,604,604,,,,,,,,,,,,,,,,,,,,604,,,604,,,604,604',
',,604,,,,,,604,,,,,,,,604,,,,,604,604,604,604,604,604,,,,604,604,,,',
',,,604,,,604,604,604,,,604,604,592,592,592,,592,,,,592,592,,,,592,,592',
'592,592,592,592,592,592,,,,,,592,592,592,592,592,592,592,,,592,,,,,',
',592,,,592,592,592,592,592,592,592,592,592,592,592,592,,592,592,,592',
'592,592,,,,,,,,,,,,,,,,,,,,592,,,592,,,592,592,,,592,,592,,592,,592',
',,,,,,,592,,,,,592,592,592,592,592,592,,,,592,592,,,,,,,592,,592,592',
'592,592,,,592,592,571,571,571,,571,,,,571,571,,,,571,,571,571,571,571',
'571,571,571,,,,,,571,571,571,571,571,571,571,,,571,,,,,,,571,,,571,571',
'571,571,571,571,571,571,,571,571,571,,571,571,,571,571,571,,,,,,,,,',
',,,,,,,,,,571,,,571,,,571,571,,,571,,,,,,571,,,,,,,,571,,,,,571,571',
'571,571,571,571,,,,571,571,,,,,,,571,,,571,571,571,,,571,571,544,544',
'544,,544,,,,544,544,,,,544,,544,544,544,544,544,544,544,,,,,,544,544',
'544,544,544,544,544,,,544,,,,,,,544,,,544,544,544,544,544,544,544,544',
'544,544,544,544,,544,544,,544,544,544,,,,,,,,,,,,,,,,,,,,544,,,544,',
',544,544,,,544,,,,,,544,,,,,,,,544,,,,,544,544,544,544,544,544,,,,544',
'544,,,,,,,544,,544,544,544,544,,,544,544,541,541,541,,541,,,,541,541',
',,,541,,541,541,541,541,541,541,541,,,,,,541,541,541,541,541,541,541',
',,541,,,,,,,541,,,541,541,541,541,541,541,541,541,541,541,541,541,,541',
'541,,541,541,541,,,,,,,,,,,,,,,,,,,,541,,,541,,,541,541,,,541,,541,',
',,541,,,,,,,,541,,,,,541,541,541,541,541,541,,,,541,541,,,,,,,541,,541',
'541,541,541,,,541,541,535,535,535,,535,,,,535,535,,,,535,,535,535,535',
'535,535,535,535,,,,,,535,535,535,535,535,535,535,,,535,,,,,,,535,,,535',
'535,535,535,535,535,535,535,,535,535,535,,535,535,,535,535,535,,,,,',
',,,,,,,,,,,,,,535,,,535,,,535,535,,,535,,,,,,535,,,,,,,,535,,,,,535',
'535,535,535,535,535,,,,535,535,,,,,,,535,,,535,535,535,,,535,535,531',
'531,531,,531,,,,531,531,,,,531,,531,531,531,531,531,531,531,,,,,,531',
'531,531,531,531,531,531,,,531,,,,,,,531,,,531,531,531,531,531,531,531',
'531,,531,531,531,,531,531,,531,531,531,,,,,,,,,,,,,,,,,,,,531,,,531',
',,531,531,,,531,,,,,,531,,,,,,,,531,,,,,531,531,531,531,531,531,,,,531',
'531,,,,,,,531,,,531,531,531,,,531,531,530,530,530,,530,,,,530,530,,',
',530,,530,530,530,530,530,530,530,,,,,,530,530,530,530,530,530,530,',
',530,,,,,,,530,,,530,530,530,530,530,530,530,530,,530,530,530,,530,530',
',530,530,530,,,,,,,,,,,,,,,,,,,,530,,,530,,,530,530,,,530,,,,,,530,',
',,,,,,530,,,,,530,530,530,530,530,530,,,,530,530,,,,,,,530,,,530,530',
'530,,,530,530,527,527,527,,527,,,,527,527,,,,527,,527,527,527,527,527',
'527,527,,,,,,527,527,527,527,527,527,527,,,527,,,,,,,527,,,527,527,527',
'527,527,527,527,527,,527,527,527,,527,527,,,,527,,,,,,,,,,,,,,,,,,,',
'527,,,527,,,527,527,,,527,,,,,,,,,,,,,,,,,,,527,527,527,527,527,527',
',,,527,527,,,,,,,527,,,527,527,527,,,527,527,521,521,521,,521,,,,521',
'521,,,,521,,521,521,521,521,521,521,521,,,,,,521,521,521,521,521,521',
'521,,,521,,,,,,,521,,,521,521,521,521,521,521,521,521,521,521,521,521',
',521,521,,521,521,521,,,,,,,,,,,,,,,,,,,,521,,,521,,,521,521,,,521,',
'521,,521,,521,,,,,,,,521,,,,,521,521,521,521,521,521,,,,521,521,,,,',
',,521,,521,521,521,521,,,521,521,519,519,519,,519,,,,519,519,,,,519',
',519,519,519,519,519,519,519,,,,,,519,519,519,519,519,519,519,,,519',
',,,,,,519,,,519,519,519,519,519,519,519,519,,519,519,519,,519,519,,',
',519,,,,,,,,,,,,,,,,,,,,519,,,519,,,519,519,,,519,,,,,,,,,,,,,,,,,,',
'519,519,519,519,519,519,,,,519,519,,,,,,,519,,,519,519,519,,,519,519',
'512,512,512,512,512,,,,512,512,,,,512,,512,512,512,512,512,512,512,',
',,,,512,512,512,512,512,512,512,,,512,,,,,,512,512,,512,512,512,512',
'512,512,512,512,512,,512,512,512,,512,512,,512,512,512,,,,,,,,,,,,,',
',,,,,,512,,,512,,,512,512,,,512,,512,,,,512,,,,,,,,512,,,,,512,512,512',
'512,512,512,,,,512,512,,,,,,512,512,,,512,512,512,,,512,512,417,417',
'417,,417,,,,417,417,,,,417,,417,417,417,417,417,417,417,,,,,,417,417',
'417,417,417,417,417,,,417,,,,,,,417,,,417,417,417,417,417,417,417,417',
',417,417,417,,417,417,,417,417,417,,,,,,,,,,,,,,,,,,,,417,,,417,,,417',
'417,,,417,,,,,,417,,,,,,,,417,,,,,417,417,417,417,417,417,,,,417,417',
',,,,,,417,,,417,417,417,,,417,417,509,509,509,,509,,,,509,509,,,,509',
',509,509,509,509,509,509,509,,,,,,509,509,509,509,509,509,509,,,509',
',,,,,,509,,,509,509,509,509,509,509,509,509,,509,509,509,,509,509,,509',
'509,509,,,,,,,,,,,,,,,,,,,,509,,,509,,,509,509,,,509,,,,,,509,,,,,,',
',509,,,,,509,509,509,509,509,509,,,,509,509,,,,,,,509,,,509,509,509',
',,509,509,505,505,505,,505,,,,505,505,,,,505,,505,505,505,505,505,505',
'505,,,,,,505,505,505,505,505,505,505,,,505,,,,,,,505,,,505,505,505,505',
'505,505,505,505,,505,505,505,,505,505,,505,505,505,,,,,,,,,,,,,,,,,',
',,505,,,505,,,505,505,,,505,,,,,,505,,,,,,,,505,,,,,505,505,505,505',
'505,505,,,,505,505,,,,,,,505,,,505,505,505,,,505,505,503,503,503,,503',
',,,503,503,,,,503,,503,503,503,503,503,503,503,,,,,,503,503,503,503',
'503,503,503,,,503,,,,,,,503,,,503,503,503,503,503,503,503,503,503,503',
'503,503,,503,503,,503,503,503,,,,,,,,,,,,,,,,,,,,503,,,503,,,503,503',
',,503,,,,503,,503,,,,,,,,503,,,,,503,503,503,503,503,503,,,,503,503',
',,,,,,503,,503,503,503,503,,,503,503,500,500,500,,500,,,,500,500,,,',
'500,,500,500,500,500,500,500,500,,,,,,500,500,500,500,500,500,500,,',
'500,,,,,,,500,,,500,500,500,500,500,500,500,500,500,500,500,500,,500',
'500,,500,500,500,,,,,,,,,,,,,,,,,,,,500,,,500,,,500,500,,,500,,500,',
'500,,500,,,,,,,,500,,,,,500,500,500,500,500,500,,,,500,500,,,,,,,500',
',500,500,500,500,,,500,500,459,459,459,,459,,,,459,459,,,,459,,459,459',
'459,459,459,459,459,,,,,,459,459,459,459,459,459,459,,,459,,,,,,,459',
',,459,459,459,459,459,459,459,459,,459,459,459,,459,459,,459,459,459',
',,,,,,,,,,,,,,,,,,,459,,,459,,,459,459,,,459,,,,,,459,,,,,,,,459,,,',
',459,459,459,459,459,459,,,,459,459,,,,,,,459,,,459,459,459,,,459,459',
'458,458,458,,458,,,,458,458,,,,458,,458,458,458,458,458,458,458,,,,',
',458,458,458,458,458,458,458,,,458,,,,,,,458,,,458,458,458,458,458,458',
'458,458,,458,458,458,,458,458,,458,458,458,,,,,,,,,,,,,,,,,,,,458,,',
'458,,,458,458,,,458,,,,,,458,,,,,,,,458,,,,,458,458,458,458,458,458',
',,,458,458,,,,,,,458,,,458,458,458,,,458,458,457,457,457,,457,,,,457',
'457,,,,457,,457,457,457,457,457,457,457,,,,,,457,457,457,457,457,457',
'457,,,457,,,,,,,457,,,457,457,457,457,457,457,457,457,,457,457,457,',
'457,457,,457,457,457,,,,,,,,,,,,,,,,,,,,457,,,457,,,457,457,,,457,,',
',,,457,,,,,,,,457,,,,,457,457,457,457,457,457,,,,457,457,,,,,,,457,',
',457,457,457,,,457,457,808,808,808,,808,,,,808,808,,,,808,,808,808,808',
'808,808,808,808,,,,,,808,808,808,808,808,808,808,,,808,,,,,,,808,,,808',
'808,808,808,808,808,808,808,,808,808,808,,808,808,,,,808,,,,,,,,,,,',
',,,,,,,,808,,,808,,,808,808,,,808,,,,,,,,,,,,,,,,,,,808,808,808,808',
'808,808,,,,808,808,,,,,,,808,,,808,808,808,,,808,808,233,233,233,,233',
',,,233,233,,,,233,,233,233,233,233,233,233,233,,,,,,233,233,233,233',
'233,233,233,,,233,,,,,,,233,,,233,233,233,233,233,233,233,233,,233,233',
'233,,233,233,,233,233,233,,,,,,,,,,,,,,,,,,,,233,,,233,,,233,233,,,233',
',,,,,233,,,,,,,,233,,,,,233,233,233,233,233,233,,,,233,233,,,,,,,233',
',,233,233,233,,,233,233,796,796,796,,796,,,,796,796,,,,796,,796,796',
'796,796,796,796,796,,,,,,796,796,796,796,796,796,796,,,796,,,,,,,796',
',,796,796,796,796,796,796,796,796,,796,796,796,,796,796,,796,796,796',
',,,,,,,,,,,,,,,,,,,796,,,796,,,796,796,,,796,,,,,,796,,,,,,,,796,,,',
',796,796,796,796,796,796,,,,796,796,,,,,,,796,,,796,796,796,,,796,796',
'236,236,236,,236,,,,236,236,,,,236,,236,236,236,236,236,236,236,,,,',
',236,236,236,236,236,236,236,,,236,,,,,,,236,,,236,236,236,236,236,236',
'236,236,,236,236,236,,236,236,,236,236,236,,,,,,,,,,,,,,,,,,,,236,,',
'236,,,236,236,,,236,,,,,,236,,,,,,,,236,,,,,236,236,236,236,236,236',
',,,236,236,,,,,,,236,,,236,236,236,,,236,236,237,237,237,,237,,,,237',
'237,,,,237,,237,237,237,237,237,237,237,,,,,,237,237,237,237,237,237',
'237,,,237,,,,,,,237,,,237,237,237,237,237,237,237,237,,237,237,237,',
'237,237,,237,237,237,,,,,,,,,,,,,,,,,,,,237,,,237,,,237,237,,,237,,',
',,,237,,,,,,,,237,,,,,237,237,237,237,237,237,,,,237,237,,,,,,,237,',
',237,237,237,,,237,237,238,238,238,,238,,,,238,238,,,,238,,238,238,238',
'238,238,238,238,,,,,,238,238,238,238,238,238,238,,,238,,,,,,,238,,,238',
'238,238,238,238,238,238,238,,238,238,238,,238,238,,238,238,238,,,,,',
',,,,,,,,,,,,,,238,,,238,,,238,238,,,238,,,,,,238,,,,,,,,238,,,,,238',
'238,238,238,238,238,,,,238,238,,,,,,,238,,,238,238,238,,,238,238,239',
'239,239,,239,,,,239,239,,,,239,,239,239,239,239,239,239,239,,,,,,239',
'239,239,239,239,239,239,,,239,,,,,,,239,,,239,239,239,239,239,239,239',
'239,,239,239,239,,239,239,,239,239,239,,,,,,,,,,,,,,,,,,,,239,,,239',
',,239,239,,,239,,,,,,239,,,,,,,,239,,,,,239,239,239,239,239,239,,,,239',
'239,,,,,,,239,,,239,239,239,,,239,239,240,240,240,,240,,,,240,240,,',
',240,,240,240,240,240,240,240,240,,,,,,240,240,240,240,240,240,240,',
',240,,,,,,,240,,,240,240,240,240,240,240,240,240,,240,240,240,,240,240',
',240,240,240,,,,,,,,,,,,,,,,,,,,240,,,240,,,240,240,,,240,,,,,,240,',
',,,,,,240,,,,,240,240,240,240,240,240,,,,240,240,,,,,,,240,,,240,240',
'240,,,240,240,241,241,241,,241,,,,241,241,,,,241,,241,241,241,241,241',
'241,241,,,,,,241,241,241,241,241,241,241,,,241,,,,,,,241,,,241,241,241',
'241,241,241,241,241,,241,241,241,,241,241,,241,241,241,,,,,,,,,,,,,',
',,,,,,241,,,241,,,241,241,,,241,,,,,,241,,,,,,,,241,,,,,241,241,241',
'241,241,241,,,,241,241,,,,,,,241,,,241,241,241,,,241,241,242,242,242',
',242,,,,242,242,,,,242,,242,242,242,242,242,242,242,,,,,,242,242,242',
'242,242,242,242,,,242,,,,,,,242,,,242,242,242,242,242,242,242,242,,242',
'242,242,,242,242,,242,242,242,,,,,,,,,,,,,,,,,,,,242,,,242,,,242,242',
',,242,,,,,,242,,,,,,,,242,,,,,242,242,242,242,242,242,,,,242,242,,,',
',,,242,,,242,242,242,,,242,242,243,243,243,,243,,,,243,243,,,,243,,243',
'243,243,243,243,243,243,,,,,,243,243,243,243,243,243,243,,,243,,,,,',
',243,,,243,243,243,243,243,243,243,243,,243,243,243,,243,243,,243,243',
'243,,,,,,,,,,,,,,,,,,,,243,,,243,,,243,243,,,243,,,,,,243,,,,,,,,243',
',,,,243,243,243,243,243,243,,,,243,243,,,,,,,243,,,243,243,243,,,243',
'243,244,244,244,,244,,,,244,244,,,,244,,244,244,244,244,244,244,244',
',,,,,244,244,244,244,244,244,244,,,244,,,,,,,244,,,244,244,244,244,244',
'244,244,244,,244,244,244,,244,244,,244,244,244,,,,,,,,,,,,,,,,,,,,244',
',,244,,,244,244,,,244,,,,,,244,,,,,,,,244,,,,,244,244,244,244,244,244',
',,,244,244,,,,,,,244,,,244,244,244,,,244,244,245,245,245,,245,,,,245',
'245,,,,245,,245,245,245,245,245,245,245,,,,,,245,245,245,245,245,245',
'245,,,245,,,,,,,245,,,245,245,245,245,245,245,245,245,,245,245,245,',
'245,245,,245,245,245,,,,,,,,,,,,,,,,,,,,245,,,245,,,245,245,,,245,,',
',,,245,,,,,,,,245,,,,,245,245,245,245,245,245,,,,245,245,,,,,,,245,',
',245,245,245,,,245,245,246,246,246,,246,,,,246,246,,,,246,,246,246,246',
'246,246,246,246,,,,,,246,246,246,246,246,246,246,,,246,,,,,,,246,,,246',
'246,246,246,246,246,246,246,,246,246,246,,246,246,,246,246,246,,,,,',
',,,,,,,,,,,,,,246,,,246,,,246,246,,,246,,,,,,246,,,,,,,,246,,,,,246',
'246,246,246,246,246,,,,246,246,,,,,,,246,,,246,246,246,,,246,246,247',
'247,247,,247,,,,247,247,,,,247,,247,247,247,247,247,247,247,,,,,,247',
'247,247,247,247,247,247,,,247,,,,,,,247,,,247,247,247,247,247,247,247',
'247,,247,247,247,,247,247,,247,247,247,,,,,,,,,,,,,,,,,,,,247,,,247',
',,247,247,,,247,,,,,,247,,,,,,,,247,,,,,247,247,247,247,247,247,,,,247',
'247,,,,,,,247,,,247,247,247,,,247,247,248,248,248,,248,,,,248,248,,',
',248,,248,248,248,248,248,248,248,,,,,,248,248,248,248,248,248,248,',
',248,,,,,,,248,,,248,248,248,248,248,248,248,248,,248,248,248,,248,248',
',248,248,248,,,,,,,,,,,,,,,,,,,,248,,,248,,,248,248,,,248,,,,,,248,',
',,,,,,248,,,,,248,248,248,248,248,248,,,,248,248,,,,,,,248,,,248,248',
'248,,,248,248,249,249,249,,249,,,,249,249,,,,249,,249,249,249,249,249',
'249,249,,,,,,249,249,249,249,249,249,249,,,249,,,,,,,249,,,249,249,249',
'249,249,249,249,249,,249,249,249,,249,249,,249,249,249,,,,,,,,,,,,,',
',,,,,,249,,,249,,,249,249,,,249,,,,,,249,,,,,,,,249,,,,,249,249,249',
'249,249,249,,,,249,249,,,,,,,249,,,249,249,249,,,249,249,250,250,250',
',250,,,,250,250,,,,250,,250,250,250,250,250,250,250,,,,,,250,250,250',
'250,250,250,250,,,250,,,,,,,250,,,250,250,250,250,250,250,250,250,,250',
'250,250,,250,250,,250,250,250,,,,,,,,,,,,,,,,,,,,250,,,250,,,250,250',
',,250,,,,,,250,,,,,,,,250,,,,,250,250,250,250,250,250,,,,250,250,,,',
',,,250,,,250,250,250,,,250,250,251,251,251,,251,,,,251,251,,,,251,,251',
'251,251,251,251,251,251,,,,,,251,251,251,251,251,251,251,,,251,,,,,',
',251,,,251,251,251,251,251,251,251,251,,251,251,251,,251,251,,251,251',
'251,,,,,,,,,,,,,,,,,,,,251,,,251,,,251,251,,,251,,,,,,251,,,,,,,,251',
',,,,251,251,251,251,251,251,,,,251,251,,,,,,,251,,,251,251,251,,,251',
'251,252,252,252,,252,,,,252,252,,,,252,,252,252,252,252,252,252,252',
',,,,,252,252,252,252,252,252,252,,,252,,,,,,,252,,,252,252,252,252,252',
'252,252,252,,252,252,252,,252,252,,252,252,252,,,,,,,,,,,,,,,,,,,,252',
',,252,,,252,252,,,252,,,,,,252,,,,,,,,252,,,,,252,252,252,252,252,252',
',,,252,252,,,,,,,252,,,252,252,252,,,252,252,253,253,253,,253,,,,253',
'253,,,,253,,253,253,253,253,253,253,253,,,,,,253,253,253,253,253,253',
'253,,,253,,,,,,,253,,,253,253,253,253,253,253,253,253,,253,253,253,',
'253,253,,253,253,253,,,,,,,,,,,,,,,,,,,,253,,,253,,,253,253,,,253,,',
',,,253,,,,,,,,253,,,,,253,253,253,253,253,253,,,,253,253,,,,,,,253,',
',253,253,253,,,253,253,254,254,254,,254,,,,254,254,,,,254,,254,254,254',
'254,254,254,254,,,,,,254,254,254,254,254,254,254,,,254,,,,,,,254,,,254',
'254,254,254,254,254,254,254,,254,254,254,,254,254,,254,254,254,,,,,',
',,,,,,,,,,,,,,254,,,254,,,254,254,,,254,,,,,,254,,,,,,,,254,,,,,254',
'254,254,254,254,254,,,,254,254,,,,,,,254,,,254,254,254,,,254,254,255',
'255,255,,255,,,,255,255,,,,255,,255,255,255,255,255,255,255,,,,,,255',
'255,255,255,255,255,255,,,255,,,,,,,255,,,255,255,255,255,255,255,255',
'255,,255,255,255,,255,255,,255,255,255,,,,,,,,,,,,,,,,,,,,255,,,255',
',,255,255,,,255,,,,,,255,,,,,,,,255,,,,,255,255,255,255,255,255,,,,255',
'255,,,,,,,255,,,255,255,255,,,255,255,256,256,256,,256,,,,256,256,,',
',256,,256,256,256,256,256,256,256,,,,,,256,256,256,256,256,256,256,',
',256,,,,,,,256,,,256,256,256,256,256,256,256,256,,256,256,256,,256,256',
',256,256,256,,,,,,,,,,,,,,,,,,,,256,,,256,,,256,256,,,256,,,,,,256,',
',,,,,,256,,,,,256,256,256,256,256,256,,,,256,256,,,,,,,256,,,256,256',
'256,,,256,256,258,258,258,,258,,,,258,258,,,,258,,258,258,258,258,258',
'258,258,,,,,,258,258,258,258,258,258,258,,,258,,,,,,,258,,,258,258,258',
'258,258,258,258,258,,258,258,258,,258,258,,258,258,258,,,,,,,,,,,,,',
',,,,,,258,,,258,,,258,258,,,258,,,,,,258,,,,,,,,258,,,,,258,258,258',
'258,258,258,,,,258,258,,,,,,,258,,,258,258,258,,,258,258,259,259,259',
',259,,,,259,259,,,,259,,259,259,259,259,259,259,259,,,,,,259,259,259',
'259,259,259,259,,,259,,,,,,,259,,,259,259,259,259,259,259,259,259,,259',
'259,259,,259,259,,259,259,259,,,,,,,,,,,,,,,,,,,,259,,,259,,,259,259',
',,259,,,,,,259,,,,,,,,259,,,,,259,259,259,259,259,259,,,,259,259,,,',
',,,259,,,259,259,259,,,259,259,260,260,260,,260,,,,260,260,,,,260,,260',
'260,260,260,260,260,260,,,,,,260,260,260,260,260,260,260,,,260,,,,,',
',260,,,260,260,260,260,260,260,260,260,,260,260,260,,260,260,,260,260',
'260,,,,,,,,,,,,,,,,,,,,260,,,260,,,260,260,,,260,,,,,,260,,,,,,,,260',
',,,,260,260,260,260,260,260,,,,260,260,,,,,,,260,,,260,260,260,,,260',
'260,261,261,261,,261,,,,261,261,,,,261,,261,261,261,261,261,261,261',
',,,,,261,261,261,261,261,261,261,,,261,,,,,,,261,,,261,261,261,261,261',
'261,261,261,,261,261,261,,261,261,,261,261,261,,,,,,,,,,,,,,,,,,,,261',
',,261,,,261,261,,,261,,,,,,261,,,,,,,,261,,,,,261,261,261,261,261,261',
',,,261,261,,,,,,,261,,,261,261,261,,,261,261,794,794,794,,794,,,,794',
'794,,,,794,,794,794,794,794,794,794,794,,,,,,794,794,794,794,794,794',
'794,,,794,,,,,,,794,,,794,794,794,794,794,794,794,794,,794,794,794,',
'794,794,,794,794,794,,,,,,,,,,,,,,,,,,,,794,,,794,,,794,794,,,794,,',
',,,794,,,,,,,,794,,,,,794,794,794,794,794,794,,,,794,794,,,,,,,794,',
',794,794,794,,,794,794,793,793,793,,793,,,,793,793,,,,793,,793,793,793',
'793,793,793,793,,,,,,793,793,793,793,793,793,793,,,793,,,,,,,793,,,793',
'793,793,793,793,793,793,793,,793,793,793,,793,793,,793,793,793,,,,,',
',,,,,,,,,,,,,,793,,,793,,,793,793,,,793,,,,,,793,,,,,,,,793,,,,,793',
'793,793,793,793,793,,,,793,793,,,,,,,793,,,793,793,793,,,793,793,268',
'268,268,,268,,,,268,268,,,,268,,268,268,268,268,268,268,268,,,,,,268',
'268,268,268,268,268,268,,,268,,,,,,,268,,,268,268,268,268,268,268,268',
'268,268,268,268,268,,268,268,,268,268,268,,,,,,,,,,,,,,,,,,,,268,,,268',
',,268,268,,,268,,268,,268,,268,,,,,,,,268,,,,,268,268,268,268,268,268',
',,,268,268,,,,,,,268,,268,268,268,268,,,268,268,792,792,792,,792,,,',
'792,792,,,,792,,792,792,792,792,792,792,792,,,,,,792,792,792,792,792',
'792,792,,,792,,,,,,,792,,,792,792,792,792,792,792,792,792,,792,792,792',
',792,792,,792,792,792,,,,,,,,,,,,,,,,,,,,792,,,792,,,792,792,,,792,',
',,,,792,,,,,,,,792,,,,,792,792,792,792,792,792,,,,792,792,,,,,,,792',
',,792,792,792,,,792,792,274,274,274,,274,,,,274,274,,,,274,,274,274',
'274,274,274,274,274,,,,,,274,274,274,274,274,274,274,,,274,,,,,,,274',
',,274,274,274,274,274,274,274,274,274,274,274,274,,274,274,,274,274',
'274,,,,,,,,,,,,,,,,,,,,274,,,274,,,274,274,,,274,,274,,274,,274,,,,',
',,,274,,,,,274,274,274,274,274,274,,,,274,274,,,,,,,274,,274,274,274',
'274,,,274,274,277,277,277,,277,,,,277,277,,,,277,,277,277,277,277,277',
'277,277,,,,,,277,277,277,277,277,277,277,,,277,,,,,,,277,,,277,277,277',
'277,277,277,277,277,277,277,277,277,,277,277,,277,277,277,,,,,,,,,,',
',,,,,,,,,277,,,277,,,277,277,,,277,,277,,277,,277,,,,,,,,277,,,,,277',
'277,277,277,277,277,,,,277,277,277,,,,,,277,,277,277,277,277,,,277,277',
'791,791,791,,791,,,,791,791,,,,791,,791,791,791,791,791,791,791,,,,',
',791,791,791,791,791,791,791,,,791,,,,,,,791,,,791,791,791,791,791,791',
'791,791,,791,791,791,,791,791,,791,791,791,,,,,,,,,,,,,,,,,,,,791,,',
'791,,,791,791,,,791,,,,,,791,,,,,,,,791,,,,,791,791,791,791,791,791',
',,,791,791,,,,,,,791,,,791,791,791,,,791,791,777,777,777,,777,,,,777',
'777,,,,777,,777,777,777,777,777,777,777,,,,,,777,777,777,777,777,777',
'777,,,777,,,,,,,777,,,777,777,777,777,777,777,777,777,,777,777,777,',
'777,777,,777,777,777,,,,,,,,,,,,,,,,,,,,777,,,777,,,777,777,,,777,,',
',,,777,,,,,,,,777,,,,,777,777,777,777,777,777,,,,777,777,,,,,,,777,',
',777,777,777,,,777,777,775,775,775,,775,,,,775,775,,,,775,,775,775,775',
'775,775,775,775,,,,,,775,775,775,775,775,775,775,,,775,,,,,,,775,,,775',
'775,775,775,775,775,775,775,,775,775,775,,775,775,,775,775,775,,,,,',
',,,,,,,,,,,,,,775,,,775,,,775,775,,,775,,,,,,775,,,,,,,,775,,,,,775',
'775,775,775,775,775,,,,775,775,,,,,,,775,,,775,775,775,,,775,775,284',
'284,284,,284,,,,284,284,,,,284,,284,284,284,284,284,284,284,,,,,,284',
'284,284,284,284,284,284,,,284,,,,,,,284,,,284,284,284,284,284,284,284',
'284,,284,284,284,,284,284,,284,284,284,,,,,,,,,,,,,,,,,,,,284,,,284',
',,284,284,,,284,,,,,,284,,,,,,,,284,,,,,284,284,284,284,284,284,,,,284',
'284,,,,,,,284,,,284,284,284,,,284,284,286,286,286,,286,,,,286,286,,',
',286,,286,286,286,286,286,286,286,,,,,,286,286,286,286,286,286,286,',
',286,,,,,,,286,,,286,286,286,286,286,286,286,286,,286,286,286,,286,286',
',286,286,286,,,,,,,,,,,,,,,,,,,,286,,,286,,,286,286,,,286,,,,,,286,',
',,,,,,286,,,,,286,286,286,286,286,286,,,,286,286,,,,,,,286,,,286,286',
'286,,,286,286,288,288,288,,288,,,,288,288,,,,288,,288,288,288,288,288',
'288,288,,,,,,288,288,288,288,288,288,288,,,288,,,,,,,288,,,288,288,288',
'288,288,288,288,288,,288,288,288,,288,288,,288,288,288,,,,,,,,,,,,,',
',,,,,,288,,,288,,,288,288,,,288,,,,,,288,,,,,,,,288,,,,,288,288,288',
'288,288,288,,,,288,288,,,,,,,288,,,288,288,288,,,288,288,291,291,291',
',291,,,,291,291,,,,291,,291,291,291,291,291,291,291,,,,,,291,291,291',
'291,291,291,291,,,291,,,,,,,291,,,291,291,291,291,291,291,291,291,,291',
'291,291,,291,291,,291,291,291,,,,,,,,,,,,,,,,,,,,291,,,291,,,291,291',
',,291,,,,,,291,,,,,,,,291,,,,,291,291,291,291,291,291,,,,291,291,,,',
',,,291,,,291,291,291,,,291,291,297,297,297,297,297,,,,297,297,,,,297',
',297,297,297,297,297,297,297,,,,,,297,297,297,297,297,297,297,,,297',
',,,,,297,297,,297,297,297,297,297,297,297,297,297,,297,297,297,,297',
'297,,297,297,297,,,,,,,,,,,,,,,,,,,,297,,,297,,,297,297,,,297,,297,',
',,297,,,,,,,,297,,,,,297,297,297,297,297,297,,,,297,297,,,,,,,297,,',
'297,297,297,,,297,297,753,753,753,,753,,,,753,753,,,,753,,753,753,753',
'753,753,753,753,,,,,,753,753,753,753,753,753,753,,,753,,,,,,,753,,,753',
'753,753,753,753,753,753,753,753,753,753,753,,753,753,,753,753,753,,',
',,,,,,,,,,,,,,,,,753,,,753,,,753,753,,,753,,753,,753,,753,,,,,,,,753',
',,,,753,753,753,753,753,753,,,,753,753,,,,,,,753,,753,753,753,753,,',
'753,753,747,747,747,,747,,,,747,747,,,,747,,747,747,747,747,747,747',
'747,,,,,,747,747,747,747,747,747,747,,,747,,,,,,,747,,,747,747,747,747',
'747,747,747,747,,747,747,747,,747,747,,747,747,747,,,,,,,,,,,,,,,,,',
',,747,,,747,,,747,747,,,747,,,,,,747,,,,,,,,747,,,,,747,747,747,747',
'747,747,,,,747,747,,,,,,,747,,,747,747,747,,,747,747,303,303,303,,303',
',,,303,303,,,,303,,303,303,303,303,303,303,303,,,,,,303,303,303,303',
'303,303,303,,,303,,,,,,,303,,,303,303,303,303,303,303,303,303,,303,303',
'303,,303,303,,,,303,,,,,,,,,,,,,,,,,,,,303,,,303,,,303,303,,,303,,,',
',,,,,,,,,,,,,,,303,303,303,303,303,303,,,,303,303,,,,303,,,303,,,303',
'303,303,,,303,303,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91',
'91,91,91,91,91,91,91,,,,91,91,91,91,91,91,91,91,91,91,,,,,,91,91,91',
'91,91,91,91,91,91,91,91,91,,91,,,,,,,91,91,,91,91,91,91,91,91,91,,,91',
'91,,,,91,91,91,91,,,,,,,,,,,,,,91,91,,91,91,91,91,91,91,91,91,91,91',
'91,,,91,,,,,,,,,,,,,,,,,,,,91,12,12,12,12,12,12,12,12,12,12,12,12,12',
'12,12,12,12,12,12,12,12,12,12,12,,,,12,12,12,12,12,12,12,12,12,12,,',
',,,12,12,12,12,12,12,12,12,12,,,12,,,,,,,,,12,12,,12,12,12,12,12,12',
'12,,,12,12,,,,12,12,12,12,,,,,,,,,,,,,,12,12,,12,12,12,12,12,12,12,12',
'12,12,12,,,12,12,,,,,,,,,,12,,,,,,,,,12,74,74,74,74,74,74,74,74,74,74',
'74,74,74,74,74,74,74,74,74,74,74,74,74,74,,,,74,74,74,74,74,74,74,74',
'74,74,,,,,,74,74,74,74,74,74,74,74,74,74,74,74,,74,,,,,,,74,74,,74,74',
'74,74,74,74,74,,,74,74,,,,74,74,74,74,,,,,,74,,,,,,,,74,74,,74,74,74',
'74,74,74,74,74,74,74,74,,,74,,,,,,,,,,,,,,,,,,,,74,763,763,763,763,763',
'763,763,763,763,763,763,763,763,763,763,763,763,763,763,763,763,763',
'763,763,,,,763,763,763,763,763,763,763,763,763,763,,,,,,763,763,763',
'763,763,763,763,763,763,,,763,,,,,,,,,763,763,,763,763,763,763,763,763',
'763,,,763,763,,,,763,763,763,763,,,,,,,,,,,,,,763,763,,763,763,763,763',
'763,763,763,763,763,763,763,,,763,,,,,,,,,,,,,,,,,,,,763,634,634,634',
'634,634,634,634,634,634,634,634,634,634,634,634,634,634,634,634,634',
'634,634,634,634,,,,634,634,634,634,634,634,634,634,634,634,,,,,,634',
'634,634,634,634,634,634,634,634,,,634,,,,,,,,,634,634,,634,634,634,634',
'634,634,634,,,634,634,,,,634,634,634,634,,,,,,,,,,,,,,634,634,,634,634',
'634,634,634,634,634,634,634,634,634,,,634,634,,,,,,,,,,634,,,,,,,,,634',
'11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11',
'11,,,,11,11,11,11,11,11,11,11,11,11,,,,,,11,11,11,11,11,11,11,11,11',
'11,,11,,,,,,,,,11,11,,11,11,11,11,11,11,11,,,11,11,,,,11,11,11,11,,',
',,,,,,,,,,,11,11,,11,11,11,11,11,11,11,11,11,11,11,,,11,11,,,,,,,,,',
'11,,,,,,,,,11,408,408,408,408,408,408,408,408,408,408,408,408,408,408',
'408,408,408,408,408,408,408,408,408,408,,,,408,408,408,408,408,408,408',
'408,408,408,,,,,,408,408,408,408,408,408,408,408,408,,,408,,,,,,,,,408',
'408,,408,408,408,408,408,408,408,,,408,408,,,,408,408,408,408,,,,,,',
',,,,,,,408,408,,408,408,408,408,408,408,408,408,408,408,408,,,408,408',
',,,487,,,,,,408,487,487,487,,,487,487,487,408,487,,,,,,,,,487,487,,',
',,,,,,,487,487,,487,487,487,487,487,,,,,,,,264,264,,,264,,,,,,,,,264',
'264,,264,264,264,264,264,264,264,,,264,264,487,,,264,264,264,264,487',
',,,,487,487,,,,,,,264,264,,264,264,264,264,264,264,264,264,264,264,264',
'487,487,264,,,,,1017,1017,,,1017,,,487,,,,,487,1017,1017,264,1017,1017',
'1017,1017,1017,1017,1017,,,1017,1017,,,,1017,1017,1017,1017,,,,,,1017',
',,,,,,,1017,1017,,1017,1017,1017,1017,1017,1017,1017,1017,1017,1017',
'1017,,,1017,,,,,453,453,,,453,,,,,,,,,453,453,1017,453,453,453,453,453',
'453,453,,,453,453,,,,453,453,453,453,,,,,,453,,,,,,,,453,453,,453,453',
'453,453,453,453,453,453,453,453,453,,,453,,,,,1016,1016,,,1016,,,,,',
',,,1016,1016,453,1016,1016,1016,1016,1016,1016,1016,,,1016,1016,,,,1016',
'1016,1016,1016,,,,,,1016,,,,,,,,1016,1016,,1016,1016,1016,1016,1016',
'1016,1016,1016,1016,1016,1016,,,1016,,,,,454,454,,,454,,,,,,,,,454,454',
'1016,454,454,454,454,454,454,454,,,454,454,,,,454,454,454,454,,,,,,454',
',,,,,,,454,454,,454,454,454,454,454,454,454,454,454,454,454,,1002,454',
'1002,1002,1002,1002,1002,1000,,1000,1000,1000,1000,1000,,,1002,,,,,454',
',1000,,,,,,,,,,,,,,,1002,,,,,,,1000,,967,967,1002,1002,967,,,1000,1000',
'1000,1000,,,967,967,,967,967,967,967,967,967,967,,,967,967,,,,967,967',
'967,967,,,1002,,,967,,,,1000,,,,967,967,,967,967,967,967,967,967,967',
'967,967,967,967,,,967,,,,,522,522,,,522,,,,,,,,,522,522,967,522,522',
'522,522,522,522,522,,,522,522,,,,522,522,522,522,,,,,,522,,,,,,,,522',
'522,,522,522,522,522,522,522,522,522,522,522,522,,,522,,,,,523,523,',
',523,,,,,,,,,523,523,522,523,523,523,523,523,523,523,,,523,523,,,,523',
'523,523,523,,,,,,523,,,,,,,,523,523,,523,523,523,523,523,523,523,523',
'523,523,523,,950,523,950,950,950,950,950,,,,,,,,,,950,,,,,523,,,,,,',
',,,,,,,,,,950,950,532,532,,,532,,,950,950,950,950,,,532,532,,532,532',
'532,532,532,532,532,,,532,532,,,,532,532,532,532,,,,,,532,,,,950,,,',
'532,532,,532,532,532,532,532,532,532,532,532,532,532,,,532,,,,,533,533',
',,533,,,,,,,,,533,533,532,533,533,533,533,533,533,533,,,533,533,,,,533',
'533,533,533,,,,,,533,,,,,,,,533,533,,533,533,533,533,533,533,533,533',
'533,533,533,,927,533,927,927,927,927,927,925,,925,925,925,925,925,,',
'927,,,,,533,,925,923,,923,923,923,923,923,921,,921,921,921,921,921,927',
',923,,,,,925,,921,,927,927,,,,,,925,925,,,,551,923,551,551,551,551,551',
',921,,,,923,923,,,551,921,921,921,921,898,927,898,898,898,898,898,896',
'925,896,896,896,896,896,,,898,551,,,,,,896,,923,551,551,551,551,,893',
'921,893,893,893,893,893,898,,,,,,,896,,893,,898,898,,,,896,896,896,896',
',,,,551,,,,,,,893,,,,,,,,,893,893,893,893,,898,,213,213,,,213,896,,',
',,,,,213,213,,213,213,213,213,213,213,213,,,213,213,,,893,213,213,213',
'213,,,,,,213,,,,,,,,213,213,,213,213,213,213,213,213,213,213,213,213',
'213,,,213,,,,,214,214,,,214,,,,,,,,,214,214,213,214,214,214,214,214',
'214,214,,,214,214,,,,214,214,214,214,,,,,,214,,,,,,,,214,214,,214,214',
'214,214,214,214,214,214,214,214,214,,,214,,,,,593,593,,,593,,,,,,,,',
'593,593,214,593,593,593,593,593,593,593,,,593,593,,,,593,593,593,593',
',,,,,593,,,,,,,,593,593,,593,593,593,593,593,593,593,593,593,593,593',
',,593,,,,,594,594,,,594,,,,,,,,,594,594,593,594,594,594,594,594,594',
'594,,,594,594,,,,594,594,594,594,,,,,,594,,,,,,,,594,594,,594,594,594',
'594,594,594,594,594,594,594,594,,606,594,606,606,606,606,606,761,,761',
'761,761,761,761,,,606,,,,,594,,761,,,,,719,,719,719,719,719,719,,,,606',
'606,,,,,719,761,,606,606,606,606,,,,761,761,761,761,,,,,,,,,719,,,,',
',,,,752,752,719,719,752,,,,606,,,,,752,752,761,752,752,752,752,752,752',
'752,,,752,752,,,,752,752,752,752,,,719,,,752,,,,,,,,752,752,,752,752',
'752,752,752,752,752,752,752,752,752,,,752,,,,,751,751,,,751,,,,,,,,',
'751,751,752,751,751,751,751,751,751,751,,,751,751,,,,751,751,751,751',
',,,,,751,,,,,,,,751,751,,751,751,751,751,751,751,751,751,751,751,751',
',340,751,340,340,340,340,340,717,,717,717,717,717,717,,,340,,,,,751',
',717,715,,715,715,715,715,715,,,,,,,,340,340,715,,,,,717,,340,340,340',
'340,,,,717,717,717,717,,,,665,715,665,665,665,665,665,,,,715,715,715',
'715,,,665,,,,,,340,,,,,,,717,,,,,,,,,665,,,,,,,,715,665,665,665,665',
',,,,,,,,,,,,,,,,,,,,,,,,665,,,,,,,,665' ]
        racc_action_check = arr = ::Array.new(26642, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,  1215,  4534,  1119,   nil,   644,   nil,   nil,  6082,   878,
   nil, 24807, 24275,   996,   nil,   959,   976,   630,   395,   876,
   685,   nil,   -78,  6362,  2560,   952,   nil,   295,   nil,   196,
   928,  1185,  6502,  6642,  6782,   nil,  5380,  6922,  7062,   nil,
   848,   258,   295,   830,   184,  7482,  7622,  7762,   725,   472,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   796,
   nil,   -76,  7902,   nil,   -19,   nil,  8042,  8182,   nil,   nil,
  8322,  8462,   757,   nil, 24408,   nil,   nil,   nil,   nil,   nil,
   -95,   nil,   nil,   nil,   nil,   nil,   nil,   681,   663,   658,
   638, 24142,   nil,   nil,   nil,   nil,   nil,   nil,   125,   nil,
   nil,   263,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  9162,   nil,   nil,   nil,   nil,  9302,
  9442,  9582,  9722,  9862,   648,   nil,   634,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   629,   nil,  1996,
 10002, 10142, 10282, 25975, 26043,   nil,   nil, 10422, 10562, 10702,
 10842, 10982, 11122,   nil,   nil,   409,   174,   103,   466,   -30,
   373,   412,   nil, 17982,  1714,   211, 18262, 18402, 18542, 18682,
 18822, 18962, 19102, 19242, 19382, 19522, 19662, 19802, 19942, 20082,
 20222, 20362, 20502, 20642, 20782, 20922, 21062,  5802, 21202, 21342,
 21482, 21622,   nil,   nil, 25059,   nil,   nil,   200, 22042,   nil,
   158,   nil,   nil,   nil, 22322,   nil,   nil, 22462,   nil,  3406,
   nil,    60,   -14,   nil, 23022,    12, 23162,   nil, 23302,   nil,
  -104, 23442,   nil,   nil,   412,   nil,   891, 23582,  1169,  3970,
  1183,  1210,  1171, 24002,  3124,   611,   597,   567,  1226,   768,
   nil,  1140,  1097,   -24,   nil,   nil,   nil,  1123,   -44,  1026,
 11962,   nil,   -85,  1079,   735,   nil,  1073,   nil, 12382,  4252,
   nil, 12522,  1048,   nil,   290,   324,  1171, 12942,   nil,   nil,
 26446,   396,   136,   157, 13362, 13502,   497,  1279,  1166,   -19,
    34,   536,  1247,   164,  1284,   nil,   nil, 14482,   nil, 14622,
   624,   -54,   595,   605,   666,   626,   603,   326,   628,   nil,
   181,   nil,   nil,   nil,   nil,   nil,   696,   nil,   595,   nil,
   535,   nil,   693,   465,   nil,   738,   460,   nil,   766,   -28,
   nil,   771,   -33,   nil,   299,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,  5239, 24940,   nil,
   nil,   nil,   nil,   867,   nil,   nil,   895, 16722,   897,   nil,
   nil,  1855,   902,   nil,   nil,   913,   927,   506,   504,  1442,
   nil,   nil,   nil,   533,     0,  1045,   nil,   nil,  1310,  1053,
   nil,  3124,   nil,  1007,   nil,   nil,  1573,   nil,   nil,   nil,
   nil,   237,   nil, 25195, 25331,  5942,   177, 17702, 17562, 17422,
  4111,  4252,   332,   493,  1051,  1005,   997,   991,  5380,  5521,
  5404,  5098,  1001,  1135,  1258,  1392,  5239,  4393,  4534,  4675,
  4816,   971,  1200,  3970,  4957,  3547,   210, 25059,   nil,   nil,
   nil,   nil,   nil,   nil,   252,   274,   926,   917,   nil,   nil,
 17282,   nil,   nil, 17142,   nil, 17002,   nil,   256,   nil, 16862,
   nil,   nil, 16582,  1148,   891,   885,   nil,   nil,   855, 16442,
   840, 16302, 25508, 25576,   483,   866,   nil, 16162,   769,   nil,
 16022, 15882, 25678, 25746,  3829, 15742,   875,   868,   526,   nil,
   nil, 15602,   nil,   nil, 15462,   nil,   747,   nil,   389,   769,
    58, 25869,   nil,   721,   716,   nil,   712,   701,   699,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   677,   892,   nil,
   nil, 15322,   nil,   nil,   nil,   764,   nil,   nil,   nil,   756,
   nil,   nil,   723,  5521,   738,   nil,  5662,    55,   181,   731,
   694,   nil, 15182, 26111, 26179,    -5,   nil,   340,   232,   -21,
   nil,   749,   nil,     9, 15042,   nil, 26241,   nil, 14902,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   333,   nil,   nil,   437,   nil,   nil,   nil,   107,   nil,   nil,
   105,   nil,   114,   nil, 24674,   nil,    42, 14762, 14342,   372,
  1212, 14202, 14062, 13922, 13782,  1190,   nil,   nil,   nil, 13642,
 13222,  1174,   nil, 13082, 12802,   nil,   136,   138,   401,   658,
  1117,  1714,  1075,   nil,   nil, 26507,   nil,   nil,  1173,   -14,
   -49,   nil,   nil,   nil,   nil,  1013,   nil,  1046, 12662,   nil,
   nil, 12242,   nil,  1135,  -109, 12102,  1014,   nil,  1019,    29,
    30,  1063,   152,   705,  1078,  1066, 11822,  2701,  1142,   258,
  1200, 11682,   nil,  1094,   226,   nil,   nil,   nil,  4393,  2278,
  1111,   356,   nil,   nil,   619, 26470,   nil, 26453,   nil, 26269,
   nil, 11542,   nil,   932,   nil,  1143,   407,  1148,   nil,   nil,
   nil,   nil,    48,   nil,  1263,   nil,   nil,   nil,   nil,  1269,
   nil, 11402,  1159,   163,    31,   194,    -1, 23862,   nil,   569,
   nil, 26384, 26316, 23722,   nil,   nil,   nil,   -93,   632,  4675,
  4957, 26248,   269, 24541,   203,   904,  5098,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   -27, 22882,  1996, 22742,   nil,    88,
   nil,  2278,   nil,  2983,   nil,   nil,  3265,   nil,  2137,   nil,
  3688, 22602, 22182, 21902, 21762,   154, 18122,   182,   184,   nil,
   199,   274,   276,   nil,   356,   341,   360,   349, 17842,   nil,
   nil,  1855,   nil,   nil,   nil,  3547,  3688,   nil,   nil,   nil,
   408,    28,   nil,   nil,   540,   nil,  3406,   422,   466,   nil,
   nil,   nil,   nil,   452,   570,   473,   490,   nil,   nil,   nil,
   493,   496,   nil,   502,   520,   nil,   522,   nil,   nil,   527,
   993,   549,  1194,   nil,   730,   nil, 11262,   739,  2560,  2419,
   nil,    16,    21,   189,   441,   500,   nil,   651,  4816,  9022,
   nil,   -80,   785,   788,   672,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   687,   677,   nil,  2842,  8882,  8742,  2419,
   455,   nil,   nil, 25921,   nil,   nil, 25897,   nil, 25890,   nil,
   nil,   722,  1178,  8602,   629,   787,   835,  3829,   734,   840,
   nil,  3265,   nil,   nil,    51,  7342,   nil,   nil,   nil,   nil,
   nil, 25839,   nil, 25832,   nil, 25815,   nil, 25808,   nil,   nil,
   nil,   nil,   394,  1276,   754,   nil,    53,   nil,   877,   879,
  7202,  2137,   nil,   nil,   887,   183,   nil,   nil,   nil,   nil,
 25638,   nil,   777,   nil,   nil,   779,   809,   821,   822,   nil,
   823,   nil,   227,   nil,   nil,   nil,   486, 25440,   nil,   nil,
   860,   nil,   nil,   nil,  1573,    54,    80,   303,   927,   118,
   nil,   859,   862,   863,   865,   880,  1153,   886,  1060,  4111,
   nil,   nil,   nil,    33,  2983,   nil,   nil,  2842,  2701,   nil,
 25400,   nil, 25393,   nil,  1373,   nil,  1116,   nil,   nil,   nil,
   801,   955,   959,   nil,  1044,  6222, 25263, 25127,   134,   859,
   nil,   nil,   nil,   nil,   921,   944,   372,   nil,   nil,   nil,
  1074,  1077,  1078,   959,   968,   969,   970,   nil,   nil,   975,
    -9,    52,   124,    -8,   980,   987,   nil,   nil,   nil,   nil,
   725,   nil,   nil,   nil,   nil,    44,   nil,  1034,   nil ]

racc_action_default = [
    -1,  -628,  -627,  -628,    -2,  -614,    -4,    -5,  -628,    -8,
    -9,  -628,  -628,  -628,   -29,  -628,  -628,  -628,  -280,  -628,
   -40,   -43,  -616,  -628,   -48,   -50,   -51,   -52,   -57,  -257,
  -257,  -257,  -294,  -333,  -334,   -69,  -627,   -73,   -81,   -83,
  -628,  -516,  -517,  -628,  -628,  -628,  -628,  -628,  -616,  -238,
  -271,  -272,  -273,  -274,  -275,  -276,  -277,  -278,  -279,  -602,
  -282,  -285,  -627,  -292,  -302,  -405,  -628,  -628,  -307,  -310,
  -614,  -628,  -318,  -325,  -628,  -335,  -336,  -447,  -448,  -449,
  -450,  -451,  -452,  -627,  -455,  -627,  -627,  -627,  -627,  -627,
  -627,  -627,  -492,  -498,  -500,  -501,  -502,  -503,  -600,  -505,
  -506,  -601,  -508,  -509,  -510,  -511,  -512,  -513,  -514,  -515,
  -520,  -521,  1059,    -3,  -615,  -623,  -624,  -625,    -7,  -628,
  -628,  -628,  -628,  -628,  -628,   -17,  -628,  -112,  -113,  -114,
  -115,  -116,  -117,  -118,  -119,  -120,  -124,  -125,  -126,  -127,
  -128,  -129,  -130,  -131,  -132,  -133,  -134,  -135,  -136,  -137,
  -138,  -139,  -140,  -141,  -142,  -143,  -144,  -145,  -146,  -147,
  -148,  -149,  -150,  -151,  -152,  -153,  -154,  -155,  -156,  -157,
  -158,  -159,  -160,  -161,  -162,  -163,  -164,  -165,  -166,  -167,
  -168,  -169,  -170,  -171,  -172,  -173,  -174,  -175,  -176,  -177,
  -178,  -179,  -180,  -181,  -182,  -183,  -184,  -185,  -186,  -187,
  -188,  -189,  -190,  -191,  -192,  -193,  -194,   -22,  -121,  -627,
  -628,  -628,  -627,  -628,  -628,  -612,  -613,  -628,  -628,  -628,
  -628,  -628,  -616,  -617,   -47,  -628,  -516,  -517,  -628,  -280,
  -628,  -628,  -230,  -628,  -627,  -628,  -628,  -628,  -628,  -628,
  -628,  -628,  -628,  -628,  -628,  -628,  -628,  -628,  -628,  -628,
  -628,  -628,  -628,  -628,  -628,  -628,  -628,  -628,  -628,  -628,
  -628,  -628,  -411,  -414,  -628,  -610,  -611,   -58,  -628,  -301,
  -628,  -428,  -431,   -64,  -627,  -425,   -65,  -616,   -66,  -239,
  -252,  -627,  -627,  -256,  -628,  -262,  -628,  -627,  -492,  -593,
  -616,  -628,   -67,   -68,  -614,   -13,   -14,  -628,   -71,  -627,
  -616,  -628,   -74,   -77,  -627,   -89,   -90,  -628,  -628,   -97,
  -294,  -297,  -616,  -418,  -333,  -334,  -337,  -426,  -628,   -79,
  -628,   -85,  -290,  -499,  -628,  -215,  -216,  -231,  -628,  -627,
  -284,  -628,  -628,  -240,  -620,  -620,  -628,  -627,  -303,  -304,
  -548,   -49,  -628,  -628,  -628,  -628,  -614,  -628,  -615,  -516,
  -517,  -628,  -628,  -280,  -628,  -358,  -359,  -628,  -321,  -628,
  -112,  -113,  -154,  -155,  -156,  -172,  -177,  -184,  -187,  -328,
  -628,  -516,  -517,  -588,  -589,  -453,  -628,  -476,  -628,  -478,
  -628,  -480,  -628,  -628,  -460,  -628,  -628,  -466,  -628,  -628,
  -472,  -628,  -628,  -474,  -628,  -491,  -493,  -494,  -495,  -496,
    -6,  -626,   -23,   -24,   -25,   -26,   -27,  -627,  -628,   -19,
   -20,   -21,  -122,  -628,   -30,   -39,  -267,  -628,  -628,  -266,
   -31,  -197,  -616,  -247,  -248,  -627,  -627,  -603,  -604,  -257,
  -423,  -605,  -606,  -604,  -603,  -257,  -422,  -424,  -605,  -606,
   -37,  -205,   -38,  -628,   -41,   -42,  -195,  -262,   -44,   -45,
   -46,  -616,  -300,  -628,  -628,  -627,  -290,  -628,  -628,  -628,
  -206,  -207,  -208,  -209,  -210,  -211,  -212,  -213,  -217,  -218,
  -219,  -220,  -221,  -222,  -223,  -224,  -225,  -226,  -227,  -228,
  -229,  -232,  -233,  -234,  -235,  -616,  -627,  -257,  -603,  -604,
   -54,   -59,  -258,  -419,  -627,  -627,  -616,  -616,  -296,  -253,
  -628,  -261,  -254,  -628,  -259,  -628,  -263,  -628,  -598,  -628,
  -599,   -12,  -615,   -16,  -616,   -70,  -288,   -86,   -75,  -628,
  -616,  -627,  -628,  -628,   -96,  -628,  -499,  -628,   -82,   -87,
  -628,  -628,  -628,  -628,  -236,  -628,  -439,  -628,  -286,  -618,
  -241,  -622,  -621,  -243,  -622,  -291,  -628,  -591,  -620,  -628,
  -628,  -548,  -408,  -587,  -587,  -531,  -533,  -533,  -533,  -547,
  -549,  -550,  -551,  -552,  -553,  -554,  -555,  -556,  -628,  -558,
  -560,  -562,  -567,  -569,  -570,  -572,  -577,  -579,  -580,  -582,
  -583,  -584,  -628,  -627,  -349,  -350,  -627,  -628,  -628,  -628,
  -628,  -434,  -627,  -628,  -628,  -290,  -315,  -107,  -108,  -628,
  -110,  -628,  -280,  -628,  -628,  -326,  -548,  -330,  -628,  -454,
  -477,  -482,  -483,  -485,  -456,  -479,  -457,  -481,  -458,  -459,
  -628,  -462,  -464,  -628,  -465,  -468,  -469,  -628,  -470,  -471,
  -628,  -497,  -628,   -18,  -628,   -28,  -270,  -628,  -628,  -427,
  -628,  -249,  -251,  -628,  -628,   -60,  -245,  -246,  -420,  -628,
  -628,   -62,  -421,  -628,  -628,  -299,  -603,  -604,  -603,  -604,
  -616,  -195,  -628,  -394,  -395,  -616,  -397,  -412,   -53,  -415,
  -627,  -429,  -432,  -244,  -295,  -627,  -260,  -264,  -628,  -594,
  -595,  -628,  -596,   -15,   -72,  -628,   -78,   -84,  -616,  -603,
  -604,  -627,  -607,   -95,  -628,   -80,  -628,  -204,  -214,  -616,
  -627,  -627,  -283,  -616,  -620,  -293,  -592,  -406,  -627,  -627,
  -616,  -628,  -529,  -530,  -628,  -628,  -540,  -628,  -543,  -628,
  -545,  -628,  -360,  -628,  -362,  -364,  -371,  -616,  -561,  -571,
  -581,  -585,  -627,  -351,  -627,  -308,  -352,  -353,  -311,  -628,
  -314,  -628,  -616,  -603,  -604,  -607,  -289,  -628,  -107,  -108,
  -109,  -628,  -628,  -627,  -319,  -522,  -523,  -628,  -322,  -627,
  -627,  -548,  -628,  -628,  -616,  -628,  -627,  -461,  -463,  -467,
  -473,  -475,   -10,  -123,  -268,  -628,  -198,  -628,  -619,  -627,
   -33,  -200,   -34,  -201,   -61,   -35,  -203,   -36,  -202,   -63,
  -196,  -628,  -628,  -628,  -628,  -427,  -628,  -587,  -587,  -376,
  -627,  -627,  -627,  -393,  -628,  -616,  -399,  -556,  -564,  -565,
  -575,  -627,  -417,  -416,   -55,  -627,  -627,  -255,  -265,  -597,
   -76,  -427,   -88,  -298,  -627,  -356,  -627,  -440,  -627,  -441,
  -442,  -287,  -242,  -628,  -628,  -616,  -587,  -568,  -586,  -532,
  -533,  -533,  -559,  -533,  -533,  -578,  -533,  -556,  -573,  -616,
  -628,  -369,  -628,  -557,  -628,  -354,  -628,  -628,  -627,  -627,
  -313,  -628,  -427,  -628,  -107,  -108,  -111,  -616,  -627,  -628,
  -525,  -628,  -628,  -628,  -616,  -527,  -331,  -590,  -484,  -487,
  -488,  -489,  -490,  -628,  -269,   -32,  -199,  -250,  -628,  -237,
  -628,  -374,  -375,  -384,  -378,  -386,  -628,  -389,  -628,  -391,
  -396,  -628,  -628,  -628,  -563,  -628,  -628,  -627,  -628,  -628,
   -11,  -627,  -446,  -357,  -628,  -628,  -444,  -409,  -410,  -407,
  -528,  -628,  -536,  -628,  -538,  -628,  -541,  -628,  -544,  -546,
  -361,  -363,  -367,  -628,  -372,  -305,  -628,  -306,  -628,  -628,
  -628,  -627,  -316,  -427,  -628,  -628,  -323,  -327,  -329,  -526,
  -548,  -486,  -587,  -566,  -377,  -627,  -627,  -627,  -627,  -576,
  -627,  -398,  -616,  -401,  -403,  -404,  -574,  -628,  -290,  -413,
  -628,  -430,  -433,  -445,  -627,  -516,  -517,  -628,  -628,  -280,
  -443,  -533,  -533,  -533,  -533,  -365,  -628,  -370,  -628,  -627,
  -309,  -312,  -264,  -627,  -627,  -320,  -524,  -627,  -627,  -373,
  -628,  -381,  -628,  -383,  -628,  -387,  -628,  -390,  -392,  -400,
  -628,  -289,  -607,   -56,  -439,  -627,  -628,  -628,  -290,  -628,
  -534,  -537,  -539,  -542,  -628,  -368,  -627,  -435,  -436,  -437,
  -628,  -628,  -628,  -627,  -627,  -627,  -627,  -402,  -438,  -616,
  -603,  -604,  -607,  -289,  -533,  -366,  -355,  -317,  -324,  -332,
  -628,  -379,  -382,  -385,  -388,  -427,  -535,  -627,  -380 ]

clist = [
'6,422,338,221,700,590,280,280,280,263,583,586,445,133,133,567,130,130',
'369,302,275,528,330,316,316,4,213,502,224,328,559,281,281,281,419,396',
'117,491,323,341,341,760,442,341,552,264,429,435,537,135,135,125,208',
'376,801,676,854,316,676,319,333,334,842,496,540,543,16,113,679,342,343',
'824,16,346,965,639,931,114,934,130,845,377,963,379,381,384,387,390,393',
'379,727,298,341,341,341,341,130,487,722,300,16,117,750,994,959,857,282',
'282,282,679,357,667,29,735,738,267,273,276,29,671,672,118,402,403,404',
'405,868,620,804,615,623,617,347,29,621,378,335,621,603,604,605,394,29',
'29,29,615,29,871,802,997,359,759,712,713,606,278,292,293,763,987,950',
'336,803,634,907,805,670,962,550,707,340,502,408,835,415,486,29,29,16',
'811,29,494,965,452,815,495,280,16,816,1027,1037,741,448,449,450,451',
'676,676,841,828,843,914,375,430,380,383,1,679,959,418,423,386,1025,389',
'931,414,420,418,392,439,686,878,440,444,29,765,567,400,695,29,29,29',
'29,29,453,766,395,9,498,869,842,559,280,9,660,849,356,739,280,207,1045',
'280,840,722,866,710,851,507,910,124,493,515,837,953,608,339,2,281,901',
'546,354,509,423,16,842,754,281,373,706,501,501,567,955,669,845,377,429',
'435,370,316,329,331,703,525,337,814,559,344,16,858,345,859,529,747,538',
',316,275,,,688,,526,795,,,522,341,341,29,29,29,29,,518,117,,29,29,29',
'29,29,29,532,,547,,,,,807,821,282,316,29,316,,587,588,9,1046,282,,842',
'298,691,511,,406,298,593,16,514,16,1028,691,512,520,16,,,768,,,768,',
'956,117,29,957,722,742,722,,29,998,820,29,607,942,567,492,567,16,301',
'862,891,892,,,497,,808,640,981,6,,29,589,29,133,548,655,130,29,784,',
',,647,817,789,,501,501,652,691,646,,280,632,,,,832,920,567,,,29,,29',
'676,430,,,135,445,633,,,559,679,423,29,29,,673,674,439,,,985,722,,874',
'662,,,,,16,,,,684,,647,872,873,,687,1038,1033,663,646,,,,,,,663,663',
',280,,,,,,529,,,,316,,,699,529,,,430,316,,645,722,29,722,423,943,651',
'430,,817,829,,,439,941,,,513,,,,,,439,,,,867,,,,,,,,,999,,,722,,716',
'718,720,,,,,,,29,280,413,807,,,807,,668,675,,16,758,,,,764,974,430,',
'691,,944,,,423,,301,,,,567,,,439,,,,,989,,,813,,,,,,,,704,,,736,736',
',,29,,,567,,808,,,808,29,,808,755,808,133,,,130,559,640,9,,,29,806,16',
'780,782,16,1029,812,,785,787,,301,444,,823,,301,,831,,,529,663,640,',
'316,135,501,773,807,,,822,,,647,316,,652,,,,853,646,,806,1055,29,,,29',
',825,830,418,,29,,,,,876,,,,,,,29,779,1031,1032,29,,341,,,640,,877,',
'280,,,825,,825,,,,,808,,808,861,808,430,808,,,,683,,,863,423,,29,29',
',439,,,29,29,,,29,,,,,130,,,,16,16,,,,501,,,,,885,19,,,806,808,870,19',
',,,875,316,,919,,894,894,894,,,,1039,,,,,,930,,,,,,,19,29,29,,,912,16',
'16,,916,,,341,16,,,,,949,,,,,922,924,341,926,928,,929,,640,691,,,355',
',,,,29,,936,,798,,29,,,,,,29,29,,945,,,16,29,,,16,16,,,,,,,29,,316,16',
',,,736,19,,800,,,,316,946,,19,,,836,,,,,,,,,,,,,,29,16,16,,29,29,,,17',
',,16,,,17,29,,,,,732,,1009,734,,,,,844,225,846,,894,894,894,894,,894',
'225,225,225,,17,307,307,29,,29,29,,16,439,,,16,996,,29,29,,1020,1021',
'1022,1023,,1016,,,280,19,825,,225,225,,,225,351,443,,41,,,,16,430,41',
',,,,,423,,19,,29,,,640,29,439,,825,,,,,,,894,894,894,894,41,305,305',
'16,,,17,,,1056,,225,225,225,225,17,29,799,16,,894,,,16,,,16,16,,,,833',
'834,,,349,,,371,,,,,19,,19,,,,29,19,952,,,798,,,798,,798,,,,838,29,',
'838,,,29,,,29,29,,19,,,41,,,,,,,,,41,,883,29,,,958,,960,,,,,,17,225',
'225,225,,,,,225,225,225,225,225,225,,,,982,,983,,984,,,,17,,,,895,897',
'899,,906,,,,908,909,,,,,,,,,,913,,,,19,,,,,,,225,798,,798,,798,225,798',
',225,,42,,41,,,,42,,,,938,939,,,,,,,17,,17,,,,307,17,1034,41,1035,,1036',
',,,42,306,306,,,,798,307,,,,1044,,,,,17,,225,,,,,,,970,,,,973,,225,225',
',,350,,838,372,,799,,1057,799,601,799,601,,,,,,,19,,,41,,41,993,,,305',
'41,,,,18,,,,,,18,,,,,42,305,1001,1003,1005,1007,,1008,,42,41,416,,,1014',
',17,,,447,,,,18,309,309,,,,1026,,,,,1030,,,,371,,371,,,,,,19,,,19,,',
',,,,,,353,,,,,,225,,,,,799,,799,,799,,799,,,,,1051,1052,1053,1054,,504',
',506,41,508,,,510,,,42,,,,,,18,,,1058,,,,,,18,,,,,,443,,,799,42,17,',
',,,,,307,,225,,,,,,307,,549,,,,,,225,,,,,,,,,,,,,,,,,,,,,,,,,,,19,19',
',,,,,,,,,,42,,42,,,,306,42,,17,41,,17,18,,,,305,225,,,,,306,,305,,,',
',225,,42,,225,636,,,18,19,19,,,,,,19,,,,,,,,,,,,,,372,,372,,,,,,,225',
'225,,,,,225,225,,,225,,41,,,41,,,,,,,19,,,,19,19,,,,,18,,18,,,19,309',
'18,,42,307,,,,,,,677,,,549,307,680,309,,,682,,,,,,18,17,17,,,19,19,',
',,,,,,,19,,,,,,,,,,,677,,602,549,602,,,,,,,,,,225,,,,,,225,,,,305,,17',
'17,19,,728,,19,17,,305,980,,,,,,,,225,,,41,41,,,,18,,,,42,,,,,,19,306',
',,,,,,,306,,,,904,,,17,,,,17,17,,,,,,,,,,17,,19,774,,41,41,677,549,',
',,41,,,,,19,,,,,19,,,19,19,,,,225,,17,17,42,,,42,,,,,17,225,818,,,819',
',,,,,,371,,,41,,,,41,41,,18,,,827,,,,309,41,,,,,966,,309,,17,,,,17,',
'848,,977,,,,,,,,,,,,,,,41,41,,447,,,,,,,41,17,,,,,,,,,,,,,,,,,,,,18',
'306,,18,,,884,,,,,,306,17,371,,,,41,,,,41,,42,42,975,,17,,,,,17,,,17',
'17,,,,,,,,,,,,,,,41,,225,,,,,,,,,,,,,,,,,,,,,42,42,,,,,,42,,,41,,,,',
',,,,,,,,,,41,,309,,,41,,,41,41,,,,309,,,,,549,,,,,,372,18,18,42,,,,42',
'42,,,,,,,,,,42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,992,,,42,42,18,18,,,,,882',
'18,42,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,372,,,,42,,602,,42,18,232,,976',
'18,18,,,,,279,279,279,,,18,,,,,,,,325,326,327,,,,42,,,,,,,,,,,279,,',
',,,,18,18,,,,,,,,,18,,,,,42,,,,,,,,,,,,,,,42,,,,,42,,,42,42,,,,,,602',
',,,18,,,,18,,,,979,,,,,,,,,,,,,,,,,,,,,,,,,,18,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,18,,,,,,,,,,,,,,,18,,,,,18,,,18,18,279,421,279,,,,,441,446',
',,,,,,,,,,,,,,232,,,460,461,462,463,464,465,466,467,468,469,470,471',
'472,473,474,475,476,477,478,479,480,481,482,483,484,485,,,,,,,279,,',
',,,279,,,279,,,,,,,279,,279,,279,,,279,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,534,,,,,,,,,279,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,279,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,279,,441,661,421,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,279',
',,279,,279,,,,279,,,,,,,,,,,,279,,,,,,,,,697,698,,,,,,,,,,279,,,279',
',,,,,,,,,,,,,,,,,,,,,,,,,,279,,,,,,,,,,,,,,,,,,,,,279,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,279,776,,,279,279,781,783,,,,,786,788',
',,661,790,,,,,,,,,,,,,,,,,,,,,,,,279,,,279,,,,,,,,,,,,,,,,,,,,279,,',
',,,,,,,,,,,,,,,,,279,,,,,,,,,,,,,,,,,,,,279,,,,,,,,,,,,279,,,,,,,,,',
',,,,,,,,,,,,279,,886,,,,,,,,,,,,,,781,783,788,786,,889,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,279,886,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'279,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,279' ]
        racc_goto_table = arr = ::Array.new(3110, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'6,25,89,34,13,95,36,36,36,155,92,92,20,64,64,189,61,61,60,53,74,55,51',
'68,68,2,27,76,22,34,185,71,71,71,30,60,98,42,67,32,32,99,30,32,154,39',
'40,40,10,65,65,17,17,171,144,77,93,68,77,54,6,71,190,25,72,72,23,5,200',
'19,19,14,23,19,150,26,132,8,135,61,195,6,149,6,6,6,6,6,6,6,134,49,32',
'32,32,32,61,40,133,50,23,98,58,110,196,14,73,73,73,200,111,43,44,94',
'94,41,41,41,44,43,43,7,19,19,19,19,112,175,147,176,175,176,5,44,176',
'172,73,176,59,113,59,172,44,44,44,176,44,114,145,115,116,117,139,139',
'118,48,48,48,119,135,120,70,136,66,46,142,45,148,151,152,153,76,33,147',
'31,156,44,44,23,157,44,160,150,51,161,162,36,23,163,164,149,165,32,32',
'32,32,77,77,145,166,145,167,170,74,173,174,1,200,196,71,6,177,135,178',
'132,22,22,71,179,61,55,180,22,22,44,181,189,7,55,44,44,44,44,44,27,182',
'183,9,51,184,190,185,36,9,25,134,21,95,36,18,135,36,188,133,58,154,133',
'171,15,11,74,51,192,193,199,91,3,71,147,88,96,34,6,23,190,97,71,87,72',
'6,6,189,144,75,195,6,40,40,100,68,101,102,103,34,104,43,185,105,23,106',
'107,108,53,109,32,,68,74,,,25,,67,26,,,27,32,32,44,44,44,44,,54,98,',
'44,44,44,44,44,44,27,,6,,,,,189,26,73,68,44,68,,19,19,9,93,73,,190,49',
'40,5,,9,49,27,23,50,23,14,40,8,50,23,,,176,,,176,,145,98,44,145,133',
'25,133,,44,99,55,44,39,94,189,48,189,23,12,26,139,139,,,48,,191,34,145',
'6,,44,5,44,64,73,51,61,44,42,,,,74,76,42,,6,6,74,40,6,,36,2,,,,72,139',
'189,,,44,,44,77,74,,,65,20,17,,,185,200,6,44,44,,51,51,61,,,133,133',
',154,34,,,,,23,,,,51,,74,10,10,,51,13,145,6,6,,,,,,,6,6,,36,,,,,,53',
',,,68,,,32,53,,,74,68,,41,133,44,133,6,26,41,74,,76,30,,,61,92,,,9,',
',,,,61,,,,25,,,,,,,,,139,,,133,,187,187,187,,,,,,,44,36,12,189,,,189',
',41,73,,23,32,,,,32,92,74,,40,,10,,,6,,12,,,,189,,,61,,,,,92,,,89,,',
',,,,,73,,,98,98,,,44,,,189,,191,,,191,44,,191,98,191,64,,,61,185,34',
'9,,,44,34,23,22,22,23,95,155,,22,22,,12,22,,51,,12,,51,,,53,6,34,,68',
'65,6,17,189,,,53,,,74,68,,74,,,,51,6,,34,26,44,,,44,,6,6,71,,44,,,,',
'60,,,,,,,44,73,10,10,44,,32,,,34,,51,,36,,,6,,6,,,,,191,,191,71,191',
'74,191,,,,9,,,19,6,,44,44,,61,,,44,44,,,44,,,,,61,,,,23,23,,,,6,,,,',
'22,29,,,34,191,98,29,,,,98,68,,51,,6,6,6,,,,25,,,,,,51,,,,,,,29,44,44',
',,6,23,23,,6,,,32,23,,,,,51,,,,,187,187,32,187,187,,187,,34,40,,,29',
',,,,44,,19,,138,,44,,,,,,44,44,,19,,,23,44,,,23,23,,,,,,,44,,68,23,',
',,98,29,,143,,,,68,98,,29,,,138,,,,,,,,,,,,,,44,23,23,,44,44,,,24,,',
'23,,,24,44,,,,,12,,34,12,,,,,143,24,143,,6,6,6,6,,6,24,24,24,,24,24',
'24,44,,44,44,,23,61,,,23,98,,44,44,,187,187,187,187,,27,,,36,29,6,,24',
'24,,,24,24,29,,56,,,,23,74,56,,,,,,6,,29,,44,,,34,44,61,,6,,,,,,,6,6',
'6,6,56,56,56,23,,,24,,,187,,24,24,24,24,24,44,140,23,,6,,,23,,,23,23',
',,,12,12,,,56,,,56,,,,,29,,29,,,,44,29,138,,,138,,,138,,138,,,,140,44',
',140,,,44,,,44,44,,29,,,56,,,,,,,,,56,,12,44,,,143,,143,,,,,,24,24,24',
'24,,,,,24,24,24,24,24,24,,,,143,,143,,143,,,,24,,,,141,141,141,,12,',
',,12,12,,,,,,,,,,12,,,,29,,,,,,,24,138,,138,,138,24,138,,24,,57,,56',
',,,57,,,,12,12,,,,,,,24,,24,,,,24,24,143,56,143,,143,,,,57,57,57,,,',
'138,24,,,,143,,,,,24,,24,,,,,,,12,,,,12,,24,24,,,57,,140,57,,140,,143',
'140,24,140,24,,,,,,,29,,,56,,56,12,,,56,56,,,,28,,,,,,28,,,,,57,56,141',
'141,141,141,,141,,57,56,69,,,12,,24,,,69,,,,28,28,28,,,,12,,,,,12,,',
',56,,56,,,,,,29,,,29,,,,,,,,,28,,,,,,24,,,,,140,,140,,140,,140,,,,,141',
'141,141,141,,69,,69,56,69,,,69,,,57,,,,,,28,,,141,,,,,,28,,,,,,29,,',
'140,57,24,,,,,,,24,,24,,,,,,24,,69,,,,,,24,,,,,,,,,,,,,,,,,,,,,,,,,',
',29,29,,,,,,,,,,,57,,57,,,,57,57,,24,56,,24,28,,,,56,24,,,,,57,,56,',
',,,24,,57,,24,69,,,28,29,29,,,,,,29,,,,,,,,,,,,,,57,,57,,,,,,,24,24',
',,,,24,24,,,24,,56,,,56,,,,,,,29,,,,29,29,,,,,28,,28,,,29,28,28,,57',
'24,,,,,,,69,,,69,24,69,28,,,69,,,,,,28,24,24,,,29,29,,,,,,,,,29,,,,',
',,,,,,69,,28,69,28,,,,,,,,,,24,,,,,,24,,,,56,,24,24,29,,69,,29,24,,56',
'29,,,,,,,,24,,,56,56,,,,28,,,,57,,,,,,29,57,,,,,,,,57,,,,24,,,24,,,',
'24,24,,,,,,,,,,24,,29,69,,56,56,69,69,,,,56,,,,,29,,,,,29,,,29,29,,',
',24,,24,24,57,,,57,,,,,24,24,69,,,69,,,,,,,56,,,56,,,,56,56,,28,,,69',
',,,28,56,,,,,24,,28,,24,,,,24,,69,,24,,,,,,,,,,,,,,,56,56,,69,,,,,,',
'56,24,,,,,,,,,,,,,,,,,,,,28,57,,28,,,69,,,,,,57,24,56,,,,56,,,,56,,57',
'57,56,,24,,,,,24,,,24,24,,,,,,,,,,,,,,,56,,24,,,,,,,,,,,,,,,,,,,,,57',
'57,,,,,,57,,,56,,,,,,,,,,,,,,,56,,28,,,56,,,56,56,,,,28,,,,,69,,,,,',
'57,28,28,57,,,,57,57,,,,,,,,,,57,,,,,,,,,,,,,,,,,,,,,,,,,,,,,69,,,57',
'57,28,28,,,,,28,28,57,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,57,,,,57,,28',
',57,28,35,,57,28,28,,,,,35,35,35,,,28,,,,,,,,35,35,35,,,,57,,,,,,,,',
',,35,,,,,,,28,28,,,,,,,,,28,,,,,57,,,,,,,,,,,,,,,57,,,,,57,,,57,57,',
',,,,28,,,,28,,,,28,,,,28,,,,,,,,,,,,,,,,,,,,,,,,,,28,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,28,,,,,,,,,,,,,,,28,,,,,28,,,28,28,35,35,35,,,,,35',
'35,,,,,,,,,,,,,,,35,,,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35',
'35,35,35,35,35,35,35,35,35,35,,,,,,,35,,,,,,35,,,35,,,,,,,35,,35,,35',
',,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,35,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,35,35,35,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,35,,,35,,35,,,,35,,,,,,,,,,,,35,,,,,,,,,35,35',
',,,,,,,,,35,,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,35',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,35,,,35,35,35,35,,,,',
'35,35,,,35,35,,,,,,,,,,,,,,,,,,,,,,,,35,,,35,,,,,,,,,,,,,,,,,,,,35,',
',,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,35,,,,,,,,,,,',
',,,,,,,,,,35,,35,,,,,,,,,,,,,,35,35,35,35,,35,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'35,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35' ]
        racc_goto_check = arr = ::Array.new(3110, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   206,    23,   266,   nil,    62,    -2,   113,    72,   235,
  -281,   249,   358,  -532,  -629,  -566,   nil,    40,   237,     3,
  -206,   175,     5,    64,   927,  -211,  -347,     9,  1305,   781,
  -176,   -36,   -27,    47,   -19,  2094,   -26,   nil,   nil,    18,
  -167,    86,  -230,  -375,   110,  -324,  -650,   nil,   123,    55,
    63,   -39,   nil,   -18,    21,  -299,   999,  1204,  -497,  -219,
   -56,     5,   nil,   nil,     2,    38,  -249,    -6,   -14,  1119,
    99,    -1,  -270,    74,   -10,  -204,  -255,  -445,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   203,   -68,   -62,
   nil,   200,  -332,  -676,  -474,  -342,   199,  -328,    31,  -565,
   214,   230,   230,  -246,   231,   229,  -436,   231,  -437,  -293,
  -839,    38,  -628,  -219,  -611,  -797,    77,  -454,  -215,  -449,
  -716,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,  -774,  -470,  -478,  -774,  -503,   nil,   196,  -401,
   387,   365,  -500,   232,  -611,  -517,   nil,  -537,  -735,  -820,
  -828,  -172,  -381,   105,  -296,   -16,   -87,  -488,   nil,   nil,
   -90,  -487,   -87,  -484,  -804,  -400,  -502,  -627,   nil,   nil,
   122,   -30,    50,   118,   118,  -256,  -249,   123,   124,   128,
  -544,  -387,  -378,   145,  -517,  -310,   nil,     0,  -463,  -325,
  -653,  -263,  -449,  -627,   nil,  -637,  -792,   nil,   nil,  -110,
  -435 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,   nil,   295,     7,   348,   296,
   nil,   nil,   536,   nil,   855,   nil,   294,   nil,   nil,   nil,
    14,    15,    21,   231,   324,   nil,   nil,   752,   229,   230,
   nil,   nil,    20,   nil,   332,    24,    25,    26,    27,   nil,
   694,   nil,   nil,   nil,   313,   nil,   nil,    28,   424,    35,
   nil,   nil,    37,    40,    39,   nil,   226,   227,   600,   nil,
   132,   432,   131,   134,    78,    79,   nil,    93,    49,   285,
   nil,   425,   nil,   426,   437,   648,   499,   283,   268,    50,
    51,    52,    53,    54,    55,    56,    57,    58,   nil,   269,
    64,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   584,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   724,   566,   nil,   725,   954,   797,   554,   nil,
   555,   nil,   nil,   556,   nil,   558,   664,   nil,   nil,   nil,
   564,   nil,   nil,   nil,   762,   nil,   nil,   nil,   436,   270,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    77,    80,
    82,   nil,   nil,   nil,   nil,   nil,   610,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   839,   553,   nil,   557,   847,
   569,   571,   572,   809,   575,   576,   810,   579,   582,   nil,
   289 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 149, :_reduce_1,
  2, 147, :_reduce_2,
  2, 148, :_reduce_3,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  3, 150, :_reduce_6,
  2, 150, :_reduce_none,
  1, 153, :_reduce_8,
  0, 157, :_reduce_9,
  5, 153, :_reduce_10,
  4, 156, :_reduce_11,
  2, 158, :_reduce_12,
  1, 162, :_reduce_none,
  1, 162, :_reduce_none,
  3, 162, :_reduce_15,
  2, 162, :_reduce_16,
  0, 179, :_reduce_17,
  4, 155, :_reduce_18,
  3, 155, :_reduce_19,
  3, 155, :_reduce_20,
  3, 155, :_reduce_21,
  2, 155, :_reduce_22,
  3, 155, :_reduce_23,
  3, 155, :_reduce_24,
  3, 155, :_reduce_25,
  3, 155, :_reduce_26,
  3, 155, :_reduce_27,
  4, 155, :_reduce_28,
  1, 155, :_reduce_none,
  3, 155, :_reduce_30,
  3, 155, :_reduce_31,
  6, 155, :_reduce_32,
  5, 155, :_reduce_33,
  5, 155, :_reduce_34,
  5, 155, :_reduce_35,
  5, 155, :_reduce_36,
  3, 155, :_reduce_37,
  3, 155, :_reduce_38,
  3, 155, :_reduce_39,
  1, 155, :_reduce_none,
  3, 166, :_reduce_41,
  3, 166, :_reduce_42,
  1, 178, :_reduce_none,
  3, 178, :_reduce_44,
  3, 178, :_reduce_45,
  3, 178, :_reduce_46,
  2, 178, :_reduce_47,
  1, 178, :_reduce_none,
  1, 165, :_reduce_49,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 183, :_reduce_none,
  4, 183, :_reduce_53,
  0, 191, :_reduce_54,
  0, 192, :_reduce_55,
  6, 188, :_reduce_56,
  1, 190, :_reduce_57,
  2, 182, :_reduce_58,
  3, 182, :_reduce_59,
  4, 182, :_reduce_60,
  5, 182, :_reduce_61,
  4, 182, :_reduce_62,
  5, 182, :_reduce_63,
  2, 182, :_reduce_64,
  2, 182, :_reduce_65,
  2, 182, :_reduce_66,
  2, 182, :_reduce_67,
  2, 182, :_reduce_68,
  1, 167, :_reduce_none,
  3, 167, :_reduce_70,
  1, 196, :_reduce_none,
  3, 196, :_reduce_72,
  1, 195, :_reduce_73,
  2, 195, :_reduce_74,
  3, 195, :_reduce_75,
  5, 195, :_reduce_76,
  2, 195, :_reduce_77,
  4, 195, :_reduce_78,
  2, 195, :_reduce_79,
  4, 195, :_reduce_80,
  1, 195, :_reduce_81,
  3, 195, :_reduce_82,
  1, 199, :_reduce_none,
  3, 199, :_reduce_84,
  2, 198, :_reduce_85,
  3, 198, :_reduce_86,
  1, 201, :_reduce_87,
  3, 201, :_reduce_88,
  1, 200, :_reduce_89,
  1, 200, :_reduce_90,
  4, 200, :_reduce_91,
  3, 200, :_reduce_92,
  3, 200, :_reduce_93,
  3, 200, :_reduce_94,
  3, 200, :_reduce_95,
  2, 200, :_reduce_96,
  1, 200, :_reduce_97,
  1, 175, :_reduce_98,
  1, 175, :_reduce_99,
  4, 175, :_reduce_100,
  3, 175, :_reduce_101,
  3, 175, :_reduce_102,
  3, 175, :_reduce_103,
  3, 175, :_reduce_104,
  2, 175, :_reduce_105,
  1, 175, :_reduce_106,
  1, 204, :_reduce_107,
  1, 204, :_reduce_none,
  2, 205, :_reduce_109,
  1, 205, :_reduce_110,
  3, 205, :_reduce_111,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_none,
  1, 206, :_reduce_115,
  1, 206, :_reduce_116,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 163, :_reduce_119,
  1, 163, :_reduce_none,
  1, 164, :_reduce_121,
  0, 212, :_reduce_122,
  4, 164, :_reduce_123,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 207, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  3, 181, :_reduce_195,
  5, 181, :_reduce_196,
  3, 181, :_reduce_197,
  5, 181, :_reduce_198,
  6, 181, :_reduce_199,
  5, 181, :_reduce_200,
  5, 181, :_reduce_201,
  5, 181, :_reduce_202,
  5, 181, :_reduce_203,
  4, 181, :_reduce_204,
  3, 181, :_reduce_205,
  3, 181, :_reduce_206,
  3, 181, :_reduce_207,
  3, 181, :_reduce_208,
  3, 181, :_reduce_209,
  3, 181, :_reduce_210,
  3, 181, :_reduce_211,
  3, 181, :_reduce_212,
  3, 181, :_reduce_213,
  4, 181, :_reduce_214,
  2, 181, :_reduce_215,
  2, 181, :_reduce_216,
  3, 181, :_reduce_217,
  3, 181, :_reduce_218,
  3, 181, :_reduce_219,
  3, 181, :_reduce_220,
  3, 181, :_reduce_221,
  3, 181, :_reduce_222,
  3, 181, :_reduce_223,
  3, 181, :_reduce_224,
  3, 181, :_reduce_225,
  3, 181, :_reduce_226,
  3, 181, :_reduce_227,
  3, 181, :_reduce_228,
  3, 181, :_reduce_229,
  2, 181, :_reduce_230,
  2, 181, :_reduce_231,
  3, 181, :_reduce_232,
  3, 181, :_reduce_233,
  3, 181, :_reduce_234,
  3, 181, :_reduce_235,
  3, 181, :_reduce_236,
  6, 181, :_reduce_237,
  1, 181, :_reduce_none,
  1, 215, :_reduce_239,
  1, 216, :_reduce_none,
  2, 216, :_reduce_241,
  4, 216, :_reduce_242,
  2, 216, :_reduce_243,
  3, 220, :_reduce_244,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  1, 171, :_reduce_247,
  1, 171, :_reduce_248,
  2, 171, :_reduce_249,
  4, 171, :_reduce_250,
  2, 171, :_reduce_251,
  1, 194, :_reduce_252,
  2, 194, :_reduce_253,
  2, 194, :_reduce_254,
  4, 194, :_reduce_255,
  1, 194, :_reduce_256,
  0, 224, :_reduce_257,
  2, 187, :_reduce_258,
  2, 223, :_reduce_259,
  2, 222, :_reduce_260,
  1, 222, :_reduce_none,
  1, 217, :_reduce_262,
  2, 217, :_reduce_263,
  3, 217, :_reduce_264,
  4, 217, :_reduce_265,
  1, 177, :_reduce_266,
  1, 177, :_reduce_267,
  3, 176, :_reduce_268,
  4, 176, :_reduce_269,
  2, 176, :_reduce_270,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_none,
  1, 214, :_reduce_281,
  0, 247, :_reduce_282,
  4, 214, :_reduce_283,
  2, 214, :_reduce_284,
  0, 248, :_reduce_285,
  0, 249, :_reduce_286,
  5, 214, :_reduce_287,
  3, 214, :_reduce_288,
  3, 214, :_reduce_289,
  2, 214, :_reduce_290,
  3, 214, :_reduce_291,
  0, 250, :_reduce_292,
  4, 214, :_reduce_293,
  1, 214, :_reduce_294,
  4, 214, :_reduce_295,
  3, 214, :_reduce_296,
  1, 214, :_reduce_297,
  5, 214, :_reduce_298,
  4, 214, :_reduce_299,
  3, 214, :_reduce_300,
  2, 214, :_reduce_301,
  1, 214, :_reduce_none,
  2, 214, :_reduce_303,
  2, 214, :_reduce_304,
  6, 214, :_reduce_305,
  6, 214, :_reduce_306,
  0, 251, :_reduce_307,
  0, 252, :_reduce_308,
  7, 214, :_reduce_309,
  0, 253, :_reduce_310,
  0, 254, :_reduce_311,
  7, 214, :_reduce_312,
  5, 214, :_reduce_313,
  4, 214, :_reduce_314,
  0, 255, :_reduce_315,
  0, 256, :_reduce_316,
  9, 214, :_reduce_317,
  0, 257, :_reduce_318,
  0, 258, :_reduce_319,
  7, 214, :_reduce_320,
  0, 259, :_reduce_321,
  0, 260, :_reduce_322,
  0, 261, :_reduce_323,
  9, 214, :_reduce_324,
  0, 262, :_reduce_325,
  0, 263, :_reduce_326,
  6, 214, :_reduce_327,
  0, 264, :_reduce_328,
  6, 214, :_reduce_329,
  0, 265, :_reduce_330,
  0, 266, :_reduce_331,
  9, 214, :_reduce_332,
  1, 214, :_reduce_333,
  1, 214, :_reduce_334,
  1, 214, :_reduce_335,
  1, 214, :_reduce_336,
  1, 170, :_reduce_337,
  1, 267, :_reduce_none,
  1, 268, :_reduce_none,
  1, 269, :_reduce_none,
  1, 270, :_reduce_none,
  1, 271, :_reduce_none,
  1, 272, :_reduce_none,
  1, 273, :_reduce_none,
  1, 274, :_reduce_none,
  1, 275, :_reduce_none,
  1, 276, :_reduce_none,
  1, 277, :_reduce_none,
  1, 238, :_reduce_none,
  1, 238, :_reduce_none,
  2, 238, :_reduce_none,
  1, 240, :_reduce_none,
  1, 240, :_reduce_none,
  1, 239, :_reduce_none,
  5, 239, :_reduce_355,
  1, 160, :_reduce_none,
  2, 160, :_reduce_357,
  1, 242, :_reduce_none,
  1, 242, :_reduce_359,
  1, 278, :_reduce_none,
  3, 278, :_reduce_361,
  1, 281, :_reduce_362,
  3, 281, :_reduce_363,
  1, 280, :_reduce_364,
  4, 280, :_reduce_365,
  6, 280, :_reduce_366,
  3, 280, :_reduce_367,
  5, 280, :_reduce_368,
  2, 280, :_reduce_369,
  4, 280, :_reduce_370,
  1, 280, :_reduce_371,
  3, 280, :_reduce_372,
  4, 282, :_reduce_373,
  2, 282, :_reduce_374,
  2, 282, :_reduce_375,
  1, 282, :_reduce_376,
  2, 287, :_reduce_377,
  1, 287, :_reduce_none,
  6, 288, :_reduce_379,
  8, 288, :_reduce_380,
  4, 288, :_reduce_381,
  6, 288, :_reduce_382,
  4, 288, :_reduce_383,
  2, 288, :_reduce_384,
  6, 288, :_reduce_385,
  2, 288, :_reduce_386,
  4, 288, :_reduce_387,
  6, 288, :_reduce_388,
  2, 288, :_reduce_389,
  4, 288, :_reduce_390,
  2, 288, :_reduce_391,
  4, 288, :_reduce_392,
  1, 288, :_reduce_393,
  1, 189, :_reduce_394,
  1, 189, :_reduce_none,
  3, 292, :_reduce_396,
  1, 292, :_reduce_397,
  4, 292, :_reduce_398,
  1, 293, :_reduce_none,
  4, 293, :_reduce_400,
  1, 294, :_reduce_401,
  3, 294, :_reduce_402,
  1, 295, :_reduce_403,
  1, 295, :_reduce_none,
  0, 299, :_reduce_405,
  3, 237, :_reduce_406,
  4, 297, :_reduce_407,
  1, 297, :_reduce_408,
  3, 298, :_reduce_409,
  3, 298, :_reduce_410,
  0, 302, :_reduce_411,
  0, 303, :_reduce_412,
  6, 301, :_reduce_413,
  2, 184, :_reduce_414,
  4, 184, :_reduce_415,
  5, 184, :_reduce_416,
  5, 184, :_reduce_417,
  0, 305, :_reduce_418,
  3, 236, :_reduce_419,
  4, 236, :_reduce_420,
  4, 236, :_reduce_421,
  3, 236, :_reduce_422,
  3, 236, :_reduce_423,
  3, 236, :_reduce_424,
  2, 236, :_reduce_425,
  1, 236, :_reduce_426,
  4, 236, :_reduce_427,
  0, 306, :_reduce_428,
  0, 307, :_reduce_429,
  6, 235, :_reduce_430,
  0, 308, :_reduce_431,
  0, 309, :_reduce_432,
  6, 235, :_reduce_433,
  0, 311, :_reduce_434,
  6, 241, :_reduce_435,
  1, 310, :_reduce_none,
  1, 310, :_reduce_none,
  6, 159, :_reduce_438,
  0, 159, :_reduce_439,
  1, 312, :_reduce_440,
  1, 312, :_reduce_none,
  1, 312, :_reduce_none,
  2, 313, :_reduce_443,
  1, 313, :_reduce_none,
  2, 161, :_reduce_445,
  1, 161, :_reduce_none,
  1, 225, :_reduce_447,
  1, 225, :_reduce_448,
  1, 225, :_reduce_none,
  1, 226, :_reduce_450,
  1, 315, :_reduce_451,
  1, 315, :_reduce_none,
  2, 315, :_reduce_453,
  3, 316, :_reduce_454,
  1, 316, :_reduce_455,
  3, 227, :_reduce_456,
  3, 228, :_reduce_457,
  3, 229, :_reduce_458,
  3, 229, :_reduce_459,
  1, 320, :_reduce_460,
  3, 320, :_reduce_461,
  1, 321, :_reduce_none,
  2, 321, :_reduce_463,
  3, 231, :_reduce_464,
  3, 231, :_reduce_465,
  1, 323, :_reduce_466,
  3, 323, :_reduce_467,
  3, 230, :_reduce_468,
  3, 230, :_reduce_469,
  3, 232, :_reduce_470,
  3, 232, :_reduce_471,
  1, 324, :_reduce_472,
  3, 324, :_reduce_473,
  1, 325, :_reduce_474,
  3, 325, :_reduce_475,
  1, 317, :_reduce_476,
  2, 317, :_reduce_477,
  1, 318, :_reduce_478,
  2, 318, :_reduce_479,
  1, 319, :_reduce_480,
  2, 319, :_reduce_481,
  1, 322, :_reduce_482,
  0, 327, :_reduce_483,
  3, 322, :_reduce_484,
  0, 328, :_reduce_485,
  4, 322, :_reduce_486,
  1, 326, :_reduce_487,
  1, 326, :_reduce_488,
  1, 326, :_reduce_489,
  1, 326, :_reduce_none,
  2, 210, :_reduce_491,
  1, 210, :_reduce_492,
  1, 329, :_reduce_none,
  1, 329, :_reduce_none,
  1, 329, :_reduce_none,
  1, 329, :_reduce_none,
  3, 211, :_reduce_497,
  1, 314, :_reduce_none,
  2, 314, :_reduce_499,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 213, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 203, :_reduce_509,
  1, 203, :_reduce_510,
  1, 203, :_reduce_511,
  1, 203, :_reduce_512,
  1, 203, :_reduce_513,
  1, 203, :_reduce_514,
  1, 203, :_reduce_515,
  1, 233, :_reduce_516,
  1, 233, :_reduce_517,
  1, 169, :_reduce_518,
  1, 169, :_reduce_519,
  1, 174, :_reduce_520,
  1, 174, :_reduce_521,
  1, 243, :_reduce_522,
  0, 330, :_reduce_523,
  4, 243, :_reduce_524,
  2, 243, :_reduce_525,
  3, 245, :_reduce_526,
  2, 245, :_reduce_527,
  4, 331, :_reduce_528,
  2, 331, :_reduce_529,
  2, 331, :_reduce_530,
  1, 331, :_reduce_none,
  2, 333, :_reduce_532,
  0, 333, :_reduce_533,
  6, 300, :_reduce_534,
  8, 300, :_reduce_535,
  4, 300, :_reduce_536,
  6, 300, :_reduce_537,
  4, 300, :_reduce_538,
  6, 300, :_reduce_539,
  2, 300, :_reduce_540,
  4, 300, :_reduce_541,
  6, 300, :_reduce_542,
  2, 300, :_reduce_543,
  4, 300, :_reduce_544,
  2, 300, :_reduce_545,
  4, 300, :_reduce_546,
  1, 300, :_reduce_547,
  0, 300, :_reduce_548,
  1, 296, :_reduce_549,
  1, 296, :_reduce_550,
  1, 296, :_reduce_551,
  1, 296, :_reduce_552,
  1, 279, :_reduce_none,
  1, 279, :_reduce_554,
  1, 335, :_reduce_none,
  1, 336, :_reduce_none,
  3, 336, :_reduce_557,
  1, 289, :_reduce_558,
  3, 289, :_reduce_559,
  1, 337, :_reduce_none,
  2, 338, :_reduce_561,
  1, 338, :_reduce_562,
  2, 339, :_reduce_563,
  1, 339, :_reduce_564,
  1, 283, :_reduce_none,
  3, 283, :_reduce_566,
  1, 332, :_reduce_none,
  3, 332, :_reduce_568,
  1, 340, :_reduce_none,
  1, 340, :_reduce_none,
  2, 284, :_reduce_571,
  1, 284, :_reduce_572,
  3, 341, :_reduce_573,
  3, 342, :_reduce_574,
  1, 290, :_reduce_575,
  3, 290, :_reduce_576,
  1, 334, :_reduce_577,
  3, 334, :_reduce_578,
  1, 343, :_reduce_none,
  1, 343, :_reduce_none,
  2, 291, :_reduce_581,
  1, 291, :_reduce_582,
  1, 344, :_reduce_none,
  1, 344, :_reduce_none,
  2, 286, :_reduce_585,
  2, 285, :_reduce_586,
  0, 285, :_reduce_587,
  1, 246, :_reduce_none,
  0, 345, :_reduce_589,
  4, 246, :_reduce_590,
  1, 234, :_reduce_591,
  2, 234, :_reduce_592,
  1, 219, :_reduce_none,
  3, 219, :_reduce_594,
  3, 346, :_reduce_595,
  3, 346, :_reduce_596,
  4, 346, :_reduce_597,
  2, 346, :_reduce_598,
  2, 346, :_reduce_599,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 304, :_reduce_none,
  1, 304, :_reduce_none,
  1, 304, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 173, :_reduce_none,
  1, 173, :_reduce_none,
  0, 151, :_reduce_none,
  1, 151, :_reduce_none,
  0, 180, :_reduce_none,
  1, 180, :_reduce_none,
  2, 197, :_reduce_none,
  2, 172, :_reduce_none,
  0, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  1, 244, :_reduce_623,
  1, 244, :_reduce_none,
  1, 154, :_reduce_none,
  2, 154, :_reduce_626,
  0, 152, :_reduce_627 ]

racc_reduce_n = 628

racc_shift_n = 1059

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tREGEXP_END => 63,
  :tUPLUS => 64,
  :tUMINUS => 65,
  :tUMINUS_NUM => 66,
  :tPOW => 67,
  :tCMP => 68,
  :tEQ => 69,
  :tEQQ => 70,
  :tNEQ => 71,
  :tGEQ => 72,
  :tLEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tMATCH => 76,
  :tNMATCH => 77,
  :tDOT => 78,
  :tDOT2 => 79,
  :tDOT3 => 80,
  :tAREF => 81,
  :tASET => 82,
  :tLSHFT => 83,
  :tRSHFT => 84,
  :tCOLON2 => 85,
  :tCOLON3 => 86,
  :tOP_ASGN => 87,
  :tASSOC => 88,
  :tLPAREN => 89,
  :tLPAREN2 => 90,
  :tRPAREN => 91,
  :tLPAREN_ARG => 92,
  :tLBRACK => 93,
  :tLBRACK2 => 94,
  :tRBRACK => 95,
  :tLBRACE => 96,
  :tLBRACE_ARG => 97,
  :tSTAR => 98,
  :tSTAR2 => 99,
  :tAMPER => 100,
  :tAMPER2 => 101,
  :tTILDE => 102,
  :tPERCENT => 103,
  :tDIVIDE => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAMBDA => 132,
  :tLAMBEG => 133,
  :tDSTAR => 134,
  :tCHAR => 135,
  :tSYMBOLS_BEG => 136,
  :tQSYMBOLS_BEG => 137,
  :tSTRING_DEND => 138,
  :tUBANG => 139,
  :tRATIONAL => 140,
  :tIMAGINARY => 141,
  :tLABEL_END => 142,
  :tLONELY => 143,
  :tEQL => 144,
  :tLOWEST => 145 }

racc_nt_base = 146

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tDSTAR",
  "tCHAR",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DEND",
  "tUBANG",
  "tRATIONAL",
  "tIMAGINARY",
  "tLABEL_END",
  "tLONELY",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "@2",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@3",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "block_call",
  "dot_or_colon",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_param",
  "fcall",
  "@4",
  "@5",
  "operation",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@6",
  "simple_numeric",
  "primary",
  "arg_value",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@7",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "@26",
  "@27",
  "k_begin",
  "k_if",
  "k_unless",
  "k_while",
  "k_until",
  "k_case",
  "k_for",
  "k_class",
  "k_module",
  "k_def",
  "k_end",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@28",
  "f_args",
  "do_block",
  "@29",
  "@30",
  "operation3",
  "@31",
  "@32",
  "@33",
  "@34",
  "@35",
  "cases",
  "@36",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@37",
  "@38",
  "sym",
  "@39",
  "args_tail",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_asgn",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "@40",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_2(val, _values, result)
                      result = new_compstmt val
                    
    result
end

def _reduce_3(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 4 omitted

# reduce 5 omitted

def _reduce_6(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 7 omitted

def _reduce_8(val, _values, result)
                      result = val[0]

                      # TODO: remove once I have more confidence this is fixed
                      # result.each_of_type :call_args do |s|
                      #   debug20 666, s, result
                      # end
                    
    result
end

def _reduce_9(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 1
                        yyerror "BEGIN in method"
                      end
                      self.env.extend
                    
    result
end

def _reduce_10(val, _values, result)
                      result = new_iter s(:preexe), nil, val[3]
                    
    result
end

def _reduce_11(val, _values, result)
                      result = new_body val
                    
    result
end

def _reduce_12(val, _values, result)
                      result = new_compstmt val
                    
    result
end

# reduce 13 omitted

# reduce 14 omitted

def _reduce_15(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

def _reduce_16(val, _values, result)
                      result = val[1]
                      debug20 2, val, result
                    
    result
end

def _reduce_17(val, _values, result)
                      lexer.lex_state = :expr_fname
                      result = self.lexer.lineno
                    
    result
end

def _reduce_18(val, _values, result)
                      result = s(:alias, val[1], val[3]).line(val[2])
                    
    result
end

def _reduce_19(val, _values, result)
                      result = s(:valias, val[1].to_sym, val[2].to_sym)
                    
    result
end

def _reduce_20(val, _values, result)
                      result = s(:valias, val[1].to_sym, :"$#{val[2]}")
                    
    result
end

def _reduce_21(val, _values, result)
                      yyerror "can't make alias for the number variables"
                    
    result
end

def _reduce_22(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_23(val, _values, result)
                      result = new_if val[2], val[0], nil
                    
    result
end

def _reduce_24(val, _values, result)
                      result = new_if val[2], nil, val[0]
                    
    result
end

def _reduce_25(val, _values, result)
                      result = new_while val[0], val[2], true
                    
    result
end

def _reduce_26(val, _values, result)
                      result = new_until val[0], val[2], true
                    
    result
end

def _reduce_27(val, _values, result)
                      result = s(:rescue, val[0], new_resbody(s(:array), val[2]))
                    
    result
end

def _reduce_28(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 3
                        yyerror "END in method; use at_exit"
                      end
                      result = new_iter s(:postexe), 0, val[2]
                    
    result
end

# reduce 29 omitted

def _reduce_30(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_31(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_32(val, _values, result)
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_33(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result.sexp_type = :safe_op_asgn
                      end
                      result.line = val[0].line
                    
    result
end

def _reduce_34(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result.sexp_type = :safe_op_asgn
                      end
                      result.line = val[0].line
                    
    result
end

def _reduce_35(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 4, val, result
                    
    result
end

def _reduce_36(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 5, val, result
                    
    result
end

def _reduce_37(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_38(val, _values, result)
                      result = new_assign val[0], s(:svalue, val[2])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = new_masgn val[0], val[2]
                    
    result
end

# reduce 40 omitted

def _reduce_41(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

def _reduce_42(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

# reduce 43 omitted

def _reduce_44(val, _values, result)
                      result = logical_op :and, val[0], val[2]
                    
    result
end

def _reduce_45(val, _values, result)
                      result = logical_op :or, val[0], val[2]
                    
    result
end

def _reduce_46(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_47(val, _values, result)
                      result = s(:call, val[1], :"!")
                    
    result
end

# reduce 48 omitted

def _reduce_49(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

def _reduce_53(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_54(val, _values, result)
                      self.env.extend(:dynamic)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_55(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_56(val, _values, result)
                      result = new_iter nil, val[2], val[4]
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_57(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_58(val, _values, result)
                      result = val[0].concat val[1].sexp_body # REFACTOR pattern
                    
    result
end

def _reduce_59(val, _values, result)
                      result = val[0].concat val[1].sexp_body
                      if val[2] then
                        block_dup_check result, val[2]

                        result, operation = val[2], result
                        result.insert 1, operation
                      end
                    
    result
end

def _reduce_60(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]
                    
    result
end

def _reduce_61(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args, val[1]

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_62(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_63(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_64(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_65(val, _values, result)
                      result = new_yield val[1]
                    
    result
end

def _reduce_66(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_67(val, _values, result)
                      line = val[0].last
                      result = s(:break, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_68(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)
                    
    result
end

# reduce 69 omitted

def _reduce_70(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 71 omitted

def _reduce_72(val, _values, result)
                      result = s(:masgn, s(:array, val[1]))
                    
    result
end

def _reduce_73(val, _values, result)
                      result = s(:masgn, val[0])
                    
    result
end

def _reduce_74(val, _values, result)
                      result = s(:masgn, val[0] << val[1].compact)
                    
    result
end

def _reduce_75(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat, val[2]))
                    
    result
end

def _reduce_76(val, _values, result)
                      ary1, _, splat, _, ary2 = val

                      result = list_append ary1, s(:splat, splat)
                      result.concat ary2.sexp_body
                      result = s(:masgn, result)
                    
    result
end

def _reduce_77(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat))
                    
    result
end

def _reduce_78(val, _values, result)
                      ary = list_append val[0], s(:splat)
                      ary.concat val[3].sexp_body
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_79(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat, val[1])))
                    
    result
end

def _reduce_80(val, _values, result)
                      ary = s(:array, s(:splat, val[1]))
                      ary.concat val[3].sexp_body
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_81(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat)))
                    
    result
end

def _reduce_82(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat), *val[2].sexp_body))
                    
    result
end

# reduce 83 omitted

def _reduce_84(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_85(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_86(val, _values, result)
                      result = val[0] << val[1].compact
                    
    result
end

def _reduce_87(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_88(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_89(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_90(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_91(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_92(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_93(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_94(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_95(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 7
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym), nil)
                    
    result
end

def _reduce_96(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 8
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, nil, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_97(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_98(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_99(val, _values, result)
                      result = self.assignable val[0]
                      debug20 9, val, result
                    
    result
end

def _reduce_100(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_101(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_102(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_103(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_104(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 10
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym))
                    
    result
end

def _reduce_105(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 11
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_106(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_107(val, _values, result)
                      yyerror "class/module name must be CONSTANT"
                    
    result
end

# reduce 108 omitted

def _reduce_109(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_110(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

def _reduce_111(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

def _reduce_115(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

def _reduce_116(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

# reduce 117 omitted

# reduce 118 omitted

def _reduce_119(val, _values, result)
                      result = s(:lit, val[0].to_sym)
                    
    result
end

# reduce 120 omitted

def _reduce_121(val, _values, result)
                      result = new_undef val[0]
                    
    result
end

def _reduce_122(val, _values, result)
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_123(val, _values, result)
                      result = new_undef val[0], val[3]
                    
    result
end

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

def _reduce_195(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

def _reduce_196(val, _values, result)
                      result = new_assign val[0], s(:rescue, val[2], new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_197(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_198(val, _values, result)
                      result = new_op_asgn val
                      result = s(:rescue, result, new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_199(val, _values, result)
                      val[2].sexp_type = :arglist if val[2]
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = new_op_asgn2 val
                    
    result
end

def _reduce_201(val, _values, result)
                      result = new_op_asgn2 val
                    
    result
end

def _reduce_202(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_203(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_204(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_205(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_206(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)..(v2.last))
                      else
                        result = s(:dot2, v1, v2)
                      end
                    
    result
end

def _reduce_207(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)...(v2.last))
                      else
                        result = s(:dot3, v1, v2)
                      end
                    
    result
end

def _reduce_208(val, _values, result)
                      result = new_call val[0], :+, argl(val[2])
                    
    result
end

def _reduce_209(val, _values, result)
                      result = new_call val[0], :-, argl(val[2])
                    
    result
end

def _reduce_210(val, _values, result)
                      result = new_call val[0], :*, argl(val[2])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = new_call val[0], :"/", argl(val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = new_call val[0], :"%", argl(val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = new_call val[0], :**, argl(val[2])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", argl(val[3])), :"-@")
                    
    result
end

def _reduce_215(val, _values, result)
                      result = new_call val[1], :"+@"
                    
    result
end

def _reduce_216(val, _values, result)
                      result = new_call val[1], :"-@"
                    
    result
end

def _reduce_217(val, _values, result)
                      result = new_call val[0], :"|", argl(val[2])
                    
    result
end

def _reduce_218(val, _values, result)
                      result = new_call val[0], :"^", argl(val[2])
                    
    result
end

def _reduce_219(val, _values, result)
                      result = new_call val[0], :"&", argl(val[2])
                    
    result
end

def _reduce_220(val, _values, result)
                      result = new_call val[0], :"<=>", argl(val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = new_call val[0], :">", argl(val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = new_call val[0], :">=", argl(val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = new_call val[0], :"<", argl(val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = new_call val[0], :"<=", argl(val[2])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = new_call val[0], :"==", argl(val[2])
                    
    result
end

def _reduce_226(val, _values, result)
                      result = new_call val[0], :"===", argl(val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = new_call val[0], :"!=", argl(val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = new_match val[0], val[2]
                    
    result
end

def _reduce_229(val, _values, result)
                      result = s(:not, new_match(val[0], val[2]))
                    
    result
end

def _reduce_230(val, _values, result)
                      result = new_call val[1], :"!"
                    
    result
end

def _reduce_231(val, _values, result)
                      result = new_call value_expr(val[1]), :"~"
                    
    result
end

def _reduce_232(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", argl(val[2])
                    
    result
end

def _reduce_233(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", argl(val[2])
                    
    result
end

def _reduce_234(val, _values, result)
                      result = logical_op :and, val[0], val[2]
                    
    result
end

def _reduce_235(val, _values, result)
                      result = logical_op :or, val[0], val[2]
                    
    result
end

def _reduce_236(val, _values, result)
                      result = s(:defined, val[2])
                    
    result
end

def _reduce_237(val, _values, result)
                      result = s(:if, val[0], val[2], val[5])
                    
    result
end

# reduce 238 omitted

def _reduce_239(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 240 omitted

def _reduce_241(val, _values, result)
                      result = args [val[0]]
                    
    result
end

def _reduce_242(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_243(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

def _reduce_244(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 245 omitted

# reduce 246 omitted

def _reduce_247(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_248(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_249(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_250(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_251(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

def _reduce_252(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = call_args val
                    
    result
end

def _reduce_253(val, _values, result)
                      result = call_args val
                      result = self.arg_blk_pass val[0], val[1]
                    
    result
end

def _reduce_254(val, _values, result)
                      result = call_args [array_to_hash(val[0])]
                      result = self.arg_blk_pass result, val[1]
                    
    result
end

def _reduce_255(val, _values, result)
                      result = call_args [val[0], array_to_hash(val[2])]
                      result = self.arg_blk_pass result, val[3]
                    
    result
end

def _reduce_256(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_257(val, _values, result)
                      result = lexer.cmdarg.stack.dup # TODO: smell?
                      lexer.cmdarg.push true
                    
    result
end

def _reduce_258(val, _values, result)
                      lexer.cmdarg.stack.replace val[0]
                      result = val[1]
                    
    result
end

def _reduce_259(val, _values, result)
                      result = s(:block_pass, val[1])
                    
    result
end

def _reduce_260(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 261 omitted

def _reduce_262(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_263(val, _values, result)
                      result = s(:array, s(:splat, val[1]))
                    
    result
end

def _reduce_264(val, _values, result)
                      result = self.list_append val[0], val[2]
                    
    result
end

def _reduce_265(val, _values, result)
                      result = self.list_append val[0], s(:splat, val[3])
                    
    result
end

def _reduce_266(val, _values, result)
                      result = new_masgn_arg val[0]
                    
    result
end

def _reduce_267(val, _values, result)
                      result = new_masgn_arg val[0], :wrap
                    
    result
end

def _reduce_268(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_269(val, _values, result)
                      result = self.arg_concat val[0], val[3]
                    
    result
end

def _reduce_270(val, _values, result)
                      result = s(:splat, val[1])
                    
    result
end

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

# reduce 280 omitted

def _reduce_281(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_282(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_283(val, _values, result)
                      unless val[2] then
                        result = s(:nil)
                      else
                        result = s(:begin, val[2])
                      end

                      result.line = val[1]
                    
    result
end

def _reduce_284(val, _values, result)
                      debug20 13, val, result
                    
    result
end

def _reduce_285(val, _values, result)
                      result = self.lexer.cmdarg.stack.dup
                      lexer.cmdarg.stack.replace [false] # TODO add api for these
                    
    result
end

def _reduce_286(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_287(val, _values, result)
                      warning "(...) interpreted as grouped expression"
                      lexer.cmdarg.stack.replace val[1]
                      result = val[2]
                    
    result
end

def _reduce_288(val, _values, result)
                      result = val[1] || s(:nil)
                      result.paren = true
                    
    result
end

def _reduce_289(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

def _reduce_290(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_291(val, _values, result)
                      result = val[1] || s(:array)
                      result.sexp_type = :array # aref_args is :args
                    
    result
end

def _reduce_292(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_293(val, _values, result)
                      result = new_hash val
                    
    result
end

def _reduce_294(val, _values, result)
                      result = s(:return)
                    
    result
end

def _reduce_295(val, _values, result)
                      result = new_yield val[2]
                    
    result
end

def _reduce_296(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_297(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_298(val, _values, result)
                      result = s(:defined, val[3])
                    
    result
end

def _reduce_299(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_300(val, _values, result)
                      debug20 14, val, result
                    
    result
end

def _reduce_301(val, _values, result)
                      oper, iter = val[0], val[1]
                      call = oper # FIX
                      iter.insert 1, call
                      result = iter
                      call.line = iter.line
                    
    result
end

# reduce 302 omitted

def _reduce_303(val, _values, result)
                      call, iter = val[0], val[1]
                      block_dup_check call, iter
                      iter.insert 1, call # FIX
                      result = iter
                    
    result
end

def _reduce_304(val, _values, result)
                      result = val[1] # TODO: fix lineno
                    
    result
end

def _reduce_305(val, _values, result)
                      result = new_if val[1], val[3], val[4]
                    
    result
end

def _reduce_306(val, _values, result)
                      result = new_if val[1], val[4], val[3]
                    
    result
end

def _reduce_307(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_308(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_309(val, _values, result)
                      result = new_while val[5], val[2], true
                    
    result
end

def _reduce_310(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_311(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_312(val, _values, result)
                      result = new_until val[5], val[2], true
                    
    result
end

def _reduce_313(val, _values, result)
                      (_, line), expr, _, body, _ = val
                      result = new_case expr, body, line
                    
    result
end

def _reduce_314(val, _values, result)
                      (_, line), _, body, _ = val
                      result = new_case nil, body, line
                    
    result
end

def _reduce_315(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_316(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_317(val, _values, result)
                      result = new_for val[4], val[1], val[7]
                    
    result
end

def _reduce_318(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_319(val, _values, result)
                      self.comments.push self.lexer.comments
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend
                    
    result
end

def _reduce_320(val, _values, result)
                      result = new_class val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_321(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_322(val, _values, result)
                      result = self.in_def
                      self.in_def = false
                    
    result
end

def _reduce_323(val, _values, result)
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend
                    
    result
end

def _reduce_324(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_325(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_326(val, _values, result)
                      self.comments.push self.lexer.comments
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend
                    
    result
end

def _reduce_327(val, _values, result)
                      result = new_module val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_328(val, _values, result)
                      result = [self.in_def, self.lexer.cmdarg.stack.dup]

                      self.comments.push self.lexer.comments
                      self.in_def = true
                      self.env.extend
                      # TODO: local->cmdargs = cmdarg_stack;
                      # TODO: port local_push_gen and local_pop_gen
                      lexer.cmdarg.stack.replace [false]
                    
    result
end

def _reduce_329(val, _values, result)
                      in_def, cmdarg = val[2]

                      result = new_defn val

                      lexer.cmdarg.stack.replace cmdarg
                      self.env.unextend
                      self.in_def = in_def
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_330(val, _values, result)
                      self.comments.push self.lexer.comments
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_331(val, _values, result)
                      self.in_single += 1
                      self.env.extend
                      lexer.lex_state = :expr_endfn # force for args
                      result = [lexer.lineno, self.lexer.cmdarg.stack.dup]
                      lexer.cmdarg.stack.replace [false]
                    
    result
end

def _reduce_332(val, _values, result)
                      line, cmdarg = val[5]
                      result = new_defs val
                      result[3].line line

                      lexer.cmdarg.stack.replace cmdarg

                      self.env.unextend
                      self.in_single -= 1
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_333(val, _values, result)
                      result = s(:break)
                    
    result
end

def _reduce_334(val, _values, result)
                      result = s(:next)
                    
    result
end

def _reduce_335(val, _values, result)
                      result = s(:redo)
                    
    result
end

def _reduce_336(val, _values, result)
                      result = s(:retry)
                    
    result
end

def _reduce_337(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 338 omitted

# reduce 339 omitted

# reduce 340 omitted

# reduce 341 omitted

# reduce 342 omitted

# reduce 343 omitted

# reduce 344 omitted

# reduce 345 omitted

# reduce 346 omitted

# reduce 347 omitted

# reduce 348 omitted

# reduce 349 omitted

# reduce 350 omitted

# reduce 351 omitted

# reduce 352 omitted

# reduce 353 omitted

# reduce 354 omitted

def _reduce_355(val, _values, result)
                      result = s(:if, val[1], val[3], val[4])
                    
    result
end

# reduce 356 omitted

def _reduce_357(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 358 omitted

def _reduce_359(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK
                    
    result
end

# reduce 360 omitted

def _reduce_361(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_362(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_363(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_364(val, _values, result)
                      args, = val

                      result = block_var args
                    
    result
end

def _reduce_365(val, _values, result)
                      args, _, _, splat = val

                      result = block_var args, "*#{splat}".to_sym
                    
    result
end

def _reduce_366(val, _values, result)
                      args, _, _, splat, _, args2 = val

                      result = block_var args, "*#{splat}".to_sym, args2
                    
    result
end

def _reduce_367(val, _values, result)
                      args, _, _ = val

                      result = block_var args, :*
                    
    result
end

def _reduce_368(val, _values, result)
                      args, _, _, _, args2 = val

                      result = block_var args, :*, args2
                    
    result
end

def _reduce_369(val, _values, result)
                      _, splat = val

                      result = block_var :"*#{splat}"
                    
    result
end

def _reduce_370(val, _values, result)
                      _, splat, _, args = val

                      result = block_var :"*#{splat}", args
                    
    result
end

def _reduce_371(val, _values, result)
                      result = block_var :*
                    
    result
end

def _reduce_372(val, _values, result)
                      _, _, args = val

                      result = block_var :*, args
                    
    result
end

def _reduce_373(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_374(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_375(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_376(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_377(val, _values, result)
                      result = args val
                    
    result
end

# reduce 378 omitted

def _reduce_379(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_380(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_381(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_382(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_383(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_384(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_385(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_386(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_387(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_388(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_389(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_390(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_391(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_392(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_393(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_394(val, _values, result)
 result = 0 
    result
end

# reduce 395 omitted

def _reduce_396(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_397(val, _values, result)
                      self.lexer.command_start = true
                      result = s(:args)
                    
    result
end

def _reduce_398(val, _values, result)
                      result = args val
                    
    result
end

# reduce 399 omitted

def _reduce_400(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_401(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_402(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_403(val, _values, result)
                      result = s(:shadow, val[0].to_sym)
                    
    result
end

# reduce 404 omitted

def _reduce_405(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

                      result = lexer.lpar_beg
                      lexer.paren_nest += 1
                      lexer.lpar_beg = lexer.paren_nest
                    
    result
end

def _reduce_406(val, _values, result)
                      lpar, args, body = val
                      lexer.lpar_beg = lpar

                      call = new_call nil, :lambda
                      result = new_iter call, args, body
                      self.env.unextend
                    
    result
end

def _reduce_407(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_408(val, _values, result)
                      result = val[0]
                      result = 0 if result == s(:args)
                    
    result
end

def _reduce_409(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_410(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_411(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_412(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_413(val, _values, result)
                      args   = val[2]
                      body   = val[4]
                      result = new_iter nil, args, body
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_414(val, _values, result)
                      # TODO:
                      ## if (nd_type($1) == NODE_YIELD) {
                      ##     compile_error(PARSER_ARG "block given to yield");

                      syntax_error "Both block arg and actual block given." if
                        val[0].block_pass?

                      val = invert_block_call val if inverted? val

                      result = val[1]
                      result.insert 1, val[0]
                    
    result
end

def _reduce_415(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_416(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_417(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_418(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_419(val, _values, result)
                      args = self.call_args val[2..-1]
                      result = val[0].concat args.sexp_body
                    
    result
end

def _reduce_420(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]
                    
    result
end

def _reduce_421(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_422(val, _values, result)
                      result = new_call val[0], val[2].to_sym
                    
    result
end

def _reduce_423(val, _values, result)
                      result = new_call val[0], :call, val[2], val[1]
                    
    result
end

def _reduce_424(val, _values, result)
                      result = new_call val[0], :call, val[2]
                    
    result
end

def _reduce_425(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_426(val, _values, result)
                      result = s(:zsuper)
                    
    result
end

def _reduce_427(val, _values, result)
                      result = new_aref val
                    
    result
end

def _reduce_428(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_429(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_430(val, _values, result)
                      _, line, args, _, body, _ = val

                      result = new_iter nil, args, body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_431(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_432(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_433(val, _values, result)
                      _, line, args, _, body, _ = val

                      result = new_iter nil, args, body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_434(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_435(val, _values, result)
                      result = new_when(val[2], val[4])
                      result.line = val[1]
                      result << val[5] if val[5]
                    
    result
end

# reduce 436 omitted

# reduce 437 omitted

def _reduce_438(val, _values, result)
                      (_, line), klasses, var, _, body, rest = val

                      klasses ||= s(:array)
                      klasses << new_assign(var, s(:gvar, :"$!")) if var
                      klasses.line line

                      result = new_resbody(klasses, body)
                      result << rest if rest # UGH, rewritten above
                    
    result
end

def _reduce_439(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_440(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

# reduce 441 omitted

# reduce 442 omitted

def _reduce_443(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 444 omitted

def _reduce_445(val, _values, result)
                      _, body = val

                      result = body || s(:nil)
                    
    result
end

# reduce 446 omitted

def _reduce_447(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

def _reduce_448(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

# reduce 449 omitted

def _reduce_450(val, _values, result)
                      val[0] = s(:dstr, val[0].value) if val[0].sexp_type == :evstr
                      result = val[0]
                    
    result
end

def _reduce_451(val, _values, result)
                      debug20 23, val, result
                    
    result
end

# reduce 452 omitted

def _reduce_453(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_454(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_455(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_456(val, _values, result)
                      result = new_xstring val[1]
                    
    result
end

def _reduce_457(val, _values, result)
                      result = new_regexp val
                    
    result
end

def _reduce_458(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_459(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_460(val, _values, result)
                      result = new_word_list
                    
    result
end

def _reduce_461(val, _values, result)
                      result = val[0].dup << new_word_list_entry(val)
                    
    result
end

# reduce 462 omitted

def _reduce_463(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_464(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_465(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_466(val, _values, result)
                      result = new_symbol_list
                    
    result
end

def _reduce_467(val, _values, result)
                      result = val[0].dup << new_symbol_list_entry(val)
                    
    result
end

def _reduce_468(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_469(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_470(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_471(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_472(val, _values, result)
                      result = new_qword_list
                    
    result
end

def _reduce_473(val, _values, result)
                      result = val[0].dup << new_qword_list_entry(val)
                    
    result
end

def _reduce_474(val, _values, result)
                      result = new_qsym_list
                    
    result
end

def _reduce_475(val, _values, result)
                      result = val[0].dup << new_qsym_list_entry(val)
                    
    result
end

def _reduce_476(val, _values, result)
                      result = s(:str, "")
                    
    result
end

def _reduce_477(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_478(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_479(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_480(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_481(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_482(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_483(val, _values, result)
                      result = lexer.lex_strterm

                      lexer.lex_strterm = nil
                      lexer.lex_state = :expr_beg # TODO: expr_value ?
                    
    result
end

def _reduce_484(val, _values, result)
                      lexer.lex_strterm = val[1]
                      result = s(:evstr, val[2])
                    
    result
end

def _reduce_485(val, _values, result)
                      result = [lexer.lex_strterm,
                                lexer.brace_nest,
                                lexer.string_nest, # TODO: remove
                                lexer.cond.store,
                                lexer.cmdarg.store,
                                lexer.lex_state,
                               ]

                      lexer.lex_strterm = nil
                      lexer.brace_nest  = 0
                      lexer.string_nest = 0

                      lexer.lex_state   = :expr_value
                    
    result
end

def _reduce_486(val, _values, result)
                      # TODO: tRCURLY -> tSTRING_END
                      _, memo, stmt, _ = val

                      lex_strterm, brace_nest, string_nest, oldcond, oldcmdarg, oldlex_state = memo

                      lexer.lex_strterm = lex_strterm
                      lexer.brace_nest  = brace_nest
                      lexer.string_nest = string_nest

                      lexer.cond.restore oldcond
                      lexer.cmdarg.restore oldcmdarg

                      lexer.lex_state = oldlex_state

                      case stmt
                      when Sexp then
                        case stmt.sexp_type
                        when :str, :dstr, :evstr then
                          result = stmt
                        else
                          result = s(:evstr, stmt)
                        end
                      when nil then
                        result = s(:evstr)
                      else
                        debug20 25
                        raise "unknown string body: #{stmt.inspect}"
                      end
                    
    result
end

def _reduce_487(val, _values, result)
 result = s(:gvar, val[0].to_sym) 
    result
end

def _reduce_488(val, _values, result)
 result = s(:ivar, val[0].to_sym) 
    result
end

def _reduce_489(val, _values, result)
 result = s(:cvar, val[0].to_sym) 
    result
end

# reduce 490 omitted

def _reduce_491(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1].to_sym
                    
    result
end

def _reduce_492(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

# reduce 493 omitted

# reduce 494 omitted

# reduce 495 omitted

# reduce 496 omitted

def _reduce_497(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1]

                      result ||= s(:str, "")

                      case result.sexp_type
                      when :dstr then
                        result.sexp_type = :dsym
                      when :str then
                        result = s(:lit, result.last.to_sym)
                      when :evstr then
                        result = s(:dsym, "", result)
                      else
                        debug20 26, val, result
                      end
                    
    result
end

# reduce 498 omitted

def _reduce_499(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

# reduce 500 omitted

# reduce 501 omitted

# reduce 502 omitted

# reduce 503 omitted

# reduce 504 omitted

# reduce 505 omitted

# reduce 506 omitted

# reduce 507 omitted

# reduce 508 omitted

def _reduce_509(val, _values, result)
 result = s(:nil)   
    result
end

def _reduce_510(val, _values, result)
 result = s(:self)  
    result
end

def _reduce_511(val, _values, result)
 result = s(:true)  
    result
end

def _reduce_512(val, _values, result)
 result = s(:false) 
    result
end

def _reduce_513(val, _values, result)
 result = s(:str, self.file) 
    result
end

def _reduce_514(val, _values, result)
 result = s(:lit, lexer.lineno) 
    result
end

def _reduce_515(val, _values, result)
                      result =
                        if defined? Encoding then
                          s(:colon2, s(:const, :Encoding), :UTF_8)
                        else
                          s(:str, "Unsupported!")
                        end
                    
    result
end

def _reduce_516(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_517(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_518(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_519(val, _values, result)
                      result = self.assignable val[0]
                      debug20 29, val, result
                    
    result
end

def _reduce_520(val, _values, result)
 result = s(:nth_ref,  val[0]) 
    result
end

def _reduce_521(val, _values, result)
 result = s(:back_ref, val[0]) 
    result
end

def _reduce_522(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_523(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_524(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_525(val, _values, result)
                      yyerrok
                      result = nil
                      debug20 30, val, result
                    
    result
end

def _reduce_526(val, _values, result)
                      result = val[1]
                      self.lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                      # TODO:
                      # $<num>$ = parser->parser_in_kwarg;
                      # parser->parser_in_kwarg = 1;
                    
    result
end

def _reduce_527(val, _values, result)
                      # TODO: parser->parser_in_kwarg = $<num>1;
                      result = val[0]
                      self.lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                    
    result
end

def _reduce_528(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_529(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_530(val, _values, result)
                      result = args val
                    
    result
end

# reduce 531 omitted

def _reduce_532(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_533(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_534(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_535(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_536(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_537(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_538(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_539(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_540(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_541(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_542(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_543(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_544(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_545(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_546(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_547(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_548(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_549(val, _values, result)
                      yyerror "formal argument cannot be a constant"
                    
    result
end

def _reduce_550(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"
                    
    result
end

def _reduce_551(val, _values, result)
                      yyerror "formal argument cannot be a global variable"
                    
    result
end

def _reduce_552(val, _values, result)
                      yyerror "formal argument cannot be a class variable"
                    
    result
end

# reduce 553 omitted

def _reduce_554(val, _values, result)
                      identifier = val[0].to_sym
                      self.env[identifier] = :lvar

                      result = identifier
                    
    result
end

# reduce 555 omitted

# reduce 556 omitted

def _reduce_557(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_558(val, _values, result)
                      case val[0]
                      when Symbol then
                        result = s(:args)
                        result << val[0]
                      when Sexp then
                        result = val[0]
                      else
                        debug20 32
                        raise "Unknown f_arg type: #{val.inspect}"
                      end
                    
    result
end

def _reduce_559(val, _values, result)
                      list, _, item = val

                      if list.sexp_type == :args then
                        result = list
                      else
                        result = s(:args, list)
                      end

                      result << item
                    
    result
end

# reduce 560 omitted

def _reduce_561(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

def _reduce_562(val, _values, result)
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier))
                    
    result
end

def _reduce_563(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

def _reduce_564(val, _values, result)
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier))
                    
    result
end

# reduce 565 omitted

def _reduce_566(val, _values, result)
                      list, _, item = val
                      result = list << item.last
                    
    result
end

# reduce 567 omitted

def _reduce_568(val, _values, result)
                      result = args val
                    
    result
end

# reduce 569 omitted

# reduce 570 omitted

def _reduce_571(val, _values, result)
                      result = :"**#{val[1]}"
                    
    result
end

def _reduce_572(val, _values, result)
                      result = :"**"
                    
    result
end

def _reduce_573(val, _values, result)
                      result = self.assignable val[0], val[2]
                      # TODO: detect duplicate names
                    
    result
end

def _reduce_574(val, _values, result)
                      result = self.assignable val[0], val[2]
                    
    result
end

def _reduce_575(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_576(val, _values, result)
                      result = val[0]
                      result << val[2]
                    
    result
end

def _reduce_577(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_578(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 579 omitted

# reduce 580 omitted

def _reduce_581(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      name = val[1].to_sym
                      self.assignable name
                      result = :"*#{name}"
                    
    result
end

def _reduce_582(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = name
                    
    result
end

# reduce 583 omitted

# reduce 584 omitted

def _reduce_585(val, _values, result)
                      identifier = val[1].to_sym

                      self.env[identifier] = :lvar
                      result = "&#{identifier}".to_sym
                    
    result
end

def _reduce_586(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_587(val, _values, result)
                      result = nil
                    
    result
end

# reduce 588 omitted

def _reduce_589(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_590(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result.sexp_type == :lit
                    
    result
end

def _reduce_591(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_592(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 593 omitted

def _reduce_594(val, _values, result)
                      list = val[0].dup
                      more = val[2].sexp_body
                      list.push(*more) unless more.empty?
                      result = list
                      result.sexp_type = :hash
                    
    result
end

def _reduce_595(val, _values, result)
                      result = s(:array, val[0], val[2])
                    
    result
end

def _reduce_596(val, _values, result)
                      result = s(:array, s(:lit, val[0][0].to_sym), val.last)
                    
    result
end

def _reduce_597(val, _values, result)
                      _, sym, _, value = val
                      sym.sexp_type = :dsym
                      result = s(:array, sym, value)
                    
    result
end

def _reduce_598(val, _values, result)
                      raise "not yet: #{val.inspect}"
                      # result = s(:array, s(:lit, val[1].to_sym), val[1])
                    
    result
end

def _reduce_599(val, _values, result)
                      result = s(:array, s(:kwsplat, val[1]))
                    
    result
end

# reduce 600 omitted

# reduce 601 omitted

# reduce 602 omitted

# reduce 603 omitted

# reduce 604 omitted

# reduce 605 omitted

# reduce 606 omitted

# reduce 607 omitted

# reduce 608 omitted

# reduce 609 omitted

# reduce 610 omitted

# reduce 611 omitted

# reduce 612 omitted

# reduce 613 omitted

# reduce 614 omitted

# reduce 615 omitted

# reduce 616 omitted

# reduce 617 omitted

# reduce 618 omitted

# reduce 619 omitted

# reduce 620 omitted

# reduce 621 omitted

# reduce 622 omitted

def _reduce_623(val, _values, result)
 yyerrok 
    result
end

# reduce 624 omitted

# reduce 625 omitted

def _reduce_626(val, _values, result)
 yyerrok 
    result
end

def _reduce_627(val, _values, result)
 result = nil; 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Ruby24Parser
