#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'
class Ruby20Parser < RubyParser::Parser


require "ruby_lexer"
require "ruby_parser_extras"

# :stopdoc:

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-600,-102,-104,578,659,578,269,-600,-600,-600,216,217,524,-600,-600',
'998,-600,751,-608,213,216,217,-85,-102,240,-600,528,269,604,-101,578',
'578,659,-71,604,450,-600,-600,658,-600,-600,-600,-600,-600,742,109,216',
'217,743,-104,-100,-99,-106,220,-107,578,237,-103,731,269,239,238,235',
'236,207,-106,658,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600',
'-600,-600,-600,731,731,-600,-600,-600,-101,643,269,606,605,-600,-419',
'268,-600,606,605,624,763,-600,220,-600,702,-600,-600,-600,-600,-600',
'-600,-600,220,-600,-600,-600,268,-102,-104,113,-103,113,-102,-104,112',
'750,112,-290,-600,-600,-93,-94,208,-600,-290,-290,-290,-596,220,-290',
'-290,-290,-103,-290,113,-101,113,113,268,112,-101,112,112,-290,-290',
'-290,-95,-91,-90,-97,113,-98,209,-290,-290,112,-290,-290,-290,-290,-290',
'113,-93,-103,932,-105,112,268,-103,620,219,215,83,113,113,-95,-596,623',
'112,112,84,216,217,-92,-290,-290,-290,-290,-290,-290,-290,-290,-290',
'-290,-290,-290,-290,-290,113,701,-290,-290,-290,112,788,-290,220,604',
'-290,636,609,-290,-290,-517,-290,-94,-290,259,-290,880,-290,-290,-290',
'-290,-290,-290,-290,316,-290,-93,-290,-597,619,720,604,557,556,555,317',
'558,622,-593,-95,-290,-290,-290,-290,-503,-290,-518,-290,-93,452,220',
'-503,-503,-503,-105,659,-503,-503,-503,-102,-503,-93,659,-99,-93,606',
'605,-96,-503,-101,-503,-503,-503,-428,-95,-93,537,-95,354,539,-503,-503',
'378,-503,-503,-503,-503,-503,-95,658,-508,-503,606,605,381,113,658,-508',
'-503,-100,112,761,-107,-593,405,785,786,-503,844,407,406,-503,-503,-503',
'-503,-503,-503,-503,-503,-503,-503,-503,-503,-503,-503,-593,-428,-503',
'-503,-503,604,-503,-503,-428,604,-503,524,262,-503,-503,384,-503,-428',
'-503,263,-503,387,-503,-503,-503,-503,-503,-503,-503,819,-503,584,-503',
'-102,-104,-428,720,604,557,556,555,403,558,-594,-600,-503,-503,-503',
'-503,-506,-503,537,-503,-97,536,113,-506,-506,-506,-503,112,-506,-506',
'-506,-106,-506,606,605,602,408,606,605,607,-506,240,-506,-506,-506,113',
'113,-513,451,-600,112,112,-506,-506,-513,-506,-506,-506,-506,-506,453',
'802,454,-506,-600,606,605,612,219,604,-506,-600,566,237,485,-594,-596',
'239,238,-506,-600,978,271,-506,-506,-506,-506,-506,-506,-506,-506,-506',
'-506,-506,-506,-506,-506,-594,-600,-506,-506,-506,-600,-506,-506,574',
'573,-506,495,-600,-506,-506,498,-506,-596,-506,771,-506,-600,-506,-506',
'-506,-506,-506,-506,-506,564,-506,-512,-506,606,605,617,-509,-506,-512',
'-600,566,214,567,-509,-506,-506,-506,-506,-506,-290,-506,-517,-506,-518',
'500,637,-290,-290,-290,-506,220,-92,-290,-290,801,-290,557,556,555,802',
'558,-338,-101,574,573,-510,113,262,-338,-70,566,112,-510,-98,263,-290',
'-290,-338,-290,-290,-290,-290,-290,-90,-107,-91,-514,-95,537,318,319',
'539,562,-514,-99,240,-100,567,-104,220,113,571,570,574,573,112,-290',
'-290,-290,-290,-290,-290,-290,-290,-290,-290,-290,-290,-290,-290,509',
'-511,-290,-290,-290,510,642,237,-511,220,-290,239,238,-290,-503,517',
'220,567,-290,1002,-290,-503,-290,-290,-290,-290,-290,-290,-290,274,-290',
'537,-290,213,539,720,220,557,556,555,745,558,574,573,-600,-290,-290',
'271,-96,747,-290,-600,-600,-600,848,819,-600,-600,-600,-105,-600,720',
'521,557,556,555,240,558,525,-600,-600,-600,-600,716,116,117,118,119',
'120,526,-600,-600,719,-600,-600,-600,-600,-600,720,240,557,556,555,-281',
'558,519,520,534,237,716,-281,540,239,238,235,236,216,217,924,-281,584',
'-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600,-600',
'397,716,-600,-600,-600,213,787,-600,216,217,-600,588,516,-600,-600,589',
'-600,240,-600,611,-600,514,-600,-600,-600,-600,-600,-600,-600,615,-600',
'-600,-600,254,255,956,618,557,556,555,621,558,216,217,628,-600,-600',
'-600,-600,237,-600,243,-600,239,238,235,236,848,819,-103,174,185,175',
'198,171,191,181,180,201,202,196,179,178,173,199,203,204,183,172,186',
'190,192,184,177,-265,630,220,193,200,195,194,187,197,182,170,189,188',
'116,117,118,119,120,169,176,167,168,164,165,166,124,126,634,635,125',
'271,956,240,557,556,555,646,558,158,159,240,154,136,137,138,145,142',
'144,254,255,139,140,240,240,240,160,161,146,147,720,220,557,556,555',
'237,558,220,220,239,238,235,236,151,150,-85,135,157,153,152,148,149',
'143,141,133,156,134,-290,677,162,91,871,872,220,-290,873,107,108,716',
'-597,92,530,720,-290,557,556,555,719,558,155,688,694,695,698,163,174',
'185,175,198,171,191,181,180,201,202,196,179,178,173,199,203,204,183',
'172,186,190,192,184,177,500,716,704,193,200,195,194,187,197,182,170',
'189,188,116,117,118,119,120,169,176,167,168,164,165,166,124,126,707',
'708,125,710,712,240,116,117,118,119,120,158,159,714,154,136,137,138',
'145,142,144,254,255,139,140,723,724,725,160,161,146,147,720,727,557',
'556,555,237,558,243,584,239,238,235,236,151,150,734,135,157,153,152',
'148,149,143,141,133,156,134,764,765,162,-290,766,213,-266,772,485,485',
'-290,716,587,220,720,-597,557,556,555,-290,558,585,155,790,259,498,500',
'163,174,185,175,198,171,191,181,180,201,202,196,179,178,173,199,203',
'204,183,172,186,190,192,184,177,716,688,220,193,200,195,194,187,197',
'182,170,189,188,271,271,688,240,240,169,176,167,168,164,165,166,124',
'126,819,720,125,557,556,555,213,558,220,220,842,158,159,959,154,136',
'137,138,145,142,144,220,747,139,140,-515,-516,-515,160,161,146,147,-515',
'-516,-515,819,852,220,-267,716,879,-515,-516,-515,882,151,150,707,135',
'157,153,152,148,149,143,141,133,156,134,-516,213,162,91,-291,-281,885',
'-516,1009,888,890,-291,-281,92,892,220,-516,1007,894,895,-291,-281,155',
'688,903,-265,907,163,174,185,175,198,171,191,181,180,201,202,196,179',
'178,173,199,203,204,183,172,186,190,192,184,177,909,910,220,193,200',
'195,194,187,197,182,170,189,188,707,913,915,917,919,169,176,167,168',
'164,165,166,124,126,919,220,125,925,927,929,213,220,939,940,220,158',
'159,212,154,136,137,138,145,142,144,943,210,139,140,-290,-291,-291,160',
'161,146,147,-290,-291,-291,-268,953,-597,960,961,963,-290,-291,-291',
'964,151,150,980,135,157,153,152,148,149,143,141,133,156,134,213,213',
'162,91,982,983,987,959,449,707,992,994,996,92,998,998,747,450,1005,1010',
'1011,919,155,919,919,1016,980,163,174,185,175,198,171,191,181,180,201',
'202,196,179,178,173,199,203,204,183,172,186,190,192,184,177,-597,-596',
'694,193,200,195,194,187,197,182,170,189,188,980,1039,1040,1041,1042',
'169,176,167,168,164,165,166,124,126,394,393,125,998,395,998,998,220',
'919,980,3,158,159,,154,136,137,138,145,142,144,,,139,140,,,,160,161',
'146,147,,,,,,,,,,,,,,151,150,,135,157,153,152,148,149,143,141,133,156',
'134,,,162,,,,,,,,,,,,,,,,,,,,155,,,,,163,174,185,175,198,171,191,181',
'180,201,202,196,179,178,173,199,203,204,183,172,186,190,192,184,177',
',,,193,200,195,363,362,364,361,170,189,188,,,,,,169,176,167,168,358',
'359,360,356,126,97,96,357,,99,,,,,,,158,159,,154,136,137,138,145,142',
'144,,,139,140,,,,160,161,146,147,,,,,,370,,,,,,,,151,150,,135,157,153',
'152,148,149,143,141,133,156,134,,,162,,,,,,,,,,,,,,,,,,,,155,,,,,163',
'174,185,175,198,171,191,181,180,201,202,196,179,178,173,199,203,204',
'183,172,186,190,192,184,177,,,,193,200,195,194,187,197,182,170,189,188',
',,,,,169,176,167,168,164,165,166,124,126,123,,125,,,,,,,,,158,159,,154',
'136,137,138,145,142,144,,,139,140,,,,160,161,146,147,,,,,,,,,,,,,,151',
'150,,135,157,153,152,148,149,143,141,133,156,134,,,162,91,,,,,,,,,,92',
'292,72,73,74,12,60,,,155,66,67,,,163,70,,68,69,71,33,34,75,76,,,,,,32',
'31,30,101,100,102,103,,,22,,,,,647,11,48,,13,105,104,106,95,59,97,96',
'98,,99,107,108,,93,94,,45,46,44,240,244,249,250,251,246,248,256,257',
'252,253,,233,234,,,254,255,,43,,,36,,,61,62,,,63,,38,237,,243,47,239',
'238,235,236,247,245,241,23,242,,,,91,83,85,86,87,89,,,,84,92,,258,,-242',
',,65,,,81,88,90,292,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,101,100,102,103,,,22,,,,,631,11,48,,13,105,104,106',
'95,59,97,96,98,,99,107,108,,93,94,,45,46,44,240,244,249,250,251,246',
'248,256,257,252,253,,233,234,,,254,255,,43,,,36,,,61,62,,,63,,38,237',
',243,47,239,238,235,236,247,245,241,23,242,,,,91,83,85,86,87,89,,,,84',
'92,,258,,,,,65,,,81,88,90,292,72,73,74,12,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,647,11,48,,13,105',
'104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,240,244,249,250',
'251,246,248,256,257,252,253,,233,234,,,254,255,,43,,,36,,,61,62,,,63',
',38,237,,243,47,239,238,235,236,247,245,241,23,242,,,,91,83,85,86,87',
'89,,,,84,92,,258,,,,,65,,,81,88,90,292,72,73,74,12,60,,,,66,67,,,,70',
',68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,11,48',
',13,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,240,244',
'249,250,251,246,248,256,257,252,253,,233,234,,,254,255,,43,,,36,,,61',
'62,,,63,,38,237,,243,47,239,238,235,236,247,245,241,23,242,,,,91,83',
'85,86,87,89,,,,84,92,220,258,,,,,65,,,81,88,90,292,72,73,74,12,60,,',
',66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22',
',,,,,11,48,,13,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46',
'44,240,244,249,250,251,246,248,256,257,252,253,,233,234,,,254,255,,43',
',,294,,,61,62,,,63,,38,237,,243,47,239,238,235,236,247,245,241,23,242',
',,,91,83,85,86,87,89,,,,84,92,,258,,,,,65,,,81,88,90,292,72,73,74,12',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103',
',,22,,,,,,11,48,,13,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45',
'46,44,240,244,249,250,251,246,248,256,257,252,253,,233,234,,,254,255',
',43,,,36,,,61,62,,,63,,38,237,,243,47,239,238,235,236,247,245,241,23',
'242,,,,91,83,85,86,87,89,,,,84,92,,258,,,,,65,,,81,88,90,292,72,73,74',
'12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102',
'103,,,22,,,,,,11,48,,13,105,104,106,95,59,97,96,98,,99,107,108,,93,94',
',45,46,44,240,244,249,250,251,246,248,256,257,252,253,,233,234,,,254',
'255,,43,,,36,,,61,62,,,63,,38,237,,243,47,239,238,235,236,247,245,241',
'23,242,,,,91,83,85,86,87,89,,,,84,92,,258,,,,,65,,,81,88,90,8,72,73',
'74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100',
'102,103,,,22,,,,,,11,48,10,13,105,104,106,95,59,97,96,98,,99,107,108',
',93,94,,45,46,44,240,244,249,250,251,246,248,256,257,252,253,,233,234',
',,254,255,,43,,,36,,,61,62,,,63,,38,237,,243,47,239,238,235,236,247',
'245,241,23,242,,,,91,83,85,86,87,89,,,,84,92,,258,,,,,65,,,81,88,90',
'292,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30',
'101,100,102,103,,,22,,,,,,11,48,,13,105,104,106,95,59,97,96,98,,99,107',
'108,,93,94,,45,46,44,240,244,249,250,251,246,248,256,257,252,253,,233',
'234,,,254,255,,43,,,36,,,61,62,,,63,,38,237,,243,47,239,238,235,236',
'247,245,241,23,242,,,,91,83,85,86,87,89,,,,84,92,,258,,,,,65,,,81,88',
'90,292,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31',
'30,101,100,102,103,,,22,,,,,,11,48,,13,105,104,106,95,59,97,96,98,,99',
'107,108,,93,94,,45,46,44,240,244,249,250,251,246,248,256,257,252,253',
',233,234,,,254,255,,43,,,36,,,61,62,,,63,,38,237,,243,47,239,238,235',
'236,247,245,241,23,242,,,,91,83,85,86,87,89,,,,84,92,,258,,,,,65,,,81',
'88,90,292,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32',
'31,30,101,100,102,103,,,22,,,,,,11,48,,13,105,104,106,95,59,97,96,98',
',99,107,108,,93,94,,45,46,44,240,244,249,250,251,246,248,256,257,252',
'253,,233,234,,,254,255,,43,,,294,,,61,62,,,63,,38,237,,243,47,239,238',
'235,236,247,245,241,23,242,,,,91,83,85,86,87,89,,,,84,92,,258,,,,,65',
',,81,88,90,292,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,',
',,,,32,31,30,101,100,102,103,,,22,,,,,,11,48,,13,105,104,106,95,59,97',
'96,98,,99,107,108,,93,94,,45,46,44,240,244,249,250,251,246,248,256,257',
'252,253,,233,234,,,254,255,,43,,,36,,,61,62,,,63,,38,237,,243,47,239',
'238,235,236,247,245,241,23,242,,,,91,83,85,86,87,89,,,,84,92,,258,,',
',,65,,,81,88,90,292,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,11,48,,13,105,104,106,95',
'59,97,96,98,,99,107,108,,93,94,,45,46,44,240,244,249,250,251,246,248',
'256,257,252,253,,233,234,,,254,255,,43,,,36,,,61,62,,,63,,38,237,,243',
'47,239,238,235,236,247,245,241,23,242,,,,91,83,85,86,87,89,,,,84,92',
',258,,,,,65,,,81,88,90,292,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,11,48,,13,105,104,106',
'95,59,97,96,98,,99,107,108,,93,94,,45,46,44,240,244,249,250,251,246',
'248,256,257,252,253,,233,234,,,254,255,,43,,,36,,,61,62,,,63,,38,237',
',243,47,239,238,235,236,247,245,241,23,242,,,,91,83,85,86,87,89,,,,84',
'92,,258,,,,,65,,,81,88,90,8,72,73,74,12,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,11,48,10,13,105',
'104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,240,244,249,250',
'251,246,248,256,257,252,253,,233,234,,,254,255,,43,,,36,,,61,62,,,63',
',38,237,,243,47,239,238,235,236,247,245,241,23,242,,,,91,83,85,86,87',
'89,,,,84,92,,258,,,,,65,,,81,88,90,292,72,73,74,12,60,,,,66,67,,,,70',
',68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,11,48',
',13,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,240,244',
'249,250,251,246,248,256,257,252,253,,233,234,,,254,255,,43,,,36,,,61',
'62,,,63,,38,237,,243,47,239,238,235,236,247,245,241,23,242,,,,91,83',
'85,86,87,89,,,,84,92,,258,,,,,65,,,81,88,90,292,72,73,74,12,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,',
',,,11,48,,13,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44',
'240,244,249,250,251,246,248,256,257,252,253,,233,234,,,254,255,,43,',
',36,,,61,62,,,63,,38,237,,243,47,239,238,235,236,247,245,241,23,242',
',,,91,83,85,86,87,89,,,,84,92,,258,,,,,65,,,81,88,90,292,72,73,74,12',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103',
',,22,,,,,,11,48,,13,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45',
'46,44,240,-620,-620,-620,-620,246,248,,,-620,-620,,,,,,254,255,,43,',
',36,,,61,62,,,63,,38,237,,243,47,239,238,235,236,247,245,241,23,242',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,292,72,73,74,12,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,',
',22,,,,,,11,48,,13,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45',
'46,44,240,-620,-620,-620,-620,246,248,,,-620,-620,,,,,,254,255,,43,',
',36,,,61,62,,,63,,38,237,,243,47,239,238,235,236,247,245,241,23,242',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,292,72,73,74,12,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,',
',22,,,,,,11,48,,13,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45',
'46,44,240,244,249,250,251,246,248,256,257,252,253,,-620,-620,,,254,255',
',43,,,36,,,61,62,,,63,,38,237,,243,47,239,238,235,236,247,245,241,23',
'242,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,292,72,73,74,12',
'60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103',
',,22,,,,,,11,48,,13,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45',
'46,44,240,,,,,,,,,,,,,,,,254,255,,43,,,36,,,61,62,,,63,,38,237,,243',
'47,239,238,235,236,,,241,23,242,,,,91,83,85,86,87,89,,,,84,92,,,,,,',
'65,,,81,88,90,292,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,101,100,102,103,,,22,,,,,,11,48,,13,105,104,106,95,59',
'97,96,98,,99,107,108,,93,94,,45,46,44,240,-620,-620,-620,-620,246,248',
',,-620,-620,,,,,,254,255,,43,,,36,,,61,62,,,63,,38,237,,243,47,239,238',
'235,236,247,245,241,23,242,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,',
'81,88,90,292,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,',
',,32,31,30,101,100,102,103,,,22,,,,,,11,48,,13,105,104,106,95,59,97',
'96,98,,99,107,108,,93,94,,45,46,44,240,244,249,250,251,246,248,,,252',
'253,,,,,,254,255,,43,,,36,,,61,62,,,63,,38,237,,243,47,239,238,235,236',
'247,245,241,23,242,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
'292,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30',
'101,100,102,103,,,22,,,,,,11,48,,13,105,104,106,95,59,97,96,98,,99,107',
'108,,93,94,,45,46,44,240,244,249,250,251,246,248,256,,252,253,,,,,,254',
'255,,43,,,36,,,61,62,,,63,,38,237,,243,47,239,238,235,236,247,245,241',
'23,242,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,292,72,73,74',
'12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102',
'103,,,22,,,,,,11,48,,13,105,104,106,95,59,97,96,98,,99,107,108,,93,94',
',45,46,44,240,,,,,,,,,,,,,,,,254,255,,43,,,36,,,61,62,,,63,,38,237,',
'243,47,239,238,235,236,,,241,23,242,,,,91,83,85,86,87,89,,,,84,92,,',
',,,,65,,,81,88,90,292,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34',
'75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,11,48,,13,105,104,106',
'95,59,97,96,98,,99,107,108,,93,94,,45,46,44,240,,,,,,,,,,,,,,,,254,255',
',43,,,36,,,61,62,,,63,,38,237,,243,47,239,238,235,236,,,241,23,242,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,292,72,73,74,12,60',
',,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,',
',22,,,,,,11,48,,13,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45',
'46,44,240,,,,,,,,,,,,,,,,254,255,,43,,,36,,,61,62,,,63,,38,237,,243',
'47,239,238,235,236,,,241,23,242,,,,91,83,85,86,87,89,,,,84,92,,,,,,',
'65,,,81,88,90,292,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,101,100,102,103,,,22,,,,,,11,48,,13,105,104,106,95,59',
'97,96,98,,99,107,108,,93,94,,45,46,44,240,-620,-620,-620,-620,246,248',
',,-620,-620,,,,,,254,255,,43,,,36,,,61,62,,,63,,38,237,,243,47,239,238',
'235,236,247,245,241,23,242,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,',
'81,88,90,292,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,',
',,32,31,30,101,100,102,103,,,22,,,,,,11,48,,13,105,104,106,95,59,97',
'96,98,,99,107,108,,93,94,,45,46,44,240,244,249,250,251,246,248,256,257',
'252,253,,-620,-620,,,254,255,,43,,,294,,,61,62,,,63,,38,237,,243,47',
'239,238,235,236,247,245,241,23,242,,,,91,83,85,86,87,89,,,,84,92,,,',
',,,65,,,81,88,90,292,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,11,48,,13,105,104,106,95',
'59,97,96,98,,99,107,108,,93,94,,45,46,44,240,-620,-620,-620,-620,246',
'248,,,-620,-620,,,,,,254,255,,43,,,36,,,61,62,,,63,,38,237,,243,47,239',
'238,235,236,247,245,241,23,242,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,',
'305,306,312,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96',
'98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62',
',720,63,557,556,555,564,558,47,,,,,,,,230,566,,,,91,83,85,86,87,89,',
',,84,92,,,,,,,65,562,,81,88,90,72,73,74,,60,,574,573,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,567,,,48,,,105',
'104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,',
',,,225,,,231,,,61,62,,720,63,557,556,555,802,558,47,,,,,,,,23,566,,',
',91,83,85,86,87,89,,,,84,92,,,,,,,65,562,,81,88,90,72,73,74,,60,,574',
'573,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103',
',,232,,,,567,,,48,,,105,104,106,95,59,97,96,98,285,99,107,108,,93,94',
',45,46,44,240,-620,-620,-620,-620,246,248,,,-620,-620,,,,,,254,255,',
'225,,,231,,,61,62,,,63,,283,237,281,243,47,239,238,235,236,247,245,241',
'230,242,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,286,81,88,90,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100',
'102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93',
'94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,720,63,557,556,555',
'564,558,47,,,,,,,,230,566,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,562',
',81,88,90,72,73,74,,60,,574,573,66,67,,,,70,,68,69,71,309,310,75,76',
',,,,,305,306,312,101,100,102,103,,,232,,,,567,,,48,,,105,104,106,95',
'59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231',
',,61,62,,720,63,557,556,555,564,558,47,,,,,,,,230,566,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,562,,81,88,90,72,73,74,,60,,574,573,66,67,,',
',70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,232,,,,567',
',,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,',
',,,,,,,,,,,,,,225,,,231,,,61,62,,720,63,557,556,555,564,558,47,,,,,',
',,230,566,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,562,,81,88,90,72,73',
'74,,60,,574,573,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312',
'101,100,102,103,,,232,,,,567,,,48,,,105,104,106,95,59,97,96,98,,99,107',
'108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,720,63,557',
'556,555,802,558,47,,,,,,,,230,566,,,,91,83,85,86,87,89,,,,84,92,,,,',
',,65,562,,81,88,90,72,73,74,,60,,574,573,66,67,,,,70,,68,69,71,309,310',
'75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,567,,,48,,,105,104,106',
'95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,',
',231,,,61,62,,720,63,557,556,555,802,558,47,,,,,,,,230,566,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,562,,81,88,90,72,73,74,,60,,574,573,66',
'67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,',
'232,,,,567,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45',
'46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,720,63,557,556,555,802,558',
'47,,,,,,,,230,566,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,562,,81,88',
'90,72,73,74,,60,,574,573,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305',
'306,312,101,100,102,103,,,232,,,,567,,,48,,,105,104,106,95,59,97,96',
'98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62',
',720,63,557,556,555,564,558,47,,,,,,,,230,566,,,,91,83,85,86,87,89,',
',,84,92,,,,,,,65,562,,81,88,90,72,73,74,,60,,574,573,66,67,,,,70,,68',
'69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,567,,',
'48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,',
',,,,,,,,,,,,225,,,231,,,61,62,,720,63,557,556,555,802,558,47,,,,,,,',
'230,566,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,562,,81,88,90,72,73,74',
',60,,574,573,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101',
'100,102,103,,,232,,,,567,,,48,,,105,104,106,95,59,97,96,98,,99,107,108',
',93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,',
',,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103',
',,232,,,,,,,48,,,105,104,106,95,59,97,96,98,285,99,107,108,,93,94,,45',
'46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,283,,281,,47,,,,,,',
',230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,286,81,88,90,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103',
',,232,,,,,,,48,,,105,104,106,95,59,97,96,98,285,99,107,108,,93,94,,45',
'46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,283,,281,,47,,,,,,',
',230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,286,81,88,90,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103',
',,232,,,,,,,48,,,105,104,106,95,59,97,96,98,285,99,107,108,,93,94,,45',
'46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,283,,281,,47,,,,,,',
',230,,,,,91,83,85,86,87,89,,,,84,92,220,,,,,,65,,286,81,88,90,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102',
'103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98,285,99,107,108,,93,94',
',45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,283,,281,,47,,',
',,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,286,81,88,90,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102',
'103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98,285,99,107,108,,93,94',
',45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,283,,281,,47,,',
',,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,286,81,88,90,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100',
'102,103,,,232,,,,,,,307,,,105,104,106,95,59,97,96,98,,99,107,108,,93',
'94,,,,313,,,,,,,,,,,,,,,,,,,,897,,,231,,,61,62,,,63,,,,,,,,,,,,,,,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,',
'232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46',
'44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,',
'91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,232,,,,',
',,48,,,105,104,106,95,59,97,96,98,285,99,107,108,,93,94,,45,46,44,,',
',,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,283,,281,,47,,,,,,,,230,,,',
',91,83,85,86,87,89,,,,84,92,,,,,,,65,,286,81,88,90,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,',
'232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46',
'44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,',
'91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232',
',,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,',
',,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,12,60,,,,66,67,,,',
'70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,11',
'48,,13,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,',
',,,,,,,,,,,,,,43,,,36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,307',
',,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,,,313,,,,,,,,,,,,,',
',,,,,,303,,,299,,,61,62,,,63,,298,,,,,,,,,,,,,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309',
'310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,307,,,105,104',
'106,95,59,97,96,98,,99,107,108,,93,94,,,,313,,,,,,,,,,,,,,,,,,,,303',
',,231,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,315',
',,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76',
',,,,,305,306,312,101,100,102,103,,,232,,,,,,,307,,,105,104,106,95,59',
'97,96,98,,99,107,108,,93,94,,,,313,,,,,,,,,,,,,,,,,,,,303,,,231,,,61',
'62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,512,,,65,,,81',
'88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30',
'101,100,102,103,,,22,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108',
',93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103',
',,22,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46',
'44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,',
',70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232,',
',,,,,48,,,105,104,106,95,59,97,96,98,285,99,107,108,,93,94,,45,46,44',
',,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,281,,47,,,,,,,,230,,,,',
'91,83,85,86,87,89,,,,84,92,,,,,,,65,,286,81,88,90,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,',
'232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46',
'44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,',
'91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232',
',,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,',
',,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,',
',307,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,,,313,,,,,,,,',
',,,,,,,,,,,897,,,231,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309',
'310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,48,,,105,104',
'106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225',
',,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75',
'76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,307,,,105,104,106,95',
'59,97,96,98,,99,107,108,,93,94,,,,313,,,,,,,,,,,,,,,,,,,,303,,,299,',
',61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,',
'81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305',
'306,312,101,100,102,103,,,232,,,,,,,307,,,105,104,106,95,59,97,96,98',
',99,107,108,,93,94,,,,313,,,,,,,,,,,,,,,,,,,,970,,,231,,,61,62,,,63',
',,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72',
'73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101',
'100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108',
',93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,',
',,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100',
'102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93',
'94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,671,,,,47,,',
',,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100',
'102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93',
'94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,530,,61,62,,,63,,,,,,47,,',
',,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103',
',,22,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46',
'44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,',
',70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232,',
',,,,,48,,,105,104,106,95,59,97,96,98,285,99,107,108,,93,94,,45,46,44',
',,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,286,81,88,90,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,',
',48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,',
',,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,,48,,,105,104',
'106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225',
',,231,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75',
'76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95',
'59,97,96,98,285,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,',
',231,,,61,62,,,63,,283,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84',
'92,,,,,,,65,,286,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34',
'75,76,,,,,,32,31,30,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95',
'59,97,96,98,285,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,',
',231,,,61,62,,,63,,283,,281,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,',
'84,92,,,,,,,65,,286,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,,48,,,105,104,106,95',
'59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231',
',,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,',
'65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,',
',32,31,30,101,100,102,103,,,22,,,,,,,48,,,105,104,106,95,59,97,96,98',
',99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,',
'63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306',
'312,101,100,102,103,,,232,,,,,,,307,,,105,104,106,590,59,97,96,591,',
'99,107,108,,93,94,,,,313,,,,,,,,,,,,,,,,,,,,592,,,231,,,61,62,,,63,',
',,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100',
'102,103,,,232,,,,,,,307,,,105,104,106,590,59,97,96,591,,99,107,108,',
'93,94,,,,313,,,,,,,,,,,,,,,,,,,,592,,,231,,,61,62,,,63,,,,,,,,,,,,,',
',,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,',
'66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22',
',,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,',
',,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83',
'85,86,87,89,,,,84,92,113,,,,,112,65,,,81,88,90,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232',
',,,,,,307,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,,,313,,,',
',,,,,,,,,,,,,,,,348,,,36,,,61,62,,,63,,38,,,,,,,,,,,,,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,12,60,,,,66,67,,,,70,,68',
'69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,11,48,10,13',
'105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,',
',,,,,,,43,,,36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89',
',,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309',
'310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,48,,,105,104',
'106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225',
',,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97',
'96,98,285,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,',
',61,62,,,63,,283,,281,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,286,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310',
'75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,48,,,105,104,106',
'95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,',
',231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75',
'76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95',
'59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231',
',,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,',
',65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,',
',,,,305,306,312,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97',
'96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61',
'62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,',
',81,88,90,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32',
'31,30,101,100,102,103,,,22,,,,,,11,48,10,13,105,104,106,95,59,97,96',
'98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36,,,61,62,',
',63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,397,65,',
',81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32',
'31,30,101,100,102,103,,,22,,,,,,,48,,,105,104,106,95,59,97,96,98,,99',
'107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,',
',,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101',
'100,102,103,,,22,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,',
'93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,',
',,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103',
',,22,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46',
'44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,',
',70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,,48',
',,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,',
',,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,12,60,,,,66,67,,,,70,,68,69',
'71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,11,48,,13,105',
'104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,',
',,,43,,,36,,,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,',
',84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309',
'310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,48,,,105,104',
'106,95,59,97,96,98,285,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,',
',,225,,,231,,,61,62,,,63,,671,,281,,47,,,,,,,,230,,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,,65,,286,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,48,,,105',
'104,106,95,59,97,96,98,285,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,',
',,,,,,225,,,231,,,61,62,,,63,,,,281,,47,,,,,,,,230,,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,,65,,286,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,48,,,105',
'104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,',
',,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,',
',,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309',
'310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,48,,,105,104',
'106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225',
',,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,72,73,74,12,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,11,48,,13,105,104,106,95',
'59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,43,,,36',
',,61,62,,,63,,38,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,',
',397,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97',
'96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61',
'62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,',
',81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305',
'306,312,101,100,102,103,,,232,,,,,,,307,,,105,104,106,95,59,97,96,98',
',99,107,108,,93,94,,,,313,,,,,,,,,,,,,,,,,,,,303,,,299,,,61,62,,,63',
',,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72',
'73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100',
'102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98,285,99,107,108,',
'93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,283,,281',
',47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,286,81,88,90',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101',
'100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108',
',93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,413,,,,47',
',,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73',
'74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100',
'102,103,,,232,,,,,,,307,,,105,104,106,95,59,97,96,98,,99,107,108,,93',
'94,,,,313,,,,,,,,,,,,,,,,,,,,303,,,299,,,61,62,,,63,,,,,,,,,,,,,,,,',
',,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,232,',
',,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,',
',,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,',
',48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,',
',,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,48',
',,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,',
',,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,48,,,105',
'104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,',
',,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,',
',,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33',
'34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,,48,,,105,104,106,95',
'59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231',
',,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,',
'65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,',
',32,31,30,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98',
'285,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62',
',,63,,283,,281,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65',
',286,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,',
',,,305,306,312,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97',
'96,98,285,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,',
',61,62,,,63,,671,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,',
',,,65,,286,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75',
'76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95',
'59,97,96,98,285,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,',
',231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,286,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75',
'76,,,,,,32,31,30,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95,59',
'97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,',
',61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,',
'65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,',
',32,31,30,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98',
',99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,',
'63,,413,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30',
'101,100,102,103,,,22,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108',
',93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103',
',,22,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46',
'44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91',
'83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,',
',70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,,48',
',,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,',
',,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,101,100,102,103,,,22,,,,,,,48,,,105,104,106',
'95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,',
',231,,,61,62,,,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,220',
',,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75',
'76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95',
'59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231',
',,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,',
',65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,',
',,32,31,30,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96',
'98,285,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61',
'62,,,63,,283,,281,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,',
',,65,,286,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,101,100,102,103,,,22,,,,,,,48,,,105,104,106,95,59,97,96',
'98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62',
',,63,,,,,,47,,,,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81',
'88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30',
'101,100,102,103,,,22,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108',
',93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,',
',,,,,,23,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100',
'102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93',
'94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,',
',,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102',
'103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,',
'45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,',
'232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46',
'44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,769,,,,47,,,,,,,,230,',
',,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,',
'232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46',
'44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,',
'91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232',
',,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,',
',,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,',
',48,,,105,104,106,95,59,97,96,98,285,99,107,108,,93,94,,45,46,44,,,',
',,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,671,,281,,47,,,,,,,,230,,,,',
'91,83,85,86,87,89,,,,84,92,,,,,,,65,,286,81,88,90,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,',
'232,,,,,,,48,,,105,104,106,95,59,97,96,98,285,99,107,108,,93,94,,45',
'46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,281,,47,,,,,,,,230',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,286,81,88,90,72,73,74,,60,',
',,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,',
'232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46',
'44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,',
'91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101,100,102,103,,,232,,,,',
',,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,',
',,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,48',
',,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,',
',,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'33,34,75,76,,,,,,32,31,30,101,100,102,103,,,232,,,,,,,48,,,105,104,106',
'95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,',
',231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76',
',,,,,32,31,30,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97',
'96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61',
'62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,',
',81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305',
'306,312,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98',
',99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,',
'63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,33,34,75,76,,,,,,32,31,30,101',
'100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108',
',93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,',
',,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74',
',60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100',
'102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93',
'94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,',
',,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60',
',,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102',
'103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,',
'45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230',
',,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66',
'67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,',
'232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46',
'44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,',
'91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232',
',,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,',
',,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,',
',48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,',
',,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,48',
',,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,',
',,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87',
'89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71',
'309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,48,,,105',
'104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,',
',,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,',
',,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309',
'310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,307,,,105,104',
'106,95,59,97,96,98,,99,107,108,,93,94,,,,313,,,,,,,,,,,,,,,,,,,,303',
',,299,,,61,62,,,63,,,,,,,,,,,,,,,,,,,91,83,85,86,87,89,,,,84,92,,,,',
',,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76',
',,,,,305,306,312,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95,59',
'97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,',
',61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,',
'65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,',
',,,305,306,312,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97',
'96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61',
'62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,',
',81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305',
'306,312,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98',
',99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,',
'63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306',
'312,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99',
'107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,',
',,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312',
'101,100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107',
'108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,',
'47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72',
'73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101',
'100,102,103,,,232,,,,,,,307,,,105,104,106,95,59,97,96,98,,99,107,108',
',93,94,,,,313,,,,,,,,,,,,,,,,,,,,303,,,299,,,61,62,,,63,,,,,,,,,,,,',
',,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,',
',66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103',
',,232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46',
'44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,',
'91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67',
',,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232',
',,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,',
',,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83',
'85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70',
',68,69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,',
',48,,,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,',
',,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85',
'86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68',
'69,71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,48',
',,105,104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,',
',,,,,,,,,225,,,231,,,61,62,,,63,,413,,,,47,,,,,,,,230,,,,,91,83,85,86',
'87,89,,,,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69',
'71,309,310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,48,,,105',
'104,106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,',
',,,225,,,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,',
',,84,92,,,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309',
'310,75,76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,48,,,105,104',
'106,95,59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225',
',,231,,,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92',
',,,,,,65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75',
'76,,,,,,305,306,312,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95',
'59,97,96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231',
',,61,62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,',
',65,,,81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,',
',,,,305,306,312,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97',
'96,98,,99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61',
'62,,,63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,',
',81,88,90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305',
'306,312,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98',
',99,107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,',
'63,,,,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88',
'90,72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306',
'312,101,100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99',
'107,108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,',
',,,,47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90',
'72,73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312',
'101,100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107',
'108,,93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,,,,',
'47,,,,,,,,230,,,,,91,83,85,86,87,89,,,,84,92,,,,,,,65,,,81,88,90,72',
'73,74,,60,,,,66,67,,,,70,,68,69,71,309,310,75,76,,,,,,305,306,312,101',
'100,102,103,,,232,,,,,,,48,,,105,104,106,95,59,97,96,98,,99,107,108',
',93,94,,45,46,44,,,,,,,,,,,,,,,,,,,,225,,,231,,,61,62,,,63,,283,,,,47',
',,,,,,,230,,,,-282,91,83,85,86,87,89,-282,-282,-282,84,92,-282,-282',
'-282,,-282,,65,,,81,88,90,,,-282,-282,-282,,,,,,,,-282,-282,,-282,-282',
'-282,-282,-282,,,,,,,,,,,,,,,,,,,,,,,,-282,-282,-282,-282,-282,-282',
'-282,-282,-282,-282,-282,-282,-282,-282,,,-282,-282,-282,,,-282,,,-282',
',,-282,-282,,-282,,-282,,-282,,-282,-282,-282,-282,-282,-282,-282,,-282',
',-282,,,,,,,,,,,,,-282,-282,-282,-282,-602,-282,,-282,,,,-602,-602,-602',
',,-602,-602,-602,560,-602,557,556,555,564,558,,,,-602,-602,-602,-602',
',,566,,,,,-602,-602,,-602,-602,-602,-602,-602,,,,,,,,,,562,755,,,,,',
',,571,570,574,573,,-602,-602,-602,-602,-602,-602,-602,-602,-602,-602',
'-602,-602,-602,-602,,,-602,-602,-602,,,-602,,,-602,,,-602,-602,,-602',
'567,-602,,-602,,-602,-602,-602,-602,-602,-602,-602,,-602,-602,-602,',
',,,,,,,,,,,-602,-602,-602,-602,-601,-602,,-602,,,,-601,-601,-601,,,-601',
'-601,-601,801,-601,557,556,555,802,558,,,,-601,-601,-601,-601,,,566',
',,,,-601,-601,,-601,-601,-601,-601,-601,,,,,,,,,,562,,,,,,,,,571,570',
'574,573,,-601,-601,-601,-601,-601,-601,-601,-601,-601,-601,-601,-601',
'-601,-601,,,-601,-601,-601,,,-601,,,-601,,,-601,-601,,-601,567,-601',
',-601,,-601,-601,-601,-601,-601,-601,-601,,-601,-601,-601,,,,,,,,,,',
',,-601,-601,-601,-601,-298,-601,,-601,,,,-298,-298,-298,,,-298,-298',
'-298,560,-298,557,556,555,564,558,,,,,-298,-298,,,,566,,,,,-298,-298',
',-298,-298,-298,-298,-298,,,,,,,,,,562,,,,,,,,,571,570,574,573,,-298',
'-298,-298,-298,-298,-298,-298,-298,-298,-298,-298,-298,-298,-298,,,-298',
'-298,-298,,,-298,,274,-298,,,-298,-298,,-298,567,-298,,-298,,-298,-298',
'-298,-298,-298,-298,-298,,-298,,-298,,,,,,,,,,,,-619,-298,-298,,-298',
',-298,-619,-619,-619,,,-619,-619,-619,801,-619,557,556,555,802,558,',
',,-619,-619,-619,,,,566,,,,,-619,-619,,-619,-619,-619,-619,-619,,,,',
',,,,,562,,,,,,,,,571,570,574,573,,-619,-619,-619,-619,-619,-619,-619',
'-619,-619,-619,-619,-619,-619,-619,,,-619,-619,-619,,,-619,,271,-619',
',,-619,-619,,-619,567,-619,,-619,,-619,-619,-619,-619,-619,-619,-619',
',-619,-619,-619,,,,,,,,,,,,-427,-619,-619,,-619,,-619,-427,-427,-427',
',,-427,-427,-427,801,-427,557,556,555,802,558,,,,-427,-427,-427,,,,566',
',,,,-427,-427,,-427,-427,-427,-427,-427,,,,,,,,,,562,,,,,,,,,571,570',
'574,573,,-427,-427,-427,-427,-427,-427,-427,-427,-427,-427,-427,-427',
'-427,-427,,,-427,-427,-427,,,-427,,271,-427,,,-427,-427,,-427,567,-427',
',-427,,-427,-427,-427,-427,-427,-427,-427,,-427,-427,-427,,,,,,,,,,',
',-619,-427,-427,,-427,,-427,-619,-619,-619,,,-619,-619,-619,560,-619',
'557,556,555,564,558,,,,-619,-619,,,,,566,,,,,-619,-619,,-619,-619,-619',
'-619,-619,,,,,,,,,,562,,,,,,,,,571,570,574,573,,,,,,,,,,,,,-619,,,,',
',,-619,,,,,271,-619,,,,,,,567,,,,1034,433,,,1035,,,,,,-619,-619,,158',
'159,,154,136,137,138,145,142,144,,-619,139,140,,,-619,160,161,146,147',
',,,,,271,,,,,,,,151,150,,135,157,153,152,148,149,143,141,133,156,134',
',,162,,,,,,,,,,684,433,,,685,,,,,,155,,,158,159,163,154,136,137,138',
'145,142,144,,,139,140,,,,160,161,146,147,,,,,,271,,,,,,,,151,150,,135',
'157,153,152,148,149,143,141,133,156,134,,,162,,,,,,,,,,737,426,,,738',
',,,,,155,,,158,159,163,154,136,137,138,145,142,144,,,139,140,,,,160',
'161,146,147,,,,,,271,,,,,,,,151,150,,135,157,153,152,148,149,143,141',
'133,156,134,,,162,,,,,,,,,,1004,433,,,1003,,,,,,155,,,158,159,163,154',
'136,137,138,145,142,144,,,139,140,,,,160,161,146,147,,,,,,271,,,,,,',
',151,150,,135,157,153,152,148,149,143,141,133,156,134,,,162,,,,,,,,',
',483,426,,,484,,,,,,155,,,158,159,163,154,136,137,138,145,142,144,,',
'139,140,,,,160,161,146,147,,,,,,271,,,,,,,,151,150,,135,157,153,152',
'148,149,143,141,133,156,134,,,162,,,,,,,,,,1032,426,,,1033,,,,,,155',
',,158,159,163,154,136,137,138,145,142,144,,,139,140,,,,160,161,146,147',
',,,,,271,,,,,,,,151,150,,135,157,153,152,148,149,143,141,133,156,134',
',,162,,,,,,,,,,649,426,,,650,,,,,,155,,,158,159,163,154,136,137,138',
'145,142,144,,,139,140,,,,160,161,146,147,,,,,,271,,,,,,,,151,150,,135',
'157,153,152,148,149,143,141,133,156,134,,,162,,,,,,,,,,651,433,,,652',
',,,,,155,,,158,159,163,154,136,137,138,145,142,144,,,139,140,,,,160',
'161,146,147,,,,,,271,,,,,,,,151,150,,135,157,153,152,148,149,143,141',
'133,156,134,,,162,,,,,,,,,,649,426,,,650,,,,,,155,,,158,159,163,154',
'136,137,138,145,142,144,,,139,140,,,,160,161,146,147,,,,,,271,,,,,,',
',151,150,,135,157,153,152,148,149,143,141,133,156,134,,,162,,,,,,,,',
',856,433,,,857,,,,,,155,,,158,159,163,154,136,137,138,145,142,144,,',
'139,140,,,,160,161,146,147,,,,,,271,,,,,,,,151,150,,135,157,153,152',
'148,149,143,141,133,156,134,,,162,,,,,,,,,,681,426,,,682,,,,,,155,,',
'158,159,163,154,136,137,138,145,142,144,,,139,140,,,,160,161,146,147',
',,,,,271,,,,,,,,151,150,,135,157,153,152,148,149,143,141,133,156,134',
',,162,,,,,,,,,,429,433,,,428,,,,,,155,,,158,159,163,154,136,137,138',
'145,142,144,,,139,140,,,,160,161,146,147,,,,,,271,,,,,,,,151,150,,135',
'157,153,152,148,149,143,141,133,156,134,,,162,,,,,,,,,,422,426,,,423',
',,,,,155,,,158,159,163,154,136,137,138,145,142,144,,,139,140,,,,160',
'161,146,147,,,,,,271,,,,,,,,151,150,,135,157,153,152,148,149,143,141',
'133,156,134,,,162,,,,,,,,,,651,433,,,652,,,,,,155,,,158,159,163,154',
'136,137,138,145,142,144,,,139,140,,,,160,161,146,147,,,,,,271,,,,,,',
',151,150,,135,157,153,152,148,149,143,141,133,156,134,,,162,,,,,,,,',
',739,433,,,740,,,,,,155,,,158,159,163,154,136,137,138,145,142,144,,',
'139,140,,,,160,161,146,147,,,,,,271,,,,,,,,151,150,,135,157,153,152',
'148,149,143,141,133,156,134,,560,162,557,556,555,564,558,,,,,483,426',
',,484,566,,,,,155,,,158,159,163,154,136,137,138,145,142,144,,,139,140',
'562,,,160,161,146,147,,,571,570,574,573,,,,,,,,151,150,,135,157,153',
'152,148,149,143,141,133,156,134,,560,162,557,556,555,564,558,,,,567',
',,,,,566,,,,,155,,,,560,163,557,556,555,564,558,,,,,,,562,,560,566,557',
'556,555,564,558,571,570,574,573,,,,,560,566,557,556,555,564,558,,562',
'755,,,,,,,566,571,570,574,573,,,562,546,,,,567,,,,571,570,574,573,,',
'562,,,,,,,,,571,570,574,573,,,567,,,,,,,,,,,,,,,567,,,,,,,,,,,,,,,567' ]
        racc_action_table = arr = ::Array.new(25662, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'429,1032,1033,339,663,906,308,429,429,429,446,446,451,429,429,1049,429',
'596,61,320,758,758,676,737,476,429,320,29,616,1047,928,338,490,676,390',
'320,429,429,663,429,429,429,429,429,592,3,692,692,592,738,346,345,588',
'61,349,853,476,1034,581,64,476,476,476,476,13,451,490,429,429,429,429',
'429,429,429,429,429,429,429,429,429,429,580,855,429,429,429,854,429',
'662,616,616,429,29,308,429,390,390,390,616,429,446,429,545,429,429,429',
'429,429,429,429,758,429,429,429,29,1032,1033,339,739,906,1032,1033,339',
'596,906,652,429,429,737,429,15,429,652,652,652,1034,692,652,652,652',
'429,652,596,1047,928,338,64,596,1047,928,338,652,652,652,738,346,345',
'588,581,349,16,652,652,581,652,652,652,652,652,853,681,1034,853,740',
'853,662,1034,385,22,19,80,580,855,682,739,388,580,855,80,752,752,854',
'652,652,652,652,652,652,652,652,652,652,652,652,652,652,5,545,652,652',
'652,5,652,652,22,376,652,422,376,652,652,223,652,739,652,25,652,789',
'652,652,652,652,652,652,652,40,652,681,652,740,385,719,613,719,719,719',
'43,719,388,590,682,652,652,652,652,95,652,224,652,422,226,48,95,95,95',
'652,489,95,95,95,422,95,681,481,223,681,376,376,740,95,789,95,95,95',
'814,682,681,331,682,72,331,95,95,87,95,95,95,95,95,682,489,362,590,613',
'613,88,756,481,362,590,224,756,613,226,590,123,649,650,590,719,123,123',
'95,95,95,95,95,95,95,95,95,95,95,95,95,95,590,814,95,95,95,372,95,95',
'814,374,95,317,27,95,95,89,95,814,95,27,95,90,95,95,95,95,95,95,95,985',
'95,985,95,649,650,814,924,379,924,924,924,121,924,591,684,95,95,95,95',
'98,95,330,95,317,330,289,98,98,98,95,289,98,98,98,317,98,372,372,372',
'205,374,374,374,98,458,98,98,98,937,863,358,225,856,937,863,98,98,358',
'98,98,98,98,98,227,882,228,591,684,379,379,379,232,382,591,684,882,458',
'264,591,684,458,458,591,684,924,267,98,98,98,98,98,98,98,98,98,98,98',
'98,98,98,591,684,98,98,98,856,98,98,882,882,98,278,856,98,98,279,98',
'856,98,632,98,856,98,98,98,98,98,98,98,704,98,359,98,382,382,382,363',
'357,359,856,704,18,882,363,357,98,98,98,98,428,98,41,98,42,282,423,428',
'428,428,98,285,632,428,428,658,428,658,658,658,658,658,49,632,704,704',
'364,751,366,49,293,658,751,364,18,366,428,428,49,428,428,428,428,428',
'41,18,42,360,423,697,44,44,697,658,360,41,457,42,704,423,295,342,658',
'658,658,658,342,428,428,428,428,428,428,428,428,428,428,428,428,428',
'428,296,361,428,428,428,297,428,457,361,658,428,457,457,428,356,303',
'954,658,428,954,428,356,428,428,428,428,428,428,428,306,428,543,428',
'594,543,562,307,562,562,562,594,562,707,707,651,428,428,312,428,594',
'428,651,651,651,726,726,651,651,651,428,651,842,314,842,842,842,477',
'842,318,651,651,651,651,562,506,506,506,506,506,319,651,651,562,651',
'651,651,651,651,978,322,978,978,978,304,978,313,313,328,477,842,304',
'332,477,477,477,477,337,337,842,304,343,651,651,651,651,651,651,651',
'651,651,651,651,651,651,651,344,978,651,651,651,302,651,651,20,20,651',
'348,302,651,651,350,651,463,651,378,651,302,651,651,651,651,651,651',
'651,381,651,651,651,463,463,1002,384,1002,1002,1002,387,1002,533,533',
'409,651,651,651,651,463,651,463,651,463,463,463,463,1018,1018,651,404',
'404,404,404,404,404,404,404,404,404,404,404,404,404,404,404,404,404',
'404,404,404,404,404,404,411,414,417,404,404,404,404,404,404,404,404',
'404,404,291,291,291,291,291,404,404,404,404,404,404,404,404,404,420',
'421,404,430,894,465,894,894,894,438,894,404,404,459,404,404,404,404',
'404,404,404,465,465,404,404,460,461,462,404,404,404,404,716,491,716',
'716,716,465,716,492,507,465,465,465,465,404,404,508,404,404,404,404',
'404,404,404,404,404,404,404,685,511,404,404,759,759,513,685,759,759',
'759,716,685,404,518,980,685,980,980,980,716,980,404,522,531,532,541',
'404,757,757,757,757,757,757,757,757,757,757,757,757,757,757,757,757',
'757,757,757,757,757,757,757,757,544,980,548,757,757,757,757,757,757',
'757,757,757,757,9,9,9,9,9,757,757,757,757,757,757,757,757,757,549,551',
'757,552,553,464,675,675,675,675,675,757,757,560,757,757,757,757,757',
'757,757,464,464,757,757,568,572,575,757,757,757,757,844,577,844,844',
'844,464,844,464,582,464,464,464,464,757,757,583,757,757,757,757,757',
'757,757,757,757,757,757,620,623,757,857,625,347,629,633,638,644,857',
'844,347,653,925,857,925,925,925,857,925,347,757,655,661,668,670,757',
'627,627,627,627,627,627,627,627,627,627,627,627,627,627,627,627,627',
'627,627,627,627,627,627,627,925,678,680,627,627,627,627,627,627,627',
'627,627,627,683,686,687,690,691,627,627,627,627,627,627,627,627,627',
'693,1016,627,1016,1016,1016,958,1016,696,703,718,627,627,958,627,627',
'627,627,627,627,627,721,958,627,627,300,301,967,627,627,627,627,300',
'301,967,728,733,736,768,1016,773,300,301,967,791,627,627,792,627,627',
'627,627,627,627,627,627,627,627,627,968,969,627,627,1010,971,794,968',
'969,795,796,1010,971,627,798,799,968,969,800,801,1010,971,627,813,817',
'820,821,627,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12',
'12,12,12,12,12,826,827,828,12,12,12,12,12,12,12,12,12,12,829,833,834',
'836,837,12,12,12,12,12,12,12,12,12,839,841,12,843,846,849,17,859,864',
'865,866,12,12,17,12,12,12,12,12,12,12,875,17,12,12,1035,743,517,12,12',
'12,12,1035,743,517,876,893,1035,897,898,900,1035,743,517,901,12,12,926',
'12,12,12,12,12,12,12,12,12,12,12,896,222,12,12,930,931,936,896,222,944',
'947,948,949,12,950,952,896,222,962,970,973,974,12,975,976,977,979,12',
'91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91',
'91,1003,1004,1006,91,91,91,91,91,91,91,91,91,91,1017,1022,1023,1024',
'1025,91,91,91,91,91,91,91,91,91,91,91,91,1026,91,1027,1028,1031,1036',
'1037,1,91,91,,91,91,91,91,91,91,91,,,91,91,,,,91,91,91,91,,,,,,,,,,',
',,,91,91,,91,91,91,91,91,91,91,91,91,91,91,,,91,,,,,,,,,,,,,,,,,,,,91',
',,,,91,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74',
'74,74,74,,,,74,74,74,74,74,74,74,74,74,74,,,,,,74,74,74,74,74,74,74',
'74,74,74,74,74,,74,,,,,,,74,74,,74,74,74,74,74,74,74,,,74,74,,,,74,74',
'74,74,,,,,,74,,,,,,,,74,74,,74,74,74,74,74,74,74,74,74,74,74,,,74,,',
',,,,,,,,,,,,,,,,,74,,,,,74,11,11,11,11,11,11,11,11,11,11,11,11,11,11',
'11,11,11,11,11,11,11,11,11,11,,,,11,11,11,11,11,11,11,11,11,11,,,,,',
'11,11,11,11,11,11,11,11,11,11,,11,,,,,,,,,11,11,,11,11,11,11,11,11,11',
',,11,11,,,,11,11,11,11,,,,,,,,,,,,,,11,11,,11,11,11,11,11,11,11,11,11',
'11,11,,,11,11,,,,,,,,,,11,810,810,810,810,810,810,,,11,810,810,,,11',
'810,,810,810,810,810,810,810,810,,,,,,810,810,810,810,810,810,810,,',
'810,,,,,441,810,810,,810,810,810,810,810,810,810,810,810,,810,810,810',
',810,810,,810,810,810,441,441,441,441,441,441,441,441,441,441,441,,441',
'441,,,441,441,,810,,,810,,,810,810,,,810,,810,441,,441,810,441,441,441',
'441,441,441,441,810,441,,,,810,810,810,810,810,810,,,,810,810,,441,',
'441,,,810,,,810,810,810,899,899,899,899,899,899,,,,899,899,,,,899,,899',
'899,899,899,899,899,899,,,,,,899,899,899,899,899,899,899,,,899,,,,,416',
'899,899,,899,899,899,899,899,899,899,899,899,,899,899,899,,899,899,',
'899,899,899,416,416,416,416,416,416,416,416,416,416,416,,416,416,,,416',
'416,,899,,,899,,,899,899,,,899,,899,416,,416,899,416,416,416,416,416',
'416,416,899,416,,,,899,899,899,899,899,899,,,,899,899,,416,,,,,899,',
',899,899,899,809,809,809,809,809,809,,,,809,809,,,,809,,809,809,809',
'809,809,809,809,,,,,,809,809,809,809,809,809,809,,,809,,,,,654,809,809',
',809,809,809,809,809,809,809,809,809,,809,809,809,,809,809,,809,809',
'809,654,654,654,654,654,654,654,654,654,654,654,,654,654,,,654,654,',
'809,,,809,,,809,809,,,809,,809,654,,654,809,654,654,654,654,654,654',
'654,809,654,,,,809,809,809,809,809,809,,,,809,809,,654,,,,,809,,,809',
'809,809,702,702,702,702,702,702,,,,702,702,,,,702,,702,702,702,702,702',
'702,702,,,,,,702,702,702,702,702,702,702,,,702,,,,,,702,702,,702,702',
'702,702,702,702,702,702,702,,702,702,702,,702,702,,702,702,702,480,480',
'480,480,480,480,480,480,480,480,480,,480,480,,,480,480,,702,,,702,,',
'702,702,,,702,,702,480,,480,702,480,480,480,480,480,480,480,702,480',
',,,702,702,702,702,702,702,,,,702,702,480,480,,,,,702,,,702,702,702',
'294,294,294,294,294,294,,,,294,294,,,,294,,294,294,294,294,294,294,294',
',,,,,294,294,294,294,294,294,294,,,294,,,,,,294,294,,294,294,294,294',
'294,294,294,294,294,,294,294,294,,294,294,,294,294,294,780,780,780,780',
'780,780,780,780,780,780,780,,780,780,,,780,780,,294,,,294,,,294,294',
',,294,,294,780,,780,294,780,780,780,780,780,780,780,294,780,,,,294,294',
'294,294,294,294,,,,294,294,,780,,,,,294,,,294,294,294,753,753,753,753',
'753,753,,,,753,753,,,,753,,753,753,753,753,753,753,753,,,,,,753,753',
'753,753,753,753,753,,,753,,,,,,753,753,,753,753,753,753,753,753,753',
'753,753,,753,753,753,,753,753,,753,753,753,777,777,777,777,777,777,777',
'777,777,777,777,,777,777,,,777,777,,753,,,753,,,753,753,,,753,,753,777',
',777,753,777,777,777,777,777,777,777,753,777,,,,753,753,753,753,753',
'753,,,,753,753,,777,,,,,753,,,753,753,753,966,966,966,966,966,966,,',
',966,966,,,,966,,966,966,966,966,966,966,966,,,,,,966,966,966,966,966',
'966,966,,,966,,,,,,966,966,,966,966,966,966,966,966,966,966,966,,966',
'966,966,,966,966,,966,966,966,784,784,784,784,784,784,784,784,784,784',
'784,,784,784,,,784,784,,966,,,966,,,966,966,,,966,,966,784,,784,966',
'784,784,784,784,784,784,784,966,784,,,,966,966,966,966,966,966,,,,966',
'966,,784,,,,,966,,,966,966,966,2,2,2,2,2,2,,,,2,2,,,,2,,2,2,2,2,2,2',
'2,,,,,,2,2,2,2,2,2,2,,,2,,,,,,2,2,2,2,2,2,2,2,2,2,2,2,,2,2,2,,2,2,,2',
'2,2,782,782,782,782,782,782,782,782,782,782,782,,782,782,,,782,782,',
'2,,,2,,,2,2,,,2,,2,782,,782,2,782,782,782,782,782,782,782,2,782,,,,2',
'2,2,2,2,2,,,,2,2,,782,,,,,2,,,2,2,2,754,754,754,754,754,754,,,,754,754',
',,,754,,754,754,754,754,754,754,754,,,,,,754,754,754,754,754,754,754',
',,754,,,,,,754,754,,754,754,754,754,754,754,754,754,754,,754,754,754',
',754,754,,754,754,754,436,436,436,436,436,436,436,436,436,436,436,,436',
'436,,,436,436,,754,,,754,,,754,754,,,754,,754,436,,436,754,436,436,436',
'436,436,436,436,754,436,,,,754,754,754,754,754,754,,,,754,754,,436,',
',,,754,,,754,754,754,860,860,860,860,860,860,,,,860,860,,,,860,,860',
'860,860,860,860,860,860,,,,,,860,860,860,860,860,860,860,,,860,,,,,',
'860,860,,860,860,860,860,860,860,860,860,860,,860,860,860,,860,860,',
'860,860,860,881,881,881,881,881,881,881,881,881,881,881,,881,881,,,881',
'881,,860,,,860,,,860,860,,,860,,860,881,,881,860,881,881,881,881,881',
'881,881,860,881,,,,860,860,860,860,860,860,,,,860,860,,881,,,,,860,',
',860,860,860,299,299,299,299,299,299,,,,299,299,,,,299,,299,299,299',
'299,299,299,299,,,,,,299,299,299,299,299,299,299,,,299,,,,,,299,299',
',299,299,299,299,299,299,299,299,299,,299,299,299,,299,299,,299,299',
'299,775,775,775,775,775,775,775,775,775,775,775,,775,775,,,775,775,',
'299,,,299,,,299,299,,,299,,299,775,,775,299,775,775,775,775,775,775',
'775,299,775,,,,299,299,299,299,299,299,,,,299,299,,775,,,,,299,,,299',
'299,299,851,851,851,851,851,851,,,,851,851,,,,851,,851,851,851,851,851',
'851,851,,,,,,851,851,851,851,851,851,851,,,851,,,,,,851,851,,851,851',
'851,851,851,851,851,851,851,,851,851,851,,851,851,,851,851,851,770,770',
'770,770,770,770,770,770,770,770,770,,770,770,,,770,770,,851,,,851,,',
'851,851,,,851,,851,770,,770,851,770,770,770,770,770,770,770,851,770',
',,,851,851,851,851,851,851,,,,851,851,,770,,,,,851,,,851,851,851,850',
'850,850,850,850,850,,,,850,850,,,,850,,850,850,850,850,850,850,850,',
',,,,850,850,850,850,850,850,850,,,850,,,,,,850,850,,850,850,850,850',
'850,850,850,850,850,,850,850,850,,850,850,,850,850,850,689,689,689,689',
'689,689,689,689,689,689,689,,689,689,,,689,689,,850,,,850,,,850,850',
',,850,,850,689,,689,850,689,689,689,689,689,689,689,850,689,,,,850,850',
'850,850,850,850,,,,850,850,,689,,,,,850,,,850,850,850,805,805,805,805',
'805,805,,,,805,805,,,,805,,805,805,805,805,805,805,805,,,,,,805,805',
'805,805,805,805,805,,,805,,,,,,805,805,,805,805,805,805,805,805,805',
'805,805,,805,805,805,,805,805,,805,805,805,24,24,24,24,24,24,24,24,24',
'24,24,,24,24,,,24,24,,805,,,805,,,805,805,,,805,,805,24,,24,805,24,24',
'24,24,24,24,24,805,24,,,,805,805,805,805,805,805,,,,805,805,,24,,,,',
'805,,,805,805,805,403,403,403,403,403,403,,,,403,403,,,,403,,403,403',
'403,403,403,403,403,,,,,,403,403,403,403,403,403,403,,,403,,,,,,403',
'403,403,403,403,403,403,403,403,403,403,403,,403,403,403,,403,403,,403',
'403,403,276,276,276,276,276,276,276,276,276,276,276,,276,276,,,276,276',
',403,,,403,,,403,403,,,403,,403,276,,276,403,276,276,276,276,276,276',
'276,403,276,,,,403,403,403,403,403,403,,,,403,403,,276,,,,,403,,,403',
'403,403,207,207,207,207,207,207,,,,207,207,,,,207,,207,207,207,207,207',
'207,207,,,,,,207,207,207,207,207,207,207,,,207,,,,,,207,207,,207,207',
'207,207,207,207,207,207,207,,207,207,207,,207,207,,207,207,207,529,529',
'529,529,529,529,529,529,529,529,529,,529,529,,,529,529,,207,,,207,,',
'207,207,,,207,,207,529,,529,207,529,529,529,529,529,529,529,207,529',
',,,207,207,207,207,207,207,,,,207,207,,529,,,,,207,,,207,207,207,990',
'990,990,990,990,990,,,,990,990,,,,990,,990,990,990,990,990,990,990,',
',,,,990,990,990,990,990,990,990,,,990,,,,,,990,990,,990,990,990,990',
'990,990,990,990,990,,990,990,990,,990,990,,990,990,990,878,878,878,878',
'878,878,878,878,878,878,878,,878,878,,,878,878,,990,,,990,,,990,990',
',,990,,990,878,,878,990,878,878,878,878,878,878,878,990,878,,,,990,990',
'990,990,990,990,,,,990,990,,878,,,,,990,,,990,990,990,231,231,231,231',
'231,231,,,,231,231,,,,231,,231,231,231,231,231,231,231,,,,,,231,231',
'231,231,231,231,231,,,231,,,,,,231,231,,231,231,231,231,231,231,231',
'231,231,,231,231,231,,231,231,,231,231,231,473,473,473,473,473,473,473',
',,473,473,,,,,,473,473,,231,,,231,,,231,231,,,231,,231,473,,473,231',
'473,473,473,473,473,473,473,231,473,,,,231,231,231,231,231,231,,,,231',
'231,,,,,,,231,,,231,231,231,325,325,325,325,325,325,,,,325,325,,,,325',
',325,325,325,325,325,325,325,,,,,,325,325,325,325,325,325,325,,,325',
',,,,,325,325,,325,325,325,325,325,325,325,325,325,,325,325,325,,325',
'325,,325,325,325,471,471,471,471,471,471,471,,,471,471,,,,,,471,471',
',325,,,325,,,325,325,,,325,,325,471,,471,325,471,471,471,471,471,471',
'471,325,471,,,,325,325,325,325,325,325,,,,325,325,,,,,,,325,,,325,325',
'325,701,701,701,701,701,701,,,,701,701,,,,701,,701,701,701,701,701,701',
'701,,,,,,701,701,701,701,701,701,701,,,701,,,,,,701,701,,701,701,701',
'701,701,701,701,701,701,,701,701,701,,701,701,,701,701,701,455,455,455',
'455,455,455,455,455,455,455,455,,455,455,,,455,455,,701,,,701,,,701',
'701,,,701,,701,455,,455,701,455,455,455,455,455,455,455,701,455,,,,701',
'701,701,701,701,701,,,,701,701,,,,,,,701,,,701,701,701,579,579,579,579',
'579,579,,,,579,579,,,,579,,579,579,579,579,579,579,579,,,,,,579,579',
'579,579,579,579,579,,,579,,,,,,579,579,,579,579,579,579,579,579,579',
'579,579,,579,579,579,,579,579,,579,579,579,470,,,,,,,,,,,,,,,,470,470',
',579,,,579,,,579,579,,,579,,579,470,,470,579,470,470,470,470,,,470,579',
'470,,,,579,579,579,579,579,579,,,,579,579,,,,,,,579,,,579,579,579,989',
'989,989,989,989,989,,,,989,989,,,,989,,989,989,989,989,989,989,989,',
',,,,989,989,989,989,989,989,989,,,989,,,,,,989,989,,989,989,989,989',
'989,989,989,989,989,,989,989,989,,989,989,,989,989,989,475,475,475,475',
'475,475,475,,,475,475,,,,,,475,475,,989,,,989,,,989,989,,,989,,989,475',
',475,989,475,475,475,475,475,475,475,989,475,,,,989,989,989,989,989',
'989,,,,989,989,,,,,,,989,,,989,989,989,576,576,576,576,576,576,,,,576',
'576,,,,576,,576,576,576,576,576,576,576,,,,,,576,576,576,576,576,576',
'576,,,576,,,,,,576,576,,576,576,576,576,576,576,576,576,576,,576,576',
'576,,576,576,,576,576,576,478,478,478,478,478,478,478,,,478,478,,,,',
',478,478,,576,,,576,,,576,576,,,576,,576,478,,478,576,478,478,478,478',
'478,478,478,576,478,,,,576,576,576,576,576,576,,,,576,576,,,,,,,576',
',,576,576,576,986,986,986,986,986,986,,,,986,986,,,,986,,986,986,986',
'986,986,986,986,,,,,,986,986,986,986,986,986,986,,,986,,,,,,986,986',
',986,986,986,986,986,986,986,986,986,,986,986,986,,986,986,,986,986',
'986,479,479,479,479,479,479,479,479,,479,479,,,,,,479,479,,986,,,986',
',,986,986,,,986,,986,479,,479,986,479,479,479,479,479,479,479,986,479',
',,,986,986,986,986,986,986,,,,986,986,,,,,,,986,,,986,986,986,981,981',
'981,981,981,981,,,,981,981,,,,981,,981,981,981,981,981,981,981,,,,,',
'981,981,981,981,981,981,981,,,981,,,,,,981,981,,981,981,981,981,981',
'981,981,981,981,,981,981,981,,981,981,,981,981,981,469,,,,,,,,,,,,,',
',,469,469,,981,,,981,,,981,981,,,981,,981,469,,469,981,469,469,469,469',
',,469,981,469,,,,981,981,981,981,981,981,,,,981,981,,,,,,,981,,,981',
'981,981,760,760,760,760,760,760,,,,760,760,,,,760,,760,760,760,760,760',
'760,760,,,,,,760,760,760,760,760,760,760,,,760,,,,,,760,760,,760,760',
'760,760,760,760,760,760,760,,760,760,760,,760,760,,760,760,760,468,',
',,,,,,,,,,,,,,468,468,,760,,,760,,,760,760,,,760,,760,468,,468,760,468',
'468,468,468,,,468,760,468,,,,760,760,760,760,760,760,,,,760,760,,,,',
',,760,,,760,760,760,819,819,819,819,819,819,,,,819,819,,,,819,,819,819',
'819,819,819,819,819,,,,,,819,819,819,819,819,819,819,,,819,,,,,,819',
'819,,819,819,819,819,819,819,819,819,819,,819,819,819,,819,819,,819',
'819,819,467,,,,,,,,,,,,,,,,467,467,,819,,,819,,,819,819,,,819,,819,467',
',467,819,467,467,467,467,,,467,819,467,,,,819,819,819,819,819,819,,',
',819,819,,,,,,,819,,,819,819,819,933,933,933,933,933,933,,,,933,933',
',,,933,,933,933,933,933,933,933,933,,,,,,933,933,933,933,933,933,933',
',,933,,,,,,933,933,,933,933,933,933,933,933,933,933,933,,933,933,933',
',933,933,,933,933,933,466,466,466,466,466,466,466,,,466,466,,,,,,466',
'466,,933,,,933,,,933,933,,,933,,933,466,,466,933,466,466,466,466,466',
'466,466,933,466,,,,933,933,933,933,933,933,,,,933,933,,,,,,,933,,,933',
'933,933,36,36,36,36,36,36,,,,36,36,,,,36,,36,36,36,36,36,36,36,,,,,',
'36,36,36,36,36,36,36,,,36,,,,,,36,36,,36,36,36,36,36,36,36,36,36,,36',
'36,36,,36,36,,36,36,36,456,456,456,456,456,456,456,456,456,456,456,',
'456,456,,,456,456,,36,,,36,,,36,36,,,36,,36,456,,456,36,456,456,456',
'456,456,456,456,36,456,,,,36,36,36,36,36,36,,,,36,36,,,,,,,36,,,36,36',
'36,903,903,903,903,903,903,,,,903,903,,,,903,,903,903,903,903,903,903',
'903,,,,,,903,903,903,903,903,903,903,,,903,,,,,,903,903,,903,903,903',
'903,903,903,903,903,903,,903,903,903,,903,903,,903,903,903,474,474,474',
'474,474,474,474,,,474,474,,,,,,474,474,,903,,,903,,,903,903,,,903,,903',
'474,,474,903,474,474,474,474,474,474,474,903,474,,,,903,903,903,903',
'903,903,,,,903,903,,,,,,,903,,,903,903,903,256,256,256,,256,,,,256,256',
',,,256,,256,256,256,256,256,256,256,,,,,,256,256,256,256,256,256,256',
',,256,,,,,,,256,,,256,256,256,256,256,256,256,256,,256,256,256,,256',
'256,,256,256,256,,,,,,,,,,,,,,,,,,,,256,,,256,,,256,256,,917,256,917',
'917,917,917,917,256,,,,,,,,256,917,,,,256,256,256,256,256,256,,,,256',
'256,,,,,,,256,917,,256,256,256,741,741,741,,741,,917,917,741,741,,,',
'741,,741,741,741,741,741,741,741,,,,,,741,741,741,741,741,741,741,,',
'741,,,,917,,,741,,,741,741,741,741,741,741,741,741,,741,741,741,,741',
'741,,741,741,741,,,,,,,,,,,,,,,,,,,,741,,,741,,,741,741,,998,741,998',
'998,998,998,998,741,,,,,,,,741,998,,,,741,741,741,741,741,741,,,,741',
'741,,,,,,,741,998,,741,741,741,747,747,747,,747,,998,998,747,747,,,',
'747,,747,747,747,747,747,747,747,,,,,,747,747,747,747,747,747,747,,',
'747,,,,998,,,747,,,747,747,747,747,747,747,747,747,747,747,747,747,',
'747,747,,747,747,747,472,472,472,472,472,472,472,,,472,472,,,,,,472',
'472,,747,,,747,,,747,747,,,747,,747,472,747,472,747,472,472,472,472',
'472,472,472,747,472,,,,747,747,747,747,747,747,,,,747,747,,,,,,,747',
',747,747,747,747,257,257,257,,257,,,,257,257,,,,257,,257,257,257,257',
'257,257,257,,,,,,257,257,257,257,257,257,257,,,257,,,,,,,257,,,257,257',
'257,257,257,257,257,257,,257,257,257,,257,257,,257,257,257,,,,,,,,,',
',,,,,,,,,,257,,,257,,,257,257,,919,257,919,919,919,919,919,257,,,,,',
',,257,919,,,,257,257,257,257,257,257,,,,257,257,,,,,,,257,919,,257,257',
'257,769,769,769,,769,,919,919,769,769,,,,769,,769,769,769,769,769,769',
'769,,,,,,769,769,769,769,769,769,769,,,769,,,,919,,,769,,,769,769,769',
'769,769,769,769,769,,769,769,769,,769,769,,769,769,769,,,,,,,,,,,,,',
',,,,,,769,,,769,,,769,769,,1011,769,1011,1011,1011,1011,1011,769,,,',
',,,,769,1011,,,,769,769,769,769,769,769,,,,769,769,,,,,,,769,1011,,769',
'769,769,771,771,771,,771,,1011,1011,771,771,,,,771,,771,771,771,771',
'771,771,771,,,,,,771,771,771,771,771,771,771,,,771,,,,1011,,,771,,,771',
'771,771,771,771,771,771,771,,771,771,771,,771,771,,771,771,771,,,,,',
',,,,,,,,,,,,,,771,,,771,,,771,771,,712,771,712,712,712,712,712,771,',
',,,,,,771,712,,,,771,771,771,771,771,771,,,,771,771,,,,,,,771,712,,771',
'771,771,258,258,258,,258,,712,712,258,258,,,,258,,258,258,258,258,258',
'258,258,,,,,,258,258,258,258,258,258,258,,,258,,,,712,,,258,,,258,258',
'258,258,258,258,258,258,,258,258,258,,258,258,,258,258,258,,,,,,,,,',
',,,,,,,,,,258,,,258,,,258,258,,890,258,890,890,890,890,890,258,,,,,',
',,258,890,,,,258,258,258,258,258,258,,,,258,258,,,,,,,258,890,,258,258',
'258,785,785,785,,785,,890,890,785,785,,,,785,,785,785,785,785,785,785',
'785,,,,,,785,785,785,785,785,785,785,,,785,,,,890,,,785,,,785,785,785',
'785,785,785,785,785,,785,785,785,,785,785,,785,785,785,,,,,,,,,,,,,',
',,,,,,785,,,785,,,785,785,,994,785,994,994,994,994,994,785,,,,,,,,785',
'994,,,,785,785,785,785,785,785,,,,785,785,,,,,,,785,994,,785,785,785',
'786,786,786,,786,,994,994,786,786,,,,786,,786,786,786,786,786,786,786',
',,,,,786,786,786,786,786,786,786,,,786,,,,994,,,786,,,786,786,786,786',
'786,786,786,786,,786,786,786,,786,786,,786,786,786,,,,,,,,,,,,,,,,,',
',,786,,,786,,,786,786,,996,786,996,996,996,996,996,786,,,,,,,,786,996',
',,,786,786,786,786,786,786,,,,786,786,,,,,,,786,996,,786,786,786,787',
'787,787,,787,,996,996,787,787,,,,787,,787,787,787,787,787,787,787,,',
',,,787,787,787,787,787,787,787,,,787,,,,996,,,787,,,787,787,787,787',
'787,787,787,787,,787,787,787,,787,787,,787,787,787,,,,,,,,,,,,,,,,,',
',,787,,,787,,,787,787,,915,787,915,915,915,915,915,787,,,,,,,,787,915',
',,,787,787,787,787,787,787,,,,787,787,,,,,,,787,915,,787,787,787,788',
'788,788,,788,,915,915,788,788,,,,788,,788,788,788,788,788,788,788,,',
',,,788,788,788,788,788,788,788,,,788,,,,915,,,788,,,788,788,788,788',
'788,788,788,788,,788,788,788,,788,788,,788,788,788,,,,,,,,,,,,,,,,,',
',,788,,,788,,,788,788,,1042,788,1042,1042,1042,1042,1042,788,,,,,,,',
'788,1042,,,,788,788,788,788,788,788,,,,788,788,,,,,,,788,1042,,788,788',
'788,790,790,790,,790,,1042,1042,790,790,,,,790,,790,790,790,790,790',
'790,790,,,,,,790,790,790,790,790,790,790,,,790,,,,1042,,,790,,,790,790',
'790,790,790,790,790,790,,790,790,790,,790,790,,790,790,790,,,,,,,,,',
',,,,,,,,,,790,,,790,,,790,790,,,790,,,,,,790,,,,,,,,790,,,,,790,790',
'790,790,790,790,,,,790,790,,,,,,,790,,,790,790,790,265,265,265,,265',
',,,265,265,,,,265,,265,265,265,265,265,265,265,,,,,,265,265,265,265',
'265,265,265,,,265,,,,,,,265,,,265,265,265,265,265,265,265,265,265,265',
'265,265,,265,265,,265,265,265,,,,,,,,,,,,,,,,,,,,265,,,265,,,265,265',
',,265,,265,,265,,265,,,,,,,,265,,,,,265,265,265,265,265,265,,,,265,265',
',,,,,,265,,265,265,265,265,271,271,271,,271,,,,271,271,,,,271,,271,271',
'271,271,271,271,271,,,,,,271,271,271,271,271,271,271,,,271,,,,,,,271',
',,271,271,271,271,271,271,271,271,271,271,271,271,,271,271,,271,271',
'271,,,,,,,,,,,,,,,,,,,,271,,,271,,,271,271,,,271,,271,,271,,271,,,,',
',,,271,,,,,271,271,271,271,271,271,,,,271,271,,,,,,,271,,271,271,271',
'271,274,274,274,,274,,,,274,274,,,,274,,274,274,274,274,274,274,274',
',,,,,274,274,274,274,274,274,274,,,274,,,,,,,274,,,274,274,274,274,274',
'274,274,274,274,274,274,274,,274,274,,274,274,274,,,,,,,,,,,,,,,,,,',
',274,,,274,,,274,274,,,274,,274,,274,,274,,,,,,,,274,,,,,274,274,274',
'274,274,274,,,,274,274,274,,,,,,274,,274,274,274,274,32,32,32,,32,,',
',32,32,,,,32,,32,32,32,32,32,32,32,,,,,,32,32,32,32,32,32,32,,,32,,',
',,,,32,,,32,32,32,32,32,32,32,32,32,32,32,32,,32,32,,32,32,32,,,,,,',
',,,,,,,,,,,,,32,,,32,,,32,32,,,32,,32,,32,,32,,,,,,,,32,,,,,32,32,32',
'32,32,32,,,,32,32,,,,,,,32,,32,32,32,32,33,33,33,,33,,,,33,33,,,,33',
',33,33,33,33,33,33,33,,,,,,33,33,33,33,33,33,33,,,33,,,,,,,33,,,33,33',
'33,33,33,33,33,33,33,33,33,33,,33,33,,33,33,33,,,,,,,,,,,,,,,,,,,,33',
',,33,,,33,33,,,33,,33,,33,,33,,,,,,,,33,,,,,33,33,33,33,33,33,,,,33',
'33,,,,,,,33,,33,33,33,33,802,802,802,,802,,,,802,802,,,,802,,802,802',
'802,802,802,802,802,,,,,,802,802,802,802,802,802,802,,,802,,,,,,,802',
',,802,802,802,802,802,802,802,802,,802,802,802,,802,802,,,,802,,,,,',
',,,,,,,,,,,,,,802,,,802,,,802,802,,,802,,,,,,,,,,,,,,,,,,,802,802,802',
'802,802,802,,,,802,802,,,,,,,802,,,802,802,802,281,281,281,,281,,,,281',
'281,,,,281,,281,281,281,281,281,281,281,,,,,,281,281,281,281,281,281',
'281,,,281,,,,,,,281,,,281,281,281,281,281,281,281,281,,281,281,281,',
'281,281,,281,281,281,,,,,,,,,,,,,,,,,,,,281,,,281,,,281,281,,,281,,',
',,,281,,,,,,,,281,,,,,281,281,281,281,281,281,,,,281,281,,,,,,,281,',
',281,281,281,34,34,34,,34,,,,34,34,,,,34,,34,34,34,34,34,34,34,,,,,',
'34,34,34,34,34,34,34,,,34,,,,,,,34,,,34,34,34,34,34,34,34,34,34,34,34',
'34,,34,34,,34,34,34,,,,,,,,,,,,,,,,,,,,34,,,34,,,34,34,,,34,,34,,34',
',34,,,,,,,,34,,,,,34,34,34,34,34,34,,,,34,34,,,,,,,34,,34,34,34,34,283',
'283,283,,283,,,,283,283,,,,283,,283,283,283,283,283,283,283,,,,,,283',
'283,283,283,283,283,283,,,283,,,,,,,283,,,283,283,283,283,283,283,283',
'283,,283,283,283,,283,283,,283,283,283,,,,,,,,,,,,,,,,,,,,283,,,283',
',,283,283,,,283,,,,,,283,,,,,,,,283,,,,,283,283,283,283,283,283,,,,283',
'283,,,,,,,283,,,283,283,283,286,286,286,,286,,,,286,286,,,,286,,286',
'286,286,286,286,286,286,,,,,,286,286,286,286,286,286,286,,,286,,,,,',
',286,,,286,286,286,286,286,286,286,286,,286,286,286,,286,286,,286,286',
'286,,,,,,,,,,,,,,,,,,,,286,,,286,,,286,286,,,286,,,,,,286,,,,,,,,286',
',,,,286,286,286,286,286,286,,,,286,286,,,,,,,286,,,286,286,286,292,292',
'292,292,292,,,,292,292,,,,292,,292,292,292,292,292,292,292,,,,,,292',
'292,292,292,292,292,292,,,292,,,,,,292,292,,292,292,292,292,292,292',
'292,292,292,,292,292,292,,292,292,,292,292,292,,,,,,,,,,,,,,,,,,,,292',
',,292,,,292,292,,,292,,292,,,,292,,,,,,,,292,,,,,292,292,292,292,292',
'292,,,,292,292,,,,,,,292,,,292,292,292,37,37,37,,37,,,,37,37,,,,37,',
'37,37,37,37,37,37,37,,,,,,37,37,37,37,37,37,37,,,37,,,,,,,37,,,37,37',
'37,37,37,37,37,37,,37,37,37,,37,37,,,,37,,,,,,,,,,,,,,,,,,,,37,,,37',
',,37,37,,,37,,37,,,,,,,,,,,,,,,,,37,37,37,37,37,37,,,,37,37,,,,,,,37',
',,37,37,37,38,38,38,,38,,,,38,38,,,,38,,38,38,38,38,38,38,38,,,,,,38',
'38,38,38,38,38,38,,,38,,,,,,,38,,,38,38,38,38,38,38,38,38,,38,38,38',
',38,38,,,,38,,,,,,,,,,,,,,,,,,,,38,,,38,,,38,38,,,38,,,,,,,,,,,,,,,',
',,,38,38,38,38,38,38,,,,38,38,,,,38,,,38,,,38,38,38,298,298,298,,298',
',,,298,298,,,,298,,298,298,298,298,298,298,298,,,,,,298,298,298,298',
'298,298,298,,,298,,,,,,,298,,,298,298,298,298,298,298,298,298,,298,298',
'298,,298,298,,,,298,,,,,,,,,,,,,,,,,,,,298,,,298,,,298,298,,,298,,,',
',,,,,,,,,,,,,,,298,298,298,298,298,298,,,,298,298,,,,298,,,298,,,298',
'298,298,848,848,848,,848,,,,848,848,,,,848,,848,848,848,848,848,848',
'848,,,,,,848,848,848,848,848,848,848,,,848,,,,,,,848,,,848,848,848,848',
'848,848,848,848,,848,848,848,,848,848,,848,848,848,,,,,,,,,,,,,,,,,',
',,848,,,848,,,848,848,,,848,,,,,,848,,,,,,,,848,,,,,848,848,848,848',
'848,848,,,,848,848,,,,,,,848,,,848,848,848,861,861,861,,861,,,,861,861',
',,,861,,861,861,861,861,861,861,861,,,,,,861,861,861,861,861,861,861',
',,861,,,,,,,861,,,861,861,861,861,861,861,861,861,,861,861,861,,861',
'861,,861,861,861,,,,,,,,,,,,,,,,,,,,861,,,861,,,861,861,,,861,,,,,,861',
',,,,,,,861,,,,,861,861,861,861,861,861,,,,861,861,,,,,,,861,,,861,861',
'861,879,879,879,,879,,,,879,879,,,,879,,879,879,879,879,879,879,879',
',,,,,879,879,879,879,879,879,879,,,879,,,,,,,879,,,879,879,879,879,879',
'879,879,879,879,879,879,879,,879,879,,879,879,879,,,,,,,,,,,,,,,,,,',
',879,,,879,,,879,879,,,879,,,,879,,879,,,,,,,,879,,,,,879,879,879,879',
'879,879,,,,879,879,,,,,,,879,,879,879,879,879,880,880,880,,880,,,,880',
'880,,,,880,,880,880,880,880,880,880,880,,,,,,880,880,880,880,880,880',
'880,,,880,,,,,,,880,,,880,880,880,880,880,880,880,880,,880,880,880,',
'880,880,,880,880,880,,,,,,,,,,,,,,,,,,,,880,,,880,,,880,880,,,880,,',
',,,880,,,,,,,,880,,,,,880,880,880,880,880,880,,,,880,880,,,,,,,880,',
',880,880,880,45,45,45,,45,,,,45,45,,,,45,,45,45,45,45,45,45,45,,,,,',
'45,45,45,45,45,45,45,,,45,,,,,,,45,,,45,45,45,45,45,45,45,45,,45,45',
'45,,45,45,,45,45,45,,,,,,,,,,,,,,,,,,,,45,,,45,,,45,45,,,45,,,,,,45',
',,,,,,,45,,,,,45,45,45,45,45,45,,,,45,45,,,,,,,45,,,45,45,45,895,895',
'895,,895,,,,895,895,,,,895,,895,895,895,895,895,895,895,,,,,,895,895',
'895,895,895,895,895,,,895,,,,,,,895,,,895,895,895,895,895,895,895,895',
',895,895,895,,895,895,,,,895,,,,,,,,,,,,,,,,,,,,895,,,895,,,895,895',
',,895,,,,,,,,,,,,,,,,,,,895,895,895,895,895,895,,,,895,895,,,,,,,895',
',,895,895,895,46,46,46,,46,,,,46,46,,,,46,,46,46,46,46,46,46,46,,,,',
',46,46,46,46,46,46,46,,,46,,,,,,,46,,,46,46,46,46,46,46,46,46,,46,46',
'46,,46,46,,46,46,46,,,,,,,,,,,,,,,,,,,,46,,,46,,,46,46,,,46,,,,,,46',
',,,,,,,46,,,,,46,46,46,46,46,46,,,,46,46,,,,,,,46,,,46,46,46,315,315',
'315,,315,,,,315,315,,,,315,,315,315,315,315,315,315,315,,,,,,315,315',
'315,315,315,315,315,,,315,,,,,,,315,,,315,315,315,315,315,315,315,315',
',315,315,315,,315,315,,,,315,,,,,,,,,,,,,,,,,,,,315,,,315,,,315,315',
',,315,,,,,,,,,,,,,,,,,,,315,315,315,315,315,315,,,,315,315,,,,,,,315',
',,315,315,315,907,907,907,,907,,,,907,907,,,,907,,907,907,907,907,907',
'907,907,,,,,,907,907,907,907,907,907,907,,,907,,,,,,,907,,,907,907,907',
'907,907,907,907,907,,907,907,907,,907,907,,,,907,,,,,,,,,,,,,,,,,,,',
'907,,,907,,,907,907,,,907,,,,,,,,,,,,,,,,,,,907,907,907,907,907,907',
',,,907,907,,,,,,,907,,,907,907,907,47,47,47,,47,,,,47,47,,,,47,,47,47',
'47,47,47,47,47,,,,,,47,47,47,47,47,47,47,,,47,,,,,,,47,,,47,47,47,47',
'47,47,47,47,,47,47,47,,47,47,,47,47,47,,,,,,,,,,,,,,,,,,,,47,,,47,,',
'47,47,,,47,,,,,,47,,,,,,,,47,,,,,47,47,47,47,47,47,,,,47,47,,,,,,,47',
',,47,47,47,932,932,932,,932,,,,932,932,,,,932,,932,932,932,932,932,932',
'932,,,,,,932,932,932,932,932,932,932,,,932,,,,,,,932,,,932,932,932,932',
'932,932,932,932,,932,932,932,,932,932,,932,932,932,,,,,,,,,,,,,,,,,',
',,932,,,932,,,932,932,,,932,,932,,,,932,,,,,,,,932,,,,,932,932,932,932',
'932,932,,,,932,932,,,,,,,932,,,932,932,932,324,324,324,,324,,,,324,324',
',,,324,,324,324,324,324,324,324,324,,,,,,324,324,324,324,324,324,324',
',,324,,,,,,,324,,,324,324,324,324,324,324,324,324,,324,324,324,,324',
'324,,324,324,324,,,,,,,,,,,,,,,,,,,,324,,,324,324,,324,324,,,324,,,',
',,324,,,,,,,,324,,,,,324,324,324,324,324,324,,,,324,324,,,,,,,324,,',
'324,324,324,327,327,327,,327,,,,327,327,,,,327,,327,327,327,327,327',
'327,327,,,,,,327,327,327,327,327,327,327,,,327,,,,,,,327,,,327,327,327',
'327,327,327,327,327,,327,327,327,,327,327,,327,327,327,,,,,,,,,,,,,',
',,,,,,327,,,327,,,327,327,,,327,,,,,,327,,,,,,,,327,,,,,327,327,327',
'327,327,327,,,,327,327,,,,,,,327,,,327,327,327,333,333,333,,333,,,,333',
'333,,,,333,,333,333,333,333,333,333,333,,,,,,333,333,333,333,333,333',
'333,,,333,,,,,,,333,,,333,333,333,333,333,333,333,333,333,333,333,333',
',333,333,,333,333,333,,,,,,,,,,,,,,,,,,,,333,,,333,,,333,333,,,333,',
',,,,333,,,,,,,,333,,,,,333,333,333,333,333,333,,,,333,333,,,,,,,333',
',333,333,333,333,340,340,340,,340,,,,340,340,,,,340,,340,340,340,340',
'340,340,340,,,,,,340,340,340,340,340,340,340,,,340,,,,,,,340,,,340,340',
'340,340,340,340,340,340,,340,340,340,,340,340,,340,340,340,,,,,,,,,',
',,,,,,,,,,340,,,340,,,340,340,,,340,,,,,,340,,,,,,,,340,,,,,340,340',
'340,340,340,340,,,,340,340,,,,,,,340,,,340,340,340,341,341,341,,341',
',,,341,341,,,,341,,341,341,341,341,341,341,341,,,,,,341,341,341,341',
'341,341,341,,,341,,,,,,,341,,,341,341,341,341,341,341,341,341,,341,341',
'341,,341,341,,341,341,341,,,,,,,,,,,,,,,,,,,,341,,,341,,,341,341,,,341',
',,,,,341,,,,,,,,341,,,,,341,341,341,341,341,341,,,,341,341,,,,,,,341',
',,341,341,341,62,62,62,,62,,,,62,62,,,,62,,62,62,62,62,62,62,62,,,,',
',62,62,62,62,62,62,62,,,62,,,,,,,62,,,62,62,62,62,62,62,62,62,62,62',
'62,62,,62,62,,62,62,62,,,,,,,,,,,,,,,,,,,,62,,,62,,,62,62,,,62,,62,',
',,62,,,,,,,,62,,,,,62,62,62,62,62,62,,,,62,62,,,,,,,62,,62,62,62,62',
'1007,1007,1007,,1007,,,,1007,1007,,,,1007,,1007,1007,1007,1007,1007',
'1007,1007,,,,,,1007,1007,1007,1007,1007,1007,1007,,,1007,,,,,,,1007',
',,1007,1007,1007,1007,1007,1007,1007,1007,1007,1007,1007,1007,,1007',
'1007,,1007,1007,1007,,,,,,,,,,,,,,,,,,,,1007,,,1007,,,1007,1007,,,1007',
',1007,,1007,,1007,,,,,,,,1007,,,,,1007,1007,1007,1007,1007,1007,,,,1007',
'1007,,,,,,,1007,,1007,1007,1007,1007,66,66,66,,66,,,,66,66,,,,66,,66',
'66,66,66,66,66,66,,,,,,66,66,66,66,66,66,66,,,66,,,,,,,66,,,66,66,66',
'66,66,66,66,66,,66,66,66,,66,66,,66,66,66,,,,,,,,,,,,,,,,,,,,66,,,66',
',,66,66,,,66,,,,,,66,,,,,,,,66,,,,,66,66,66,66,66,66,,,,66,66,,,,,,',
'66,,,66,66,66,67,67,67,,67,,,,67,67,,,,67,,67,67,67,67,67,67,67,,,,',
',67,67,67,67,67,67,67,,,67,,,,,,,67,,,67,67,67,67,67,67,67,67,,67,67',
'67,,67,67,,67,67,67,,,,,,,,,,,,,,,,,,,,67,,,67,,,67,67,,,67,,,,,,67',
',,,,,,,67,,,,,67,67,67,67,67,67,,,,67,67,,,,,,,67,,,67,67,67,353,353',
'353,,353,,,,353,353,,,,353,,353,353,353,353,353,353,353,,,,,,353,353',
'353,353,353,353,353,,,353,,,,,,,353,,,353,353,353,353,353,353,353,353',
',353,353,353,,353,353,,,,353,,,,,,,,,,,,,,,,,,,,353,,,353,,,353,353',
',,353,,,,,,,,,,,,,,,,,,,353,353,353,353,353,353,,,,353,353,,,,,,,353',
',,353,353,353,355,355,355,,355,,,,355,355,,,,355,,355,355,355,355,355',
'355,355,,,,,,355,355,355,355,355,355,355,,,355,,,,,,,355,,,355,355,355',
'355,355,355,355,355,,355,355,355,,355,355,,,,355,,,,,,,,,,,,,,,,,,,',
'355,,,355,,,355,355,,,355,,,,,,,,,,,,,,,,,,,355,355,355,355,355,355',
',,,355,355,,,,,,,355,,,355,355,355,70,70,70,,70,,,,70,70,,,,70,,70,70',
'70,70,70,70,70,,,,,,70,70,70,70,70,70,70,,,70,,,,,,,70,,,70,70,70,70',
'70,70,70,70,,70,70,70,,70,70,,70,70,70,,,,,,,,,,,,,,,,,,,,70,,,70,,',
'70,70,,,70,,,,,,70,,,,,,,,70,,,,,70,70,70,70,70,70,,,,70,70,70,,,,,70',
'70,,,70,70,70,71,71,71,,71,,,,71,71,,,,71,,71,71,71,71,71,71,71,,,,',
',71,71,71,71,71,71,71,,,71,,,,,,,71,,,71,71,71,71,71,71,71,71,,71,71',
'71,,71,71,,,,71,,,,,,,,,,,,,,,,,,,,71,,,71,,,71,71,,,71,,71,,,,,,,,',
',,,,,,,,71,71,71,71,71,71,,,,71,71,,,,,,,71,,,71,71,71,8,8,8,8,8,,,',
'8,8,,,,8,,8,8,8,8,8,8,8,,,,,,8,8,8,8,8,8,8,,,8,,,,,,8,8,8,8,8,8,8,8',
'8,8,8,8,,8,8,8,,8,8,,8,8,8,,,,,,,,,,,,,,,,,,,,8,,,8,,,8,8,,,8,,8,,,',
'8,,,,,,,,8,,,,,8,8,8,8,8,8,,,,8,8,,,,,,,8,,,8,8,8,413,413,413,,413,',
',,413,413,,,,413,,413,413,413,413,413,413,413,,,,,,413,413,413,413,413',
'413,413,,,413,,,,,,,413,,,413,413,413,413,413,413,413,413,,413,413,413',
',413,413,,413,413,413,,,,,,,,,,,,,,,,,,,,413,,,413,,,413,413,,,413,',
',,,,413,,,,,,,,413,,,,,413,413,413,413,413,413,,,,413,413,,,,,,,413',
',,413,413,413,450,450,450,,450,,,,450,450,,,,450,,450,450,450,450,450',
'450,450,,,,,,450,450,450,450,450,450,450,,,450,,,,,,,450,,,450,450,450',
'450,450,450,450,450,450,450,450,450,,450,450,,450,450,450,,,,,,,,,,',
',,,,,,,,,450,,,450,,,450,450,,,450,,450,,450,,450,,,,,,,,450,,,,,450',
'450,450,450,450,450,,,,450,450,,,,,,,450,,450,450,450,450,452,452,452',
',452,,,,452,452,,,,452,,452,452,452,452,452,452,452,,,,,,452,452,452',
'452,452,452,452,,,452,,,,,,,452,,,452,452,452,452,452,452,452,452,,452',
'452,452,,452,452,,452,452,452,,,,,,,,,,,,,,,,,,,,452,,,452,,,452,452',
',,452,,,,,,452,,,,,,,,452,,,,,452,452,452,452,452,452,,,,452,452,,,',
',,,452,,,452,452,452,453,453,453,,453,,,,453,453,,,,453,,453,453,453',
'453,453,453,453,,,,,,453,453,453,453,453,453,453,,,453,,,,,,,453,,,453',
'453,453,453,453,453,453,453,,453,453,453,,453,453,,453,453,453,,,,,',
',,,,,,,,,,,,,,453,,,453,,,453,453,,,453,,,,,,453,,,,,,,,453,,,,,453',
'453,453,453,453,453,,,,453,453,,,,,,,453,,,453,453,453,454,454,454,',
'454,,,,454,454,,,,454,,454,454,454,454,454,454,454,,,,,,454,454,454',
'454,454,454,454,,,454,,,,,,,454,,,454,454,454,454,454,454,454,454,,454',
'454,454,,454,454,,454,454,454,,,,,,,,,,,,,,,,,,,,454,,,454,,,454,454',
',,454,,,,,,454,,,,,,,,454,,,,,454,454,454,454,454,454,,,,454,454,,,',
',,,454,,,454,454,454,111,111,111,111,111,,,,111,111,,,,111,,111,111',
'111,111,111,111,111,,,,,,111,111,111,111,111,111,111,,,111,,,,,,111',
'111,111,111,111,111,111,111,111,111,111,111,,111,111,111,,111,111,,111',
'111,111,,,,,,,,,,,,,,,,,,,,111,,,111,,,111,111,,,111,,111,,,,111,,,',
',,,,111,,,,,111,111,111,111,111,111,,,,111,111,,,,,,111,111,,,111,111',
'111,116,116,116,,116,,,,116,116,,,,116,,116,116,116,116,116,116,116',
',,,,,116,116,116,116,116,116,116,,,116,,,,,,,116,,,116,116,116,116,116',
'116,116,116,,116,116,116,,116,116,,116,116,116,,,,,,,,,,,,,,,,,,,,116',
',,116,,,116,116,,,116,,,,,,116,,,,,,,,116,,,,,116,116,116,116,116,116',
',,,116,116,,,,,,,116,,,116,116,116,117,117,117,,117,,,,117,117,,,,117',
',117,117,117,117,117,117,117,,,,,,117,117,117,117,117,117,117,,,117',
',,,,,,117,,,117,117,117,117,117,117,117,117,,117,117,117,,117,117,,117',
'117,117,,,,,,,,,,,,,,,,,,,,117,,,117,,,117,117,,,117,,,,,,117,,,,,,',
',117,,,,,117,117,117,117,117,117,,,,117,117,,,,,,,117,,,117,117,117',
'118,118,118,,118,,,,118,118,,,,118,,118,118,118,118,118,118,118,,,,',
',118,118,118,118,118,118,118,,,118,,,,,,,118,,,118,118,118,118,118,118',
'118,118,,118,118,118,,118,118,,118,118,118,,,,,,,,,,,,,,,,,,,,118,,',
'118,,,118,118,,,118,,,,,,118,,,,,,,,118,,,,,118,118,118,118,118,118',
',,,118,118,,,,,,,118,,,118,118,118,119,119,119,,119,,,,119,119,,,,119',
',119,119,119,119,119,119,119,,,,,,119,119,119,119,119,119,119,,,119',
',,,,,,119,,,119,119,119,119,119,119,119,119,,119,119,119,,119,119,,119',
'119,119,,,,,,,,,,,,,,,,,,,,119,,,119,,,119,119,,,119,,,,,,119,,,,,,',
',119,,,,,119,119,119,119,119,119,,,,119,119,,,,,,,119,,,119,119,119',
'120,120,120,120,120,,,,120,120,,,,120,,120,120,120,120,120,120,120,',
',,,,120,120,120,120,120,120,120,,,120,,,,,,120,120,,120,120,120,120',
'120,120,120,120,120,,120,120,120,,120,120,,120,120,120,,,,,,,,,,,,,',
',,,,,,120,,,120,,,120,120,,,120,,120,,,,120,,,,,,,,120,,,,,120,120,120',
'120,120,120,,,,120,120,,,,,,,120,,,120,120,120,495,495,495,,495,,,,495',
'495,,,,495,,495,495,495,495,495,495,495,,,,,,495,495,495,495,495,495',
'495,,,495,,,,,,,495,,,495,495,495,495,495,495,495,495,495,495,495,495',
',495,495,,495,495,495,,,,,,,,,,,,,,,,,,,,495,,,495,,,495,495,,,495,',
'495,,495,,495,,,,,,,,495,,,,,495,495,495,495,495,495,,,,495,495,,,,',
',,495,,495,495,495,495,498,498,498,,498,,,,498,498,,,,498,,498,498,498',
'498,498,498,498,,,,,,498,498,498,498,498,498,498,,,498,,,,,,,498,,,498',
'498,498,498,498,498,498,498,498,498,498,498,,498,498,,498,498,498,,',
',,,,,,,,,,,,,,,,,498,,,498,,,498,498,,,498,,,,498,,498,,,,,,,,498,,',
',,498,498,498,498,498,498,,,,498,498,,,,,,,498,,498,498,498,498,500',
'500,500,,500,,,,500,500,,,,500,,500,500,500,500,500,500,500,,,,,,500',
'500,500,500,500,500,500,,,500,,,,,,,500,,,500,500,500,500,500,500,500',
'500,,500,500,500,,500,500,,500,500,500,,,,,,,,,,,,,,,,,,,,500,,,500',
',,500,500,,,500,,,,,,500,,,,,,,,500,,,,,500,500,500,500,500,500,,,,500',
'500,,,,,,,500,,,500,500,500,502,502,502,,502,,,,502,502,,,,502,,502',
'502,502,502,502,502,502,,,,,,502,502,502,502,502,502,502,,,502,,,,,',
',502,,,502,502,502,502,502,502,502,502,,502,502,502,,502,502,,502,502',
'502,,,,,,,,,,,,,,,,,,,,502,,,502,,,502,502,,,502,,,,,,502,,,,,,,,502',
',,,,502,502,502,502,502,502,,,,502,502,,,,,,,502,,,502,502,502,505,505',
'505,505,505,,,,505,505,,,,505,,505,505,505,505,505,505,505,,,,,,505',
'505,505,505,505,505,505,,,505,,,,,,505,505,,505,505,505,505,505,505',
'505,505,505,,505,505,505,,505,505,,505,505,505,,,,,,,,,,,,,,,,,,,,505',
',,505,,,505,505,,,505,,505,,,,505,,,,,,,,505,,,,,505,505,505,505,505',
'505,,,,505,505,,,,,,505,505,,,505,505,505,23,23,23,,23,,,,23,23,,,,23',
',23,23,23,23,23,23,23,,,,,,23,23,23,23,23,23,23,,,23,,,,,,,23,,,23,23',
'23,23,23,23,23,23,,23,23,23,,23,23,,23,23,23,,,,,,,,,,,,,,,,,,,,23,',
',23,,,23,23,,,23,,,,,,23,,,,,,,,23,,,,,23,23,23,23,23,23,,,,23,23,,',
',,,,23,,,23,23,23,512,512,512,,512,,,,512,512,,,,512,,512,512,512,512',
'512,512,512,,,,,,512,512,512,512,512,512,512,,,512,,,,,,,512,,,512,512',
'512,512,512,512,512,512,,512,512,512,,512,512,,,,512,,,,,,,,,,,,,,,',
',,,,512,,,512,,,512,512,,,512,,,,,,,,,,,,,,,,,,,512,512,512,512,512',
'512,,,,512,512,,,,,,,512,,,512,512,512,514,514,514,,514,,,,514,514,',
',,514,,514,514,514,514,514,514,514,,,,,,514,514,514,514,514,514,514',
',,514,,,,,,,514,,,514,514,514,514,514,514,514,514,514,514,514,514,,514',
'514,,514,514,514,,,,,,,,,,,,,,,,,,,,514,,,514,,,514,514,,,514,,514,',
'514,,514,,,,,,,,514,,,,,514,514,514,514,514,514,,,,514,514,,,,,,,514',
',514,514,514,514,208,208,208,,208,,,,208,208,,,,208,,208,208,208,208',
'208,208,208,,,,,,208,208,208,208,208,208,208,,,208,,,,,,,208,,,208,208',
'208,208,208,208,208,208,,208,208,208,,208,208,,208,208,208,,,,,,,,,',
',,,,,,,,,,208,,,208,,,208,208,,,208,,208,,,,208,,,,,,,,208,,,,,208,208',
'208,208,208,208,,,,208,208,,,,,,,208,,,208,208,208,521,521,521,,521',
',,,521,521,,,,521,,521,521,521,521,521,521,521,,,,,,521,521,521,521',
'521,521,521,,,521,,,,,,,521,,,521,521,521,521,521,521,521,521,,521,521',
'521,,521,521,,,,521,,,,,,,,,,,,,,,,,,,,521,,,521,,,521,521,,,521,,,',
',,,,,,,,,,,,,,,521,521,521,521,521,521,,,,521,521,,,,,,,521,,,521,521',
'521,209,209,209,,209,,,,209,209,,,,209,,209,209,209,209,209,209,209',
',,,,,209,209,209,209,209,209,209,,,209,,,,,,,209,,,209,209,209,209,209',
'209,209,209,,209,209,209,,209,209,,209,209,209,,,,,,,,,,,,,,,,,,,,209',
',,209,,,209,209,,,209,,,,,,209,,,,,,,,209,,,,,209,209,209,209,209,209',
',,,209,209,,,,,,,209,,,209,209,209,524,524,524,,524,,,,524,524,,,,524',
',524,524,524,524,524,524,524,,,,,,524,524,524,524,524,524,524,,,524',
',,,,,,524,,,524,524,524,524,524,524,524,524,,524,524,524,,524,524,,524',
'524,524,,,,,,,,,,,,,,,,,,,,524,,,524,,,524,524,,,524,,,,,,524,,,,,,',
',524,,,,,524,524,524,524,524,524,,,,524,524,,,,,,,524,,,524,524,524',
'525,525,525,,525,,,,525,525,,,,525,,525,525,525,525,525,525,525,,,,',
',525,525,525,525,525,525,525,,,525,,,,,,,525,,,525,525,525,525,525,525',
'525,525,,525,525,525,,525,525,,525,525,525,,,,,,,,,,,,,,,,,,,,525,,',
'525,,,525,525,,,525,,,,,,525,,,,,,,,525,,,,,525,525,525,525,525,525',
',,,525,525,,,,,,,525,,,525,525,525,526,526,526,,526,,,,526,526,,,,526',
',526,526,526,526,526,526,526,,,,,,526,526,526,526,526,526,526,,,526',
',,,,,,526,,,526,526,526,526,526,526,526,526,,526,526,526,,526,526,,526',
'526,526,,,,,,,,,,,,,,,,,,,,526,,,526,,,526,526,,,526,,,,,,526,,,,,,',
',526,,,,,526,526,526,526,526,526,,,,526,526,,,,,,,526,,,526,526,526',
'530,530,530,,530,,,,530,530,,,,530,,530,530,530,530,530,530,530,,,,',
',530,530,530,530,530,530,530,,,530,,,,,,,530,,,530,530,530,530,530,530',
'530,530,,530,530,530,,530,530,,530,530,530,,,,,,,,,,,,,,,,,,,,530,,',
'530,,,530,530,,,530,,,,,,530,,,,,,,,530,,,,,530,530,530,530,530,530',
',,,530,530,,,,,,,530,,,530,530,530,210,210,210,,210,,,,210,210,,,,210',
',210,210,210,210,210,210,210,,,,,,210,210,210,210,210,210,210,,,210',
',,,,,,210,,,210,210,210,210,210,210,210,210,210,210,210,210,,210,210',
',210,210,210,,,,,,,,,,,,,,,,,,,,210,,,210,,,210,210,,,210,,210,,210',
',210,,,,,,,,210,,,,,210,210,210,210,210,210,,,,210,210,,,,,,,210,,210',
'210,210,210,536,536,536,,536,,,,536,536,,,,536,,536,536,536,536,536',
'536,536,,,,,,536,536,536,536,536,536,536,,,536,,,,,,,536,,,536,536,536',
'536,536,536,536,536,536,536,536,536,,536,536,,536,536,536,,,,,,,,,,',
',,,,,,,,,536,,,536,,,536,536,,,536,,536,,,,536,,,,,,,,536,,,,,536,536',
'536,536,536,536,,,,536,536,,,,,,,536,,536,536,536,536,539,539,539,,539',
',,,539,539,,,,539,,539,539,539,539,539,539,539,,,,,,539,539,539,539',
'539,539,539,,,539,,,,,,,539,,,539,539,539,539,539,539,539,539,539,539',
'539,539,,539,539,,539,539,539,,,,,,,,,,,,,,,,,,,,539,,,539,,,539,539',
',,539,,,,,,539,,,,,,,,539,,,,,539,539,539,539,539,539,,,,539,539,,,',
',,,539,,539,539,539,539,214,214,214,,214,,,,214,214,,,,214,,214,214',
'214,214,214,214,214,,,,,,214,214,214,214,214,214,214,,,214,,,,,,,214',
',,214,214,214,214,214,214,214,214,,214,214,214,,214,214,,214,214,214',
',,,,,,,,,,,,,,,,,,,214,,,214,,,214,214,,,214,,,,,,214,,,,,,,,214,,,',
',214,214,214,214,214,214,,,,214,214,,,,,,,214,,,214,214,214,215,215',
'215,,215,,,,215,215,,,,215,,215,215,215,215,215,215,215,,,,,,215,215',
'215,215,215,215,215,,,215,,,,,,,215,,,215,215,215,215,215,215,215,215',
',215,215,215,,215,215,,215,215,215,,,,,,,,,,,,,,,,,,,,215,,,215,,,215',
'215,,,215,,215,,,,215,,,,,,,,215,,,,,215,215,215,215,215,215,,,,215',
'215,,,,,,,215,,,215,215,215,216,216,216,,216,,,,216,216,,,,216,,216',
'216,216,216,216,216,216,,,,,,216,216,216,216,216,216,216,,,216,,,,,',
',216,,,216,216,216,216,216,216,216,216,,216,216,216,,216,216,,216,216',
'216,,,,,,,,,,,,,,,,,,,,216,,,216,,,216,216,,,216,,,,,,216,,,,,,,,216',
',,,,216,216,216,216,216,216,,,,216,216,,,,,,,216,,,216,216,216,217,217',
'217,,217,,,,217,217,,,,217,,217,217,217,217,217,217,217,,,,,,217,217',
'217,217,217,217,217,,,217,,,,,,,217,,,217,217,217,217,217,217,217,217',
',217,217,217,,217,217,,217,217,217,,,,,,,,,,,,,,,,,,,,217,,,217,,,217',
'217,,,217,,,,,,217,,,,,,,,217,,,,,217,217,217,217,217,217,,,,217,217',
',,,,,,217,,,217,217,217,218,218,218,,218,,,,218,218,,,,218,,218,218',
'218,218,218,218,218,,,,,,218,218,218,218,218,218,218,,,218,,,,,,,218',
',,218,218,218,218,218,218,218,218,,218,218,218,,218,218,,218,218,218',
',,,,,,,,,,,,,,,,,,,218,,,218,,,218,218,,,218,,,,,,218,,,,,,,,218,,,',
',218,218,218,218,218,218,,,,218,218,,,,,,,218,,,218,218,218,219,219',
'219,,219,,,,219,219,,,,219,,219,219,219,219,219,219,219,,,,,,219,219',
'219,219,219,219,219,,,219,,,,,,,219,,,219,219,219,219,219,219,219,219',
',219,219,219,,219,219,,219,219,219,,,,,,,,,,,,,,,,,,,,219,,,219,,,219',
'219,,,219,,,,,,219,,,,,,,,219,,,,,219,219,219,219,219,219,,,,219,219',
'219,,,,,,219,,,219,219,219,564,564,564,,564,,,,564,564,,,,564,,564,564',
'564,564,564,564,564,,,,,,564,564,564,564,564,564,564,,,564,,,,,,,564',
',,564,564,564,564,564,564,564,564,,564,564,564,,564,564,,564,564,564',
',,,,,,,,,,,,,,,,,,,564,,,564,,,564,564,,,564,,,,,,564,,,,,,,,564,,,',
',564,564,564,564,564,564,,,,564,564,,,,,,,564,,,564,564,564,585,585',
'585,,585,,,,585,585,,,,585,,585,585,585,585,585,585,585,,,,,,585,585',
'585,585,585,585,585,,,585,,,,,,,585,,,585,585,585,585,585,585,585,585',
'585,585,585,585,,585,585,,585,585,585,,,,,,,,,,,,,,,,,,,,585,,,585,',
',585,585,,,585,,585,,585,,585,,,,,,,,585,,,,,585,585,585,585,585,585',
',,,585,585,,,,,,,585,,585,585,585,585,597,597,597,,597,,,,597,597,,',
',597,,597,597,597,597,597,597,597,,,,,,597,597,597,597,597,597,597,',
',597,,,,,,,597,,,597,597,597,597,597,597,597,597,,597,597,597,,597,597',
',597,597,597,,,,,,,,,,,,,,,,,,,,597,,,597,,,597,597,,,597,,,,,,597,',
',,,,,,597,,,,,597,597,597,597,597,597,,,,597,597,,,,,,,597,,,597,597',
'597,601,601,601,,601,,,,601,601,,,,601,,601,601,601,601,601,601,601',
',,,,,601,601,601,601,601,601,601,,,601,,,,,,,601,,,601,601,601,601,601',
'601,601,601,,601,601,601,,601,601,,601,601,601,,,,,,,,,,,,,,,,,,,,601',
',,601,,,601,601,,,601,,,,,,601,,,,,,,,601,,,,,601,601,601,601,601,601',
',,,601,601,,,,,,,601,,,601,601,601,230,230,230,,230,,,,230,230,,,,230',
',230,230,230,230,230,230,230,,,,,,230,230,230,230,230,230,230,,,230',
',,,,,,230,,,230,230,230,230,230,230,230,230,,230,230,230,,230,230,,230',
'230,230,,,,,,,,,,,,,,,,,,,,230,,,230,,,230,230,,,230,,,,,,230,,,,,,',
',230,,,,,230,230,230,230,230,230,,,,230,230,,,,,,,230,,,230,230,230',
'233,233,233,,233,,,,233,233,,,,233,,233,233,233,233,233,233,233,,,,',
',233,233,233,233,233,233,233,,,233,,,,,,,233,,,233,233,233,233,233,233',
'233,233,,233,233,233,,233,233,,233,233,233,,,,,,,,,,,,,,,,,,,,233,,',
'233,,,233,233,,,233,,,,,,233,,,,,,,,233,,,,,233,233,233,233,233,233',
',,,233,233,,,,,,,233,,,233,233,233,630,630,630,,630,,,,630,630,,,,630',
',630,630,630,630,630,630,630,,,,,,630,630,630,630,630,630,630,,,630',
',,,,,,630,,,630,630,630,630,630,630,630,630,,630,630,630,,630,630,,630',
'630,630,,,,,,,,,,,,,,,,,,,,630,,,630,,,630,630,,,630,,630,,,,630,,,',
',,,,630,,,,,630,630,630,630,630,630,,,,630,630,,,,,,,630,,,630,630,630',
'631,631,631,,631,,,,631,631,,,,631,,631,631,631,631,631,631,631,,,,',
',631,631,631,631,631,631,631,,,631,,,,,,,631,,,631,631,631,631,631,631',
'631,631,,631,631,631,,631,631,,631,631,631,,,,,,,,,,,,,,,,,,,,631,,',
'631,,,631,631,,,631,,,,,,631,,,,,,,,631,,,,,631,631,631,631,631,631',
',,,631,631,,,,,,,631,,,631,631,631,234,234,234,,234,,,,234,234,,,,234',
',234,234,234,234,234,234,234,,,,,,234,234,234,234,234,234,234,,,234',
',,,,,,234,,,234,234,234,234,234,234,234,234,,234,234,234,,234,234,,234',
'234,234,,,,,,,,,,,,,,,,,,,,234,,,234,,,234,234,,,234,,,,,,234,,,,,,',
',234,,,,,234,234,234,234,234,234,,,,234,234,,,,,,,234,,,234,234,234',
'634,634,634,,634,,,,634,634,,,,634,,634,634,634,634,634,634,634,,,,',
',634,634,634,634,634,634,634,,,634,,,,,,,634,,,634,634,634,634,634,634',
'634,634,634,634,634,634,,634,634,,634,634,634,,,,,,,,,,,,,,,,,,,,634',
',,634,,,634,634,,,634,,634,,634,,634,,,,,,,,634,,,,,634,634,634,634',
'634,634,,,,634,634,,,,,,,634,,634,634,634,634,635,635,635,,635,,,,635',
'635,,,,635,,635,635,635,635,635,635,635,,,,,,635,635,635,635,635,635',
'635,,,635,,,,,,,635,,,635,635,635,635,635,635,635,635,635,635,635,635',
',635,635,,635,635,635,,,,,,,,,,,,,,,,,,,,635,,,635,,,635,635,,,635,',
',,635,,635,,,,,,,,635,,,,,635,635,635,635,635,635,,,,635,635,,,,,,,635',
',635,635,635,635,636,636,636,,636,,,,636,636,,,,636,,636,636,636,636',
'636,636,636,,,,,,636,636,636,636,636,636,636,,,636,,,,,,,636,,,636,636',
'636,636,636,636,636,636,,636,636,636,,636,636,,636,636,636,,,,,,,,,',
',,,,,,,,,,636,,,636,,,636,636,,,636,,,,,,636,,,,,,,,636,,,,,636,636',
'636,636,636,636,,,,636,636,,,,,,,636,,,636,636,636,637,637,637,,637',
',,,637,637,,,,637,,637,637,637,637,637,637,637,,,,,,637,637,637,637',
'637,637,637,,,637,,,,,,,637,,,637,637,637,637,637,637,637,637,,637,637',
'637,,637,637,,637,637,637,,,,,,,,,,,,,,,,,,,,637,,,637,,,637,637,,,637',
',,,,,637,,,,,,,,637,,,,,637,637,637,637,637,637,,,,637,637,,,,,,,637',
',,637,637,637,235,235,235,,235,,,,235,235,,,,235,,235,235,235,235,235',
'235,235,,,,,,235,235,235,235,235,235,235,,,235,,,,,,,235,,,235,235,235',
'235,235,235,235,235,,235,235,235,,235,235,,235,235,235,,,,,,,,,,,,,',
',,,,,,235,,,235,,,235,235,,,235,,,,,,235,,,,,,,,235,,,,,235,235,235',
'235,235,235,,,,235,235,,,,,,,235,,,235,235,235,642,642,642,,642,,,,642',
'642,,,,642,,642,642,642,642,642,642,642,,,,,,642,642,642,642,642,642',
'642,,,642,,,,,,,642,,,642,642,642,642,642,642,642,642,,642,642,642,',
'642,642,,642,642,642,,,,,,,,,,,,,,,,,,,,642,,,642,,,642,642,,,642,,',
',,,642,,,,,,,,642,,,,,642,642,642,642,642,642,,,,642,642,,,,,,,642,',
',642,642,642,643,643,643,,643,,,,643,643,,,,643,,643,643,643,643,643',
'643,643,,,,,,643,643,643,643,643,643,643,,,643,,,,,,,643,,,643,643,643',
'643,643,643,643,643,,643,643,643,,643,643,,643,643,643,,,,,,,,,,,,,',
',,,,,,643,,,643,,,643,643,,,643,,,,,,643,,,,,,,,643,,,,,643,643,643',
'643,643,643,,,,643,643,,,,,,,643,,,643,643,643,236,236,236,,236,,,,236',
'236,,,,236,,236,236,236,236,236,236,236,,,,,,236,236,236,236,236,236',
'236,,,236,,,,,,,236,,,236,236,236,236,236,236,236,236,,236,236,236,',
'236,236,,236,236,236,,,,,,,,,,,,,,,,,,,,236,,,236,,,236,236,,,236,,',
',,,236,,,,,,,,236,,,,,236,236,236,236,236,236,,,,236,236,,,,,,,236,',
',236,236,236,646,646,646,,646,,,,646,646,,,,646,,646,646,646,646,646',
'646,646,,,,,,646,646,646,646,646,646,646,,,646,,,,,,,646,,,646,646,646',
'646,646,646,646,646,,646,646,646,,646,646,,646,646,646,,,,,,,,,,,,,',
',,,,,,646,,,646,,,646,646,,,646,,,,,,646,,,,,,,,646,,,,,646,646,646',
'646,646,646,,,,646,646,,,,,,,646,,,646,646,646,647,647,647,,647,,,,647',
'647,,,,647,,647,647,647,647,647,647,647,,,,,,647,647,647,647,647,647',
'647,,,647,,,,,,,647,,,647,647,647,647,647,647,647,647,,647,647,647,',
'647,647,,647,647,647,,,,,,,,,,,,,,,,,,,,647,,,647,,,647,647,,,647,,',
',,,647,,,,,,,,647,,,,,647,647,647,647,647,647,,,,647,647,,,,,,,647,',
',647,647,647,237,237,237,,237,,,,237,237,,,,237,,237,237,237,237,237',
'237,237,,,,,,237,237,237,237,237,237,237,,,237,,,,,,,237,,,237,237,237',
'237,237,237,237,237,,237,237,237,,237,237,,237,237,237,,,,,,,,,,,,,',
',,,,,,237,,,237,,,237,237,,,237,,,,,,237,,,,,,,,237,,,,,237,237,237',
'237,237,237,,,,237,237,,,,,,,237,,,237,237,237,238,238,238,,238,,,,238',
'238,,,,238,,238,238,238,238,238,238,238,,,,,,238,238,238,238,238,238',
'238,,,238,,,,,,,238,,,238,238,238,238,238,238,238,238,,238,238,238,',
'238,238,,238,238,238,,,,,,,,,,,,,,,,,,,,238,,,238,,,238,238,,,238,,',
',,,238,,,,,,,,238,,,,,238,238,238,238,238,238,,,,238,238,,,,,,,238,',
',238,238,238,239,239,239,,239,,,,239,239,,,,239,,239,239,239,239,239',
'239,239,,,,,,239,239,239,239,239,239,239,,,239,,,,,,,239,,,239,239,239',
'239,239,239,239,239,,239,239,239,,239,239,,239,239,239,,,,,,,,,,,,,',
',,,,,,239,,,239,,,239,239,,,239,,,,,,239,,,,,,,,239,,,,,239,239,239',
'239,239,239,,,,239,239,,,,,,,239,,,239,239,239,240,240,240,,240,,,,240',
'240,,,,240,,240,240,240,240,240,240,240,,,,,,240,240,240,240,240,240',
'240,,,240,,,,,,,240,,,240,240,240,240,240,240,240,240,,240,240,240,',
'240,240,,240,240,240,,,,,,,,,,,,,,,,,,,,240,,,240,,,240,240,,,240,,',
',,,240,,,,,,,,240,,,,,240,240,240,240,240,240,,,,240,240,,,,,,,240,',
',240,240,240,241,241,241,,241,,,,241,241,,,,241,,241,241,241,241,241',
'241,241,,,,,,241,241,241,241,241,241,241,,,241,,,,,,,241,,,241,241,241',
'241,241,241,241,241,,241,241,241,,241,241,,241,241,241,,,,,,,,,,,,,',
',,,,,,241,,,241,,,241,241,,,241,,,,,,241,,,,,,,,241,,,,,241,241,241',
'241,241,241,,,,241,241,,,,,,,241,,,241,241,241,671,671,671,,671,,,,671',
'671,,,,671,,671,671,671,671,671,671,671,,,,,,671,671,671,671,671,671',
'671,,,671,,,,,,,671,,,671,671,671,671,671,671,671,671,,671,671,671,',
'671,671,,671,671,671,,,,,,,,,,,,,,,,,,,,671,,,671,,,671,671,,,671,,',
',,,671,,,,,,,,671,,,,,671,671,671,671,671,671,,,,671,671,,,,,,,671,',
',671,671,671,677,677,677,,677,,,,677,677,,,,677,,677,677,677,677,677',
'677,677,,,,,,677,677,677,677,677,677,677,,,677,,,,,,,677,,,677,677,677',
'677,677,677,677,677,,677,677,677,,677,677,,,,677,,,,,,,,,,,,,,,,,,,',
'677,,,677,,,677,677,,,677,,,,,,,,,,,,,,,,,,,677,677,677,677,677,677',
',,,677,677,,,,,,,677,,,677,677,677,242,242,242,,242,,,,242,242,,,,242',
',242,242,242,242,242,242,242,,,,,,242,242,242,242,242,242,242,,,242',
',,,,,,242,,,242,242,242,242,242,242,242,242,,242,242,242,,242,242,,242',
'242,242,,,,,,,,,,,,,,,,,,,,242,,,242,,,242,242,,,242,,,,,,242,,,,,,',
',242,,,,,242,242,242,242,242,242,,,,242,242,,,,,,,242,,,242,242,242',
'243,243,243,,243,,,,243,243,,,,243,,243,243,243,243,243,243,243,,,,',
',243,243,243,243,243,243,243,,,243,,,,,,,243,,,243,243,243,243,243,243',
'243,243,,243,243,243,,243,243,,243,243,243,,,,,,,,,,,,,,,,,,,,243,,',
'243,,,243,243,,,243,,,,,,243,,,,,,,,243,,,,,243,243,243,243,243,243',
',,,243,243,,,,,,,243,,,243,243,243,244,244,244,,244,,,,244,244,,,,244',
',244,244,244,244,244,244,244,,,,,,244,244,244,244,244,244,244,,,244',
',,,,,,244,,,244,244,244,244,244,244,244,244,,244,244,244,,244,244,,244',
'244,244,,,,,,,,,,,,,,,,,,,,244,,,244,,,244,244,,,244,,,,,,244,,,,,,',
',244,,,,,244,244,244,244,244,244,,,,244,244,,,,,,,244,,,244,244,244',
'245,245,245,,245,,,,245,245,,,,245,,245,245,245,245,245,245,245,,,,',
',245,245,245,245,245,245,245,,,245,,,,,,,245,,,245,245,245,245,245,245',
'245,245,,245,245,245,,245,245,,245,245,245,,,,,,,,,,,,,,,,,,,,245,,',
'245,,,245,245,,,245,,,,,,245,,,,,,,,245,,,,,245,245,245,245,245,245',
',,,245,245,,,,,,,245,,,245,245,245,246,246,246,,246,,,,246,246,,,,246',
',246,246,246,246,246,246,246,,,,,,246,246,246,246,246,246,246,,,246',
',,,,,,246,,,246,246,246,246,246,246,246,246,,246,246,246,,246,246,,246',
'246,246,,,,,,,,,,,,,,,,,,,,246,,,246,,,246,246,,,246,,,,,,246,,,,,,',
',246,,,,,246,246,246,246,246,246,,,,246,246,,,,,,,246,,,246,246,246',
'688,688,688,,688,,,,688,688,,,,688,,688,688,688,688,688,688,688,,,,',
',688,688,688,688,688,688,688,,,688,,,,,,,688,,,688,688,688,688,688,688',
'688,688,,688,688,688,,688,688,,,,688,,,,,,,,,,,,,,,,,,,,688,,,688,,',
'688,688,,,688,,,,,,,,,,,,,,,,,,,688,688,688,688,688,688,,,,688,688,',
',,,,,688,,,688,688,688,247,247,247,,247,,,,247,247,,,,247,,247,247,247',
'247,247,247,247,,,,,,247,247,247,247,247,247,247,,,247,,,,,,,247,,,247',
'247,247,247,247,247,247,247,,247,247,247,,247,247,,247,247,247,,,,,',
',,,,,,,,,,,,,,247,,,247,,,247,247,,,247,,,,,,247,,,,,,,,247,,,,,247',
'247,247,247,247,247,,,,247,247,,,,,,,247,,,247,247,247,248,248,248,',
'248,,,,248,248,,,,248,,248,248,248,248,248,248,248,,,,,,248,248,248',
'248,248,248,248,,,248,,,,,,,248,,,248,248,248,248,248,248,248,248,,248',
'248,248,,248,248,,248,248,248,,,,,,,,,,,,,,,,,,,,248,,,248,,,248,248',
',,248,,,,,,248,,,,,,,,248,,,,,248,248,248,248,248,248,,,,248,248,,,',
',,,248,,,248,248,248,249,249,249,,249,,,,249,249,,,,249,,249,249,249',
'249,249,249,249,,,,,,249,249,249,249,249,249,249,,,249,,,,,,,249,,,249',
'249,249,249,249,249,249,249,,249,249,249,,249,249,,249,249,249,,,,,',
',,,,,,,,,,,,,,249,,,249,,,249,249,,,249,,,,,,249,,,,,,,,249,,,,,249',
'249,249,249,249,249,,,,249,249,,,,,,,249,,,249,249,249,694,694,694,',
'694,,,,694,694,,,,694,,694,694,694,694,694,694,694,,,,,,694,694,694',
'694,694,694,694,,,694,,,,,,,694,,,694,694,694,694,694,694,694,694,,694',
'694,694,,694,694,,694,694,694,,,,,,,,,,,,,,,,,,,,694,,,694,,,694,694',
',,694,,694,,,,694,,,,,,,,694,,,,,694,694,694,694,694,694,,,,694,694',
',,,,,,694,,,694,694,694,250,250,250,,250,,,,250,250,,,,250,,250,250',
'250,250,250,250,250,,,,,,250,250,250,250,250,250,250,,,250,,,,,,,250',
',,250,250,250,250,250,250,250,250,,250,250,250,,250,250,,250,250,250',
',,,,,,,,,,,,,,,,,,,250,,,250,,,250,250,,,250,,,,,,250,,,,,,,,250,,,',
',250,250,250,250,250,250,,,,250,250,,,,,,,250,,,250,250,250,251,251',
'251,,251,,,,251,251,,,,251,,251,251,251,251,251,251,251,,,,,,251,251',
'251,251,251,251,251,,,251,,,,,,,251,,,251,251,251,251,251,251,251,251',
',251,251,251,,251,251,,251,251,251,,,,,,,,,,,,,,,,,,,,251,,,251,,,251',
'251,,,251,,,,,,251,,,,,,,,251,,,,,251,251,251,251,251,251,,,,251,251',
',,,,,,251,,,251,251,251,714,714,714,,714,,,,714,714,,,,714,,714,714',
'714,714,714,714,714,,,,,,714,714,714,714,714,714,714,,,714,,,,,,,714',
',,714,714,714,714,714,714,714,714,,714,714,714,,714,714,,714,714,714',
',,,,,,,,,,,,,,,,,,,714,,,714,,,714,714,,,714,,,,,,714,,,,,,,,714,,,',
',714,714,714,714,714,714,,,,714,714,,,,,,,714,,,714,714,714,252,252',
'252,,252,,,,252,252,,,,252,,252,252,252,252,252,252,252,,,,,,252,252',
'252,252,252,252,252,,,252,,,,,,,252,,,252,252,252,252,252,252,252,252',
',252,252,252,,252,252,,252,252,252,,,,,,,,,,,,,,,,,,,,252,,,252,,,252',
'252,,,252,,,,,,252,,,,,,,,252,,,,,252,252,252,252,252,252,,,,252,252',
',,,,,,252,,,252,252,252,253,253,253,,253,,,,253,253,,,,253,,253,253',
'253,253,253,253,253,,,,,,253,253,253,253,253,253,253,,,253,,,,,,,253',
',,253,253,253,253,253,253,253,253,,253,253,253,,253,253,,253,253,253',
',,,,,,,,,,,,,,,,,,,253,,,253,,,253,253,,,253,,,,,,253,,,,,,,,253,,,',
',253,253,253,253,253,253,,,,253,253,,,,,,,253,,,253,253,253,254,254',
'254,,254,,,,254,254,,,,254,,254,254,254,254,254,254,254,,,,,,254,254',
'254,254,254,254,254,,,254,,,,,,,254,,,254,254,254,254,254,254,254,254',
',254,254,254,,254,254,,254,254,254,,,,,,,,,,,,,,,,,,,,254,,,254,,,254',
'254,,,254,,,,,,254,,,,,,,,254,,,,,254,254,254,254,254,254,,,,254,254',
',,,,,,254,,,254,254,254,255,255,255,,255,,,,255,255,,,,255,,255,255',
'255,255,255,255,255,,,,,,255,255,255,255,255,255,255,,,255,,,,,,,255',
',,255,255,255,255,255,255,255,255,,255,255,255,,255,255,,255,255,255',
',,,,,,,,,,,,,,,,,,,255,,,255,,,255,255,,,255,,,,,,255,,,,,,,,255,,,',
',255,255,255,255,255,255,,,,255,255,,,,,,,255,,,255,255,255,735,735',
'735,,735,,,,735,735,,,,735,,735,735,735,735,735,735,735,,,,,,735,735',
'735,735,735,735,735,,,735,,,,,,,735,,,735,735,735,735,735,735,735,735',
',735,735,735,,735,735,,735,735,735,,,,,,,,,,,,,,,,,,,,735,,,735,,,735',
'735,,,735,,735,,,,735,,,,,,,,735,,,,59,735,735,735,735,735,735,59,59',
'59,735,735,59,59,59,,59,,735,,,735,735,735,,,59,59,59,,,,,,,,59,59,',
'59,59,59,59,59,,,,,,,,,,,,,,,,,,,,,,,,59,59,59,59,59,59,59,59,59,59',
'59,59,59,59,,,59,59,59,,,59,,,59,,,59,59,,59,,59,,59,,59,59,59,59,59',
'59,59,,59,,59,,,,,,,,,,,,,59,59,59,59,434,59,,59,,,,434,434,434,,,434',
'434,434,942,434,942,942,942,942,942,,,,434,434,434,434,,,942,,,,,434',
'434,,434,434,434,434,434,,,,,,,,,,942,942,,,,,,,,942,942,942,942,,434',
'434,434,434,434,434,434,434,434,434,434,434,434,434,,,434,434,434,,',
'434,,,434,,,434,434,,434,942,434,,434,,434,434,434,434,434,434,434,',
'434,434,434,,,,,,,,,,,,,434,434,434,434,433,434,,434,,,,433,433,433',
',,433,433,433,992,433,992,992,992,992,992,,,,433,433,433,433,,,992,',
',,,433,433,,433,433,433,433,433,,,,,,,,,,992,,,,,,,,,992,992,992,992',
',433,433,433,433,433,433,433,433,433,433,433,433,433,433,,,433,433,433',
',,433,,,433,,,433,433,,433,992,433,,433,,433,433,433,433,433,433,433',
',433,433,433,,,,,,,,,,,,,433,433,433,433,31,433,,433,,,,31,31,31,,,31',
'31,31,708,31,708,708,708,708,708,,,,,31,31,,,,708,,,,,31,31,,31,31,31',
'31,31,,,,,,,,,,708,,,,,,,,,708,708,708,708,,31,31,31,31,31,31,31,31',
'31,31,31,31,31,31,,,31,31,31,,,31,,31,31,,,31,31,,31,708,31,,31,,31',
'31,31,31,31,31,31,,31,,31,,,,,,,,,,,,424,31,31,,31,,31,424,424,424,',
',424,424,424,888,424,888,888,888,888,888,,,,424,424,424,,,,888,,,,,424',
'424,,424,424,424,424,424,,,,,,,,,,888,,,,,,,,,888,888,888,888,,424,424',
'424,424,424,424,424,424,424,424,424,424,424,424,,,424,424,424,,,424',
',424,424,,,424,424,,424,888,424,,424,,424,424,424,424,424,424,424,,424',
'424,424,,,,,,,,,,,,30,424,424,,424,,424,30,30,30,,,30,30,30,885,30,885',
'885,885,885,885,,,,30,30,30,,,,885,,,,,30,30,,30,30,30,30,30,,,,,,,',
',,885,,,,,,,,,885,885,885,885,,30,30,30,30,30,30,30,30,30,30,30,30,30',
'30,,,30,30,30,,,30,,30,30,,,30,30,,30,885,30,,30,,30,30,30,30,30,30',
'30,,30,30,30,,,,,,,,,,,,482,30,30,,30,,30,482,482,482,,,482,482,482',
'755,482,755,755,755,755,755,,,,482,482,,,,,755,,,,,482,482,,482,482',
'482,482,482,,,,,,,,,,755,,,,,,,,,755,755,755,755,,,,,,,,,,,,,482,,,',
',,,482,,,,,482,482,,,,,,,755,,,,1009,1009,,,1009,,,,,,482,482,,1009',
'1009,,1009,1009,1009,1009,1009,1009,1009,,482,1009,1009,,,482,1009,1009',
'1009,1009,,,,,,1009,,,,,,,,1009,1009,,1009,1009,1009,1009,1009,1009',
'1009,1009,1009,1009,1009,,,1009,,,,,,,,,,516,516,,,516,,,,,,1009,,,516',
'516,1009,516,516,516,516,516,516,516,,,516,516,,,,516,516,516,516,,',
',,,516,,,,,,,,516,516,,516,516,516,516,516,516,516,516,516,516,516,',
',516,,,,,,,,,,586,586,,,586,,,,,,516,,,586,586,516,586,586,586,586,586',
'586,586,,,586,586,,,,586,586,586,586,,,,,,586,,,,,,,,586,586,,586,586',
'586,586,586,586,586,586,586,586,586,,,586,,,,,,,,,,959,959,,,959,,,',
',,586,,,959,959,586,959,959,959,959,959,959,959,,,959,959,,,,959,959',
'959,959,,,,,,959,,,,,,,,959,959,,959,959,959,959,959,959,959,959,959',
'959,959,,,959,,,,,,,,,,746,746,,,746,,,,,,959,,,746,746,959,746,746',
'746,746,746,746,746,,,746,746,,,,746,746,746,746,,,,,,746,,,,,,,,746',
'746,,746,746,746,746,746,746,746,746,746,746,746,,,746,,,,,,,,,,1008',
'1008,,,1008,,,,,,746,,,1008,1008,746,1008,1008,1008,1008,1008,1008,1008',
',,1008,1008,,,,1008,1008,1008,1008,,,,,,1008,,,,,,,,1008,1008,,1008',
'1008,1008,1008,1008,1008,1008,1008,1008,1008,1008,,,1008,,,,,,,,,,448',
'448,,,448,,,,,,1008,,,448,448,1008,448,448,448,448,448,448,448,,,448',
'448,,,,448,448,448,448,,,,,,448,,,,,,,,448,448,,448,448,448,448,448',
'448,448,448,448,448,448,,,448,,,,,,,,,,449,449,,,449,,,,,,448,,,449',
'449,448,449,449,449,449,449,449,449,,,449,449,,,,449,449,449,449,,,',
',,449,,,,,,,,449,449,,449,449,449,449,449,449,449,449,449,449,449,,',
'449,,,,,,,,,,527,527,,,527,,,,,,449,,,527,527,449,527,527,527,527,527',
'527,527,,,527,527,,,,527,527,527,527,,,,,,527,,,,,,,,527,527,,527,527',
'527,527,527,527,527,527,527,527,527,,,527,,,,,,,,,,745,745,,,745,,,',
',,527,,,745,745,527,745,745,745,745,745,745,745,,,745,745,,,,745,745',
'745,745,,,,,,745,,,,,,,,745,745,,745,745,745,745,745,745,745,745,745',
'745,745,,,745,,,,,,,,,,515,515,,,515,,,,,,745,,,515,515,745,515,515',
'515,515,515,515,515,,,515,515,,,,515,515,515,515,,,,,,515,,,,,,,,515',
'515,,515,515,515,515,515,515,515,515,515,515,515,,,515,,,,,,,,,,212',
'212,,,212,,,,,,515,,,212,212,515,212,212,212,212,212,212,212,,,212,212',
',,,212,212,212,212,,,,,,212,,,,,,,,212,212,,212,212,212,212,212,212',
'212,212,212,212,212,,,212,,,,,,,,,,211,211,,,211,,,,,,212,,,211,211',
'212,211,211,211,211,211,211,211,,,211,211,,,,211,211,211,211,,,,,,211',
',,,,,,,211,211,,211,211,211,211,211,211,211,211,211,211,211,,,211,,',
',,,,,,,528,528,,,528,,,,,,211,,,528,528,211,528,528,528,528,528,528',
'528,,,528,528,,,,528,528,528,528,,,,,,528,,,,,,,,528,528,,528,528,528',
'528,528,528,528,528,528,528,528,,,528,,,,,,,,,,587,587,,,587,,,,,,528',
',,587,587,528,587,587,587,587,587,587,587,,,587,587,,,,587,587,587,587',
',,,,,587,,,,,,,,587,587,,587,587,587,587,587,587,587,587,587,587,587',
',710,587,710,710,710,710,710,,,,,261,261,,,261,710,,,,,587,,,261,261',
'587,261,261,261,261,261,261,261,,,261,261,710,,,261,261,261,261,,,710',
'710,710,710,,,,,,,,261,261,,261,261,261,261,261,261,261,261,261,261',
'261,,913,261,913,913,913,913,913,,,,710,,,,,,913,,,,,261,,,,599,261',
'599,599,599,599,599,,,,,,,913,,336,599,336,336,336,336,336,913,913,913',
'913,,,,,546,336,546,546,546,546,546,,599,599,,,,,,,546,599,599,599,599',
',,336,336,,,,913,,,,336,336,336,336,,,546,,,,,,,,,546,546,546,546,,',
'599,,,,,,,,,,,,,,,336,,,,,,,,,,,,,,,546' ]
        racc_action_check = arr = ::Array.new(25662, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,  1394,  2691,    45,   nil,    80,   nil,   nil, 12641,   917,
   nil,  1607,  1193,   -48,   nil,   -10,    73,  1174,   420,    39,
   693,   nil,    88, 14953,  3513,   198,   nil,   270,   nil,     2,
 24139, 23889,  7881,  8017,  8425,   nil,  5568,  8969,  9105,   nil,
   106,   430,   432,   191,   504,  9921, 10193, 10601,   135,   459,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil, 23499,
   nil,   -73, 11553,   nil,    34,   nil, 11825, 11961,   nil,   nil,
 12369, 12505,   206,   nil,  1469,   nil,   nil,   nil,   nil,   nil,
    64,   nil,   nil,   nil,   nil,   nil,   nil,   163,   175,   221,
   227,  1331,   nil,   nil,   nil,   255,   nil,   nil,   385,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil, 13457,   nil,   nil,   nil,   nil, 13593, 13729, 13865, 14001,
 14137,   265,   nil,   262,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   276,   nil,  3787, 15361, 15633,
 16313, 25191, 25118,   nil, 16721, 16857, 16993, 17129, 17265, 17401,
   nil,   nil,  1228,   134,   170,   362,   173,   289,   344,   nil,
 18081,  4061,   347, 18217, 18625, 19305, 19713, 20121, 20257, 20393,
 20529, 20665, 21073, 21209, 21345, 21481, 21617, 21889, 22025, 22161,
 22433, 22569, 22841, 22977, 23113, 23249,  5841,  6249,  6657,   nil,
   nil, 25410,   nil,   nil,   346,  7473,   nil,   361,   nil,   nil,
   nil,  7609,   nil,   nil,  7745,   nil,  3650,   nil,   348,   352,
   nil,  8289,   432,  8561,   nil,   400,  8697,   nil,   nil,   265,
   nil,   779,  8833,   405,  2280,   449,   505,   472,  9241,  3102,
  1055,  1056,   648,   556,   611,   nil,   535,   506,   -19,   nil,
   nil,   nil,   553,   630,   529, 10329,   nil,   260,   597,   608,
   -59,   nil,   618,   nil, 10873,  4198,   nil, 11009,   602,   nil,
   261,   161,   602, 11145,   nil,   nil, 25512,   666,    19,    -9,
 11281, 11417,   450,   690,   590,    27,    26,   956,   677,    30,
   712,   nil,   nil, 12097,   nil, 12233,   532,   425,   338,   419,
   484,   519,   223,   424,   463,   nil,   465,   nil,   nil,   nil,
   nil,   nil,   281,   nil,   285,   nil,   155,   nil,   617,   313,
   nil,   627,   378,   nil,   634,   117,   nil,   638,   125,   nil,
   -26,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,  3650,   779,   nil,   nil,   nil,   nil,   652,
   nil,   676,   nil, 12777,   677,   nil,  1869,   681,   nil,   nil,
   703,   704,   130,   434, 24014,   nil,   nil,   nil,   515,     0,
   745,   nil,   nil, 23759, 23629,   nil,  2828,   nil,   701,   nil,
   nil,  1732,   nil,   nil,   nil,   nil,   -26,   nil, 24753, 24826,
 12913,   -75, 13049, 13185, 13321,  4335,  5568,   504,   343,   778,
   790,   791,   792,   671,   908,   770,  5431,  5294,  5157,  5020,
  4472,  4198,  6113,  4061,  5705,  4609,   -43,   595,  4746,  4883,
  2143,   198, 24264,   nil,   nil,   nil,   nil,   nil,   nil,   191,
   -43,   739,   745,   nil,   nil, 14273,   nil,   nil, 14409,   nil,
 14545,   nil, 14681,   nil,   nil, 14817,   631,   746,   750,   nil,
   nil,   763, 15089,   771, 15225, 25045, 24388,  1195,   815,   nil,
   nil, 15497,   785,   nil, 15769, 15905, 16041, 24899, 25264,  3787,
 16177,   908,   907,   727,   nil,   nil, 16449,   nil,   nil, 16585,
   nil,   804,   nil,   501,   855,    74, 25527,   nil,   816,   841,
   nil,   842,   844,   845,   nil,   nil,   nil,   nil,   nil,   nil,
   843,   nil,   580,   nil, 17537,   nil,   nil,   nil,   944,   nil,
   nil,   nil,   945,   nil,   nil,   946,  4746,   991,   nil,  4472,
    55,    32,   994,  1008,   nil, 17673, 24461, 25337,    28,   nil,
   224,   354,    -7,   nil,   551,   nil,    16, 17809,   nil, 25497,
   nil, 17945,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   182,   nil,   nil,   -32,   nil,   nil,   nil,
   899,   nil,   nil,   900,   nil,   920,   nil,  1055,   nil,   906,
 18353, 18489,   398,   941, 18761, 18897, 19033, 19169,   940,   nil,
   nil,   nil, 19441, 19577,   941,   nil, 19849, 19985,   nil,   229,
   230,   640,   125,   916,  2006,   924,   nil,   nil,   479,   nil,
   nil,  1026,    63,   -71,   nil,   nil,   nil,   nil,   925,   nil,
   967, 20801,   nil,   nil,   nil,   937,  -107, 20937,   953,   nil,
   957,   146,   159,  1004,   355,   813,  1005,   967, 21753,  3376,
  1030,  1031,    10,  1094, 22297,   nil,   990,   438,   nil,   nil,
   nil,  4335,  2143,   991,   439,   nil,   nil,   538, 23853,   nil,
 25399,   nil,  6565,   nil, 22705,   nil,   813,   nil,   989,   190,
   nil,  1003,   nil,   nil,   nil,   nil,   637,   nil,  1129,   nil,
   nil,   nil,   nil,  1135,   nil, 23385,  1019,    -1,    25,    94,
   149,  5977,   nil,  1194,   nil, 24972, 24607,  6113,   nil,   nil,
   nil,   416,   153,  2417,  2828, 24228,   180,   917,   -16,   842,
  5157,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1017,  6385,
  3239,  6521,   nil,  1019,   nil,  3102,   nil,  2417,   nil,   nil,
  2280,   nil,  2691,   nil,  2554,  6793,  6929,  7065,  7201,   140,
  7337,  1023,  1026,   nil,  1044,  1047,  1048,   nil,  1072,  1056,
  1054,  1046,  8153,   nil,   nil,  3513,   nil,   nil,   nil,  2006,
  1732,   nil,   nil,  1061,   259,   nil,   nil,  1183,   nil,  5294,
  1063,  1105,   nil,   nil,   nil,   nil,  1106,  1211,  1095,  1103,
   nil,   nil,   nil,  1104,  1105,   nil,  1106,  1107,   nil,  1117,
   nil,  1121,   606,  1120,   951,   nil,  1241,   nil,  9377,  1242,
  3376,  3239,   nil,    43,    62,    56,   393,   954,   nil,  1127,
  2965,  9513,   nil,   289,  1245,  1246,  1130,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,  1154,  1152,   nil,  3924,  9649,
  9785,  2965,   374,   nil,   nil, 24103,   nil,   nil, 23978,   nil,
  6701,   nil,   nil,  1173,   785, 10057,  1227,  1229,  1276,  1869,
  1173,  1281,   nil,  5705,   nil,   nil,    -7, 10465,   nil,   nil,
   nil,   nil,   nil, 25472,   nil,  7109,   nil,  5885,   nil,  6293,
   nil,   nil,   nil,   nil,   321,   992,  1164,   nil,    18,   nil,
  1300,  1301, 10737,  5431,   nil,   nil,  1302,   288,   nil,   nil,
   nil,   nil, 23593,   nil,  1185,   nil,   nil,  1186,  1187,  1188,
  1190,   nil,  1191,   nil,   486,   nil,   nil,   nil,  1036, 24534,
   nil,   nil,  1210,   nil,   nil,   nil,  2554,  1057,  1089,  1090,
  1269,  1094,   nil,  1196,  1197,  1199,  1200,  1201,   633,  1202,
   855,  5020,   nil,   nil,   nil,   351,  4883,   nil,   nil,  4609,
  3924,   nil, 23723,   nil,  6837,   nil,  6973,   nil,  6021,   nil,
   nil,   nil,   705,  1267,  1268,   nil,  1352, 11689, 24680, 24315,
  1093,  6429,   nil,   nil,   nil,   nil,  1058,  1241,   765,   nil,
   nil,   nil,  1362,  1363,  1364,  1245,  1258,  1260,  1261,   nil,
   nil,  1265,   -11,   -10,    45,  1193,  1263,  1264,   nil,   nil,
   nil,   nil,  7245,   nil,   nil,   nil,   nil,    17,   nil,  -114,
   nil ]

racc_action_default = [
    -1,  -620,  -619,  -620,    -2,  -606,    -4,    -5,  -620,    -8,
    -9,  -620,  -620,  -620,   -29,  -620,  -620,  -620,  -281,  -620,
   -41,   -44,  -608,  -620,   -49,   -51,   -52,   -53,   -58,  -260,
  -260,  -260,  -295,  -334,  -335,   -70,  -619,   -74,   -82,   -84,
  -620,  -515,  -516,  -620,  -620,  -620,  -620,  -620,  -608,  -241,
  -272,  -273,  -274,  -275,  -276,  -277,  -278,  -279,  -280,  -595,
  -283,  -286,  -619,  -293,  -303,  -406,  -620,  -620,  -308,  -311,
  -606,  -620,  -319,  -326,  -620,  -336,  -337,  -448,  -449,  -450,
  -451,  -452,  -453,  -619,  -456,  -619,  -619,  -619,  -619,  -619,
  -619,  -619,  -493,  -499,  -500,  -593,  -504,  -505,  -594,  -507,
  -508,  -509,  -510,  -511,  -512,  -513,  -514,  -519,  -520,  1051,
    -3,  -607,  -615,  -616,  -617,    -7,  -620,  -620,  -620,  -620,
  -620,  -620,   -17,  -620,  -113,  -114,  -115,  -116,  -117,  -118,
  -119,  -120,  -121,  -125,  -126,  -127,  -128,  -129,  -130,  -131,
  -132,  -133,  -134,  -135,  -136,  -137,  -138,  -139,  -140,  -141,
  -142,  -143,  -144,  -145,  -146,  -147,  -148,  -149,  -150,  -151,
  -152,  -153,  -154,  -155,  -156,  -157,  -158,  -159,  -160,  -161,
  -162,  -163,  -164,  -165,  -166,  -167,  -168,  -169,  -170,  -171,
  -172,  -173,  -174,  -175,  -176,  -177,  -178,  -179,  -180,  -181,
  -182,  -183,  -184,  -185,  -186,  -187,  -188,  -189,  -190,  -191,
  -192,  -193,  -194,  -195,  -196,   -22,  -122,  -619,  -620,  -620,
  -619,  -620,  -620,  -605,  -620,  -620,  -620,  -620,  -620,  -608,
  -609,   -48,  -620,  -515,  -516,  -620,  -281,  -620,  -620,  -233,
  -620,  -619,  -620,  -620,  -620,  -620,  -620,  -620,  -620,  -620,
  -620,  -620,  -620,  -620,  -620,  -620,  -620,  -620,  -620,  -620,
  -620,  -620,  -620,  -620,  -620,  -620,  -620,  -620,  -620,  -412,
  -415,  -620,  -603,  -604,   -59,  -620,  -302,  -620,  -429,  -432,
   -65,  -619,  -426,   -66,  -608,   -67,  -242,  -255,  -619,  -619,
  -259,  -620,  -265,  -620,  -588,  -608,  -620,   -68,   -69,  -606,
   -13,   -14,  -620,   -72,  -619,  -608,  -620,   -75,   -78,  -619,
   -90,   -91,  -620,  -620,   -98,  -295,  -298,  -608,  -419,  -334,
  -335,  -338,  -427,  -620,   -80,  -620,   -86,  -291,  -501,  -502,
  -620,  -218,  -219,  -234,  -620,  -619,  -285,  -620,  -620,  -243,
  -612,  -612,  -620,  -619,  -304,  -305,  -547,   -50,  -620,  -620,
  -620,  -620,  -606,  -620,  -607,  -515,  -516,  -620,  -620,  -281,
  -620,  -359,  -360,  -620,  -322,  -620,  -113,  -114,  -156,  -157,
  -158,  -174,  -179,  -186,  -189,  -329,  -620,  -515,  -516,  -583,
  -584,  -454,  -620,  -477,  -620,  -479,  -620,  -481,  -620,  -620,
  -461,  -620,  -620,  -467,  -620,  -620,  -473,  -620,  -620,  -475,
  -620,  -492,  -494,  -495,  -496,  -497,    -6,  -618,   -23,   -24,
   -25,   -26,   -27,  -619,  -620,   -19,   -20,   -21,  -123,  -620,
   -30,   -39,   -40,  -620,  -620,   -31,  -199,  -608,  -250,  -251,
  -619,  -619,  -596,  -597,  -260,  -424,  -598,  -599,  -597,  -596,
  -260,  -423,  -425,  -598,  -599,   -37,  -207,   -38,  -620,   -42,
   -43,  -197,  -265,   -45,   -46,   -47,  -608,  -301,  -620,  -620,
  -619,  -291,  -620,  -620,  -620,  -208,  -209,  -210,  -211,  -212,
  -213,  -214,  -215,  -220,  -221,  -222,  -223,  -224,  -225,  -226,
  -227,  -228,  -229,  -230,  -231,  -232,  -235,  -236,  -237,  -238,
  -608,  -619,  -260,  -596,  -597,   -55,   -60,  -261,  -420,  -619,
  -619,  -608,  -608,  -297,  -256,  -620,  -264,  -257,  -620,  -262,
  -620,  -266,  -620,  -592,   -12,  -607,   -16,  -608,   -71,  -289,
   -87,   -76,  -620,  -608,  -619,  -620,  -620,   -97,  -620,  -501,
  -502,  -620,   -83,   -88,  -620,  -620,  -620,  -620,  -620,  -239,
  -620,  -440,  -620,  -287,  -610,  -244,  -614,  -613,  -246,  -614,
  -292,  -620,  -586,  -612,  -620,  -620,  -547,  -409,  -582,  -582,
  -530,  -532,  -532,  -532,  -546,  -548,  -549,  -550,  -551,  -552,
  -553,  -554,  -620,  -556,  -620,  -562,  -564,  -565,  -567,  -572,
  -574,  -575,  -577,  -578,  -579,  -620,  -619,  -350,  -351,  -619,
  -620,  -620,  -620,  -620,  -435,  -619,  -620,  -620,  -291,  -316,
  -108,  -109,  -620,  -111,  -620,  -281,  -620,  -620,  -327,  -547,
  -331,  -620,  -455,  -478,  -483,  -484,  -486,  -457,  -480,  -458,
  -482,  -459,  -460,  -620,  -463,  -465,  -620,  -466,  -469,  -470,
  -620,  -471,  -472,  -620,  -498,  -620,   -18,  -620,   -28,  -271,
  -620,  -620,  -428,  -620,  -252,  -254,  -620,  -620,   -61,  -248,
  -249,  -421,  -620,  -620,   -63,  -422,  -620,  -620,  -300,  -596,
  -597,  -596,  -597,  -608,  -197,  -620,  -395,  -396,  -608,  -398,
  -413,   -54,  -416,  -619,  -430,  -433,  -247,  -296,  -619,  -263,
  -267,  -620,  -589,  -590,  -591,   -15,   -73,  -620,   -79,   -85,
  -608,  -596,  -597,  -619,   -94,   -96,  -620,   -81,  -620,  -206,
  -216,  -217,  -608,  -619,  -619,  -284,  -608,  -612,  -294,  -587,
  -407,  -619,  -619,  -608,  -620,  -528,  -529,  -620,  -620,  -539,
  -620,  -542,  -620,  -544,  -620,  -361,  -620,  -363,  -365,  -372,
  -553,  -608,  -558,  -566,  -576,  -580,  -619,  -352,  -619,  -309,
  -353,  -354,  -312,  -620,  -315,  -620,  -608,  -596,  -597,  -600,
  -290,  -620,  -108,  -109,  -110,  -620,  -620,  -619,  -320,  -521,
  -522,  -620,  -323,  -619,  -619,  -547,  -620,  -620,  -608,  -620,
  -619,  -462,  -464,  -468,  -474,  -476,   -10,  -124,  -269,  -620,
  -200,  -620,  -611,  -619,   -33,  -202,   -34,  -203,   -62,   -35,
  -205,   -36,  -204,   -64,  -198,  -620,  -620,  -620,  -620,  -428,
  -620,  -582,  -582,  -377,  -619,  -619,  -619,  -394,  -620,  -608,
  -400,  -553,  -620,  -560,  -570,  -619,  -418,  -417,   -56,  -619,
  -619,  -258,  -268,   -77,   -92,   -89,  -299,  -619,  -357,  -619,
  -441,  -619,  -442,  -443,  -288,  -245,  -620,  -620,  -608,  -582,
  -563,  -581,  -531,  -532,  -532,  -557,  -532,  -532,  -573,  -532,
  -568,  -608,  -620,  -370,  -620,  -555,  -620,  -355,  -620,  -620,
  -619,  -619,  -314,  -620,  -428,  -620,  -108,  -109,  -112,  -608,
  -619,  -620,  -524,  -620,  -620,  -620,  -608,  -526,  -332,  -585,
  -485,  -488,  -489,  -490,  -491,  -620,  -270,   -32,  -201,  -253,
  -620,  -240,  -620,  -375,  -376,  -385,  -379,  -387,  -620,  -390,
  -620,  -392,  -397,  -620,  -620,  -620,  -559,  -620,  -620,  -619,
  -620,  -620,   -11,  -619,  -447,  -358,  -620,  -620,  -445,  -410,
  -411,  -408,  -527,  -620,  -535,  -620,  -537,  -620,  -540,  -620,
  -543,  -545,  -362,  -364,  -368,  -620,  -373,  -306,  -620,  -307,
  -620,  -620,  -620,  -619,  -317,  -428,  -620,  -620,  -324,  -328,
  -330,  -525,  -547,  -487,  -582,  -561,  -378,  -619,  -619,  -619,
  -619,  -571,  -619,  -399,  -608,  -402,  -404,  -405,  -569,  -620,
  -291,  -414,  -620,  -431,  -434,  -446,  -619,   -99,  -100,  -620,
  -620,  -107,  -444,  -532,  -532,  -532,  -532,  -366,  -620,  -371,
  -620,  -619,  -310,  -313,  -267,  -619,  -619,  -321,  -523,  -619,
  -619,  -374,  -620,  -382,  -620,  -384,  -620,  -388,  -620,  -391,
  -393,  -401,  -620,  -290,  -600,   -57,  -440,  -619,  -620,  -620,
  -106,  -620,  -533,  -536,  -538,  -541,  -620,  -369,  -619,  -436,
  -437,  -438,  -620,  -620,  -620,  -619,  -619,  -619,  -619,  -403,
  -439,  -608,  -596,  -597,  -600,  -105,  -532,  -367,  -356,  -318,
  -325,  -333,  -620,  -380,  -383,  -386,  -389,  -428,  -534,  -619,
  -381 ]

clist = [
'6,218,211,277,277,277,417,532,576,579,17,424,430,583,272,365,17,260',
'334,127,127,547,9,311,311,440,632,324,9,412,554,222,392,693,754,297',
'437,497,817,261,222,222,222,314,17,302,302,795,122,206,338,339,132,132',
'342,846,672,311,114,4,329,482,130,130,835,729,732,491,264,270,273,111',
'926,849,222,222,110,838,222,347,721,373,127,375,377,380,383,386,389',
'375,486,923,798,705,706,535,538,672,115,127,398,399,400,401,293,744',
'295,951,660,374,596,955,598,957,851,390,664,665,613,17,522,616,741,114',
'222,222,222,222,17,603,986,9,353,610,860,597,614,828,863,614,402,343',
'275,287,288,989,355,753,599,757,942,850,796,979,16,340,333,696,797,327',
'16,325,366,748,799,350,335,278,278,278,541,369,954,662,332,545,326,700',
'336,497,627,277,481,279,279,279,805,489,16,669,809,490,669,672,810,425',
'1019,330,735,821,906,396,834,371,836,372,1017,448,418,899,376,951,379',
'331,1,17,222,222,222,1029,434,957,222,222,222,222,222,222,663,923,382',
'703,385,893,841,388,277,870,759,17,554,835,277,760,1037,277,653,391',
'424,430,861,488,733,404,352,833,205,830,858,945,902,121,789,16,502,601',
'341,2,,418,,,16,222,947,835,496,496,,222,838,,222,,311,,518,515,29,814',
'808,,,554,29,,272,,,,17,311,17,511,,527,302,17,699,29,680,,506,523,',
'683,,678,29,29,29,,29,302,580,581,687,683,669,669,1020,542,586,17,447',
'222,883,884,,311,934,311,114,414,,854,,1038,222,222,414,,29,29,835,505',
'29,,,16,504,594,293,594,507,,,293,,513,762,,,762,912,487,,990,600,948',
',736,949,16,492,,683,,,493,,,,,,114,633,29,,,278,6,29,29,29,29,29,973',
'640,278,508,17,127,582,645,,279,,496,496,,277,639,9,,279,811,,,,,,425',
',715,864,865,672,,221,866,626,,,16,132,16,,418,554,,16,709,711,713,130',
'440,434,222,655,625,,825,638,778,,640,,935,644,783,,,,,,,16,,656,639',
',813,,543,277,1025,656,656,991,,,,29,29,29,29,,311,425,29,29,29,29,29',
'29,,311,1030,,523,425,418,17,,822,,29,,523,302,661,222,933,434,675,',
',,302,,811,296,,19,,434,,222,,19,,936,859,,,683,,,,,29,,,,16,277,29',
',,29,648,,,,,,,19,,425,,,669,,,966,,29,,29,,,418,17,29,,17,715,,,843',
',222,,434,,,981,,,,,351,,222,666,667,,222,,29,,29,,,807,,,,,,676,,410',
'415,29,29,679,,435,439,633,730,730,127,554,800,,,1047,,,19,222,222,668',
',,749,222,222,19,806,222,1021,,16,,633,,656,,311,767,,496,640,132,,645',
'1023,1024,,311,523,,,130,,,639,800,,,302,815,697,,29,,818,823,,,,302',
',868,,,,,409,,,,,,17,17,,,,715,633,715,,277,,,,,,818,855,818,296,16',
',425,16,,,914,916,29,918,920,19,921,,,,,418,,438,,222,,,,434,,222,,',
',,,17,17,19,,127,,,17,,,496,,,,,,,800,222,,,,,,773,,,311,,296,29,886',
'886,886,296,977,715,,,29,,,1031,862,,,816,683,867,896,824,,17,,904,29',
'17,17,908,,,,,19,,19,17,,414,,19,928,,,,845,,633,792,,,,,,937,,,,,715',
',715,16,16,,222,19,17,17,,,29,,,29,,,17,222,853,29,,869,1012,1013,1014',
'1015,,,,311,,29,,829,,29,715,,,,,311,,,,,,,,,,958,,16,16,17,730,,,17',
'16,,,969,938,,,,,,29,29,,794,,,29,29,,,29,1001,,19,,1048,,,,17,,911',
',886,886,886,886,,886,,,,1008,,922,16,,,,16,16,,,,,434,,337,337,16,',
'337,17,,,837,277,839,,941,,818,,,,29,29,17,988,,425,,17,,,17,17,,,,16',
'16,,418,,41,,,633,,16,41,,222,818,434,,337,337,337,337,886,886,886,886',
'29,,,,,,29,,,,19,,29,29,41,300,300,,,29,886,,,,16,774,776,,16,,29,779',
'781,,,439,944,,,792,,,792,,792,726,,,728,345,,,367,,,,,,16,,,,,,29,',
',,29,29,,,,,,793,,,29,,,19,,,19,,,,,41,,16,443,444,445,446,,,41,,,,',
',,,16,29,,29,29,16,,,16,16,,,,29,29,831,,,831,,,,950,,952,,,,,,,,,,',
',,,,,792,,792,,792,438,792,974,,975,,976,29,,877,,29,,,,18,,,,826,827',
'18,,,,,,,,,,,,,41,,,42,887,889,891,29,,42,,792,,,,18,304,304,533,,,19',
'19,,41,,,,,,,337,337,,,,,42,301,301,29,,,,875,,,1026,,1027,349,1028',
',,,29,,,,,29,,,29,29,,1036,,,,,,346,19,19,368,,,,,19,29,,,,41,,41,,898',
'18,300,41,900,901,,,1049,,18,,,,905,,,,,300,,,,42,,831,,,793,41,,793',
'42,793,,,19,,,,19,19,,,,930,931,,,,19,,,,,,,367,,367,,,,,,,,,993,995',
'997,999,,1000,,,,,,,,19,19,,,,,,,,,19,,,962,,,18,965,,,,,,,,,41,,,,',
',,,,,,,42,,18,,,,,,,985,,19,,692,,19,793,,793,972,793,,793,,42,,,1043',
'1044,1045,1046,,,,,,,,,,,,1006,,,19,,,,,,1050,,,,,,1018,,,,,1022,18',
',18,793,,,304,18,,,,,,,,19,,752,,,,758,42,304,42,,,41,301,42,19,,,18',
'300,19,,,19,19,,,,300,,301,,,,,,,,,,42,,,,,,595,,595,,,,,,,,,,,,,,,',
',,,,368,,368,,,,,,,,,,,,,41,,,41,,,,,,411,,,,18,,,442,,,,,,,,,,,,,,',
',,,,42,,,,,,,,,,,,,,,,,,,,,,,,,,,,337,,,,,,,,,,,,,,,,,,,499,,501,,,503',
',,,,,,,,,,,,,300,,,,,,,,,,,300,,,18,,,,,,,304,,,41,41,,,,,304,,,544',
',,42,,,,,,,301,,,,,,,,,301,,,,,,,,,,,,,,,,,337,,,,,,,41,41,,,,,337,41',
',18,,,18,,,,,,,,,,,,,,,,,,,42,,,42,,,629,,,,,,,,,,,,367,,,41,,,,41,41',
',,,,,,,,41,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,41,41,,,,,,,,,41,,,304,,,,',
',,,,670,,304,544,,673,,674,,,,,,301,,18,18,,,,,,,367,301,,,41,,,,41',
',,,967,,42,42,,,670,,,544,,,,,,,,,,,,,,,,,41,,,,,,18,18,722,,,,874,18',
',,,,,,,,,,,,,,42,42,,,,41,,42,,,,,,,,,,,,,41,,,,,41,,595,41,41,18,229',
',,18,18,,,,,276,276,276,,18,,768,,,368,670,544,42,321,322,323,42,42',
',,,,,,,,42,,,,276,,,,,18,18,,,,,,,,,18,,812,,,,,,,,,,42,42,,,,,,,,,42',
',,820,,,,,,,,,,595,,,,18,,,,18,,840,,971,,,,,,,,,,368,,,,42,,,,42,442',
',,968,,,,18,,,,,,,,,,,,,,,,,,,,,,42,,,,,876,,,,,,18,,,,,,,,,,,,,,,18',
',,,,18,,42,18,18,276,416,276,,,,436,441,,,,,42,,,,,42,,,42,42,229,,',
'455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471',
'472,473,474,475,476,477,478,479,480,,,,,,,276,,,,,,276,,,276,,,,,,,276',
',276,,,276,544,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,529,,,,,,,,,276,',
',,,,,984,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,276,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,276,,436,654,416',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,276,,,276,,276,,276,,,,,,,,',
',,,276,,,,,,,,,,689,690,691,,,,,,,,,,276,,,276,,,,,,,,,,,,,,,,,,,,,',
',,,276,,,,,,,,,,,,,,,,,,,,,276,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,276,770,,,276,276,775,777,,,,,780,782,,,654,784,,,,,,,,,,,,,',
',,,,,,,,,,276,,,,,,,,,,,,,,,,,,,,,,,276,,,,,,,,,,,,,,,,,,,,276,,,,,',
',,,,,,,,,,,,,,,276,,,,,,,,,,,,276,,,,,,,,,,,,,,,,,,,,,,276,,878,,,,',
',,,,,,,,,775,777,782,780,,881,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,276,878,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,276,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,276' ]
        racc_goto_table = arr = ::Array.new(2982, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'6,34,27,36,36,36,25,10,90,90,24,40,40,93,72,60,24,153,87,61,61,152,9',
'67,67,20,26,34,9,30,183,24,60,13,97,53,30,74,14,39,24,24,24,54,24,24',
'24,142,17,17,19,19,65,65,19,91,196,67,96,2,6,40,64,64,187,92,92,25,41',
'41,41,8,133,14,24,24,5,191,24,24,132,6,61,6,6,6,6,6,6,6,42,130,145,137',
'137,70,70,196,7,61,19,19,19,19,49,58,50,192,43,170,59,147,59,148,106',
'170,43,43,173,24,55,173,107,96,24,24,24,24,24,174,108,9,109,174,110',
'111,174,145,112,174,9,5,48,48,48,113,114,115,116,117,118,104,143,133',
'23,103,102,101,134,100,23,99,98,95,140,94,89,69,69,69,86,85,146,73,68',
'149,51,150,151,74,66,36,154,71,71,71,155,158,23,75,159,160,75,196,161',
'72,162,69,163,164,165,7,143,168,143,169,133,27,6,46,171,192,172,71,1',
'24,24,24,24,147,61,148,24,24,24,24,24,24,45,130,175,152,176,145,132',
'177,36,178,179,24,183,187,36,180,133,36,25,181,40,40,182,72,93,33,21',
'186,18,188,58,189,15,11,26,23,34,195,105,3,,6,,,23,24,142,187,6,6,,24',
'191,,24,,67,,34,27,44,26,43,,,183,44,,72,,,,24,67,24,54,,27,24,24,70',
'44,25,,9,53,,40,,55,44,44,44,,44,24,19,19,55,40,75,75,14,6,27,24,51',
'24,137,137,,67,92,67,96,69,,26,,91,24,24,69,,44,44,187,8,44,,,23,5,24',
'49,24,50,,,49,,50,174,,,174,137,48,,97,39,143,,25,143,23,48,,40,,,51',
',,,,,96,34,44,,,69,6,44,44,44,44,44,143,72,69,51,24,61,5,72,,71,,6,6',
',36,6,9,,71,74,,,,,,72,,131,10,10,196,,22,152,17,,,23,65,23,,6,183,',
'23,185,185,185,64,20,61,24,34,2,,70,41,42,,72,,26,41,42,,,,,,,23,,6',
'6,,55,,71,36,143,6,6,137,,,,44,44,44,44,,67,72,44,44,44,44,44,44,,67',
'13,,53,72,6,24,,30,,44,,53,24,41,24,90,61,9,,,,24,,74,12,,29,,61,,24',
',29,,10,25,,,40,,,,,44,,,,23,36,44,,,44,51,,,,,,,29,,72,,,75,,,90,,44',
',44,,,6,24,44,,24,131,,,131,,24,,61,,,90,,,,,29,,24,51,51,,24,,44,,44',
',,87,,,,,,51,,22,22,44,44,51,,22,22,34,96,96,61,183,34,,,26,,,29,24',
'24,71,,,96,24,24,29,153,24,93,,23,,34,,6,,67,17,,6,72,65,,72,10,10,',
'67,53,,,64,,,6,34,,,24,53,71,,44,,6,6,,,,24,,60,,,,,12,,,,,,24,24,,',
',131,34,131,,36,,,,,,6,19,6,12,23,,72,23,,,185,185,44,185,185,29,185',
',,,,6,,29,,24,,,,61,,24,,,,,,24,24,29,,61,,,24,,,6,,,,,,,34,24,,,,,',
'71,,,67,,12,44,6,6,6,12,131,131,,,44,,,25,96,,,51,40,96,24,51,,24,,6',
'44,24,24,6,,,,,29,,29,24,,69,,29,19,,,,51,,34,136,,,,,,19,,,,,131,,131',
'23,23,,24,29,24,24,,,44,,,44,,,24,24,69,44,,51,185,185,185,185,,,,67',
',44,,136,,44,131,,,,,67,,,,,,,,,,24,,23,23,24,96,,,24,23,,,24,96,,,',
',,44,44,,141,,,44,44,,,44,34,,29,,185,,,,24,,51,,6,6,6,6,,6,,,,27,,51',
'23,,,,23,23,,,,,61,,32,32,23,,32,24,,,141,36,141,,51,,6,,,,44,44,24',
'96,,72,,24,,,24,24,,,,23,23,,6,,56,,,34,,23,56,,24,6,61,,32,32,32,32',
'6,6,6,6,44,,,,,,44,,,,29,,44,44,56,56,56,,,44,6,,,,23,22,22,,23,,44',
'22,22,,,22,136,,,136,,,136,,136,12,,,12,56,,,56,,,,,,23,,,,,,44,,,,44',
'44,,,,,,138,,,44,,,29,,,29,,,,,56,,23,32,32,32,32,,,56,,,,,,,,23,44',
',44,44,23,,,23,23,,,,44,44,138,,,138,,,,141,,141,,,,,,,,,,,,,,,,136',
',136,,136,29,136,141,,141,,141,44,,22,,44,,,,28,,,,12,12,28,,,,,,,,',
',,,,56,,,57,139,139,139,44,,57,,136,,,,28,28,28,32,,,29,29,,56,,,,,',
',32,32,,,,,57,57,57,44,,,,12,,,141,,141,28,141,,,,44,,,,,44,,,44,44',
',141,,,,,,57,29,29,57,,,,,29,44,,,,56,,56,,12,28,56,56,12,12,,,141,',
'28,,,,12,,,,,56,,,,57,,138,,,138,56,,138,57,138,,,29,,,,29,29,,,,12',
'12,,,,29,,,,,,,56,,56,,,,,,,,,139,139,139,139,,139,,,,,,,,29,29,,,,',
',,,,29,,,12,,,28,12,,,,,,,,,56,,,,,,,,,,,,57,,28,,,,,,,12,,29,,32,,29',
'138,,138,29,138,,138,,57,,,139,139,139,139,,,,,,,,,,,,12,,,29,,,,,,139',
',,,,,12,,,,,12,28,,28,138,,,28,28,,,,,,,,29,,32,,,,32,57,28,57,,,56',
'57,57,29,,,28,56,29,,,29,29,,,,56,,57,,,,,,,,,,57,,,,,,28,,28,,,,,,',
',,,,,,,,,,,,,57,,57,,,,,,,,,,,,,56,,,56,,,,,,31,,,,28,,,31,,,,,,,,,',
',,,,,,,,,57,,,,,,,,,,,,,,,,,,,,,,,,,,,,32,,,,,,,,,,,,,,,,,,,31,,31,',
',31,,,,,,,,,,,,,,56,,,,,,,,,,,56,,,28,,,,,,,28,,,56,56,,,,,28,,,31,',
',57,,,,,,,57,,,,,,,,,57,,,,,,,,,,,,,,,,,32,,,,,,,56,56,,,,,32,56,,28',
',,28,,,,,,,,,,,,,,,,,,,57,,,57,,,31,,,,,,,,,,,,56,,,56,,,,56,56,,,,',
',,,,56,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,56,56,,,,,,,,,56,,,28,,,,,,,,,31',
',28,31,,31,,31,,,,,,57,,28,28,,,,,,,56,57,,,56,,,,56,,,,56,,57,57,,',
'31,,,31,,,,,,,,,,,,,,,,,56,,,,,,28,28,31,,,,28,28,,,,,,,,,,,,,,,57,57',
',,,56,,57,,,,,,,,,,,,,56,,,,,56,,28,56,56,28,35,,,28,28,,,,,35,35,35',
',28,,31,,,57,31,31,57,35,35,35,57,57,,,,,,,,,57,,,,35,,,,,28,28,,,,',
',,,,28,,31,,,,,,,,,,57,57,,,,,,,,,57,,,31,,,,,,,,,,28,,,,28,,,,28,,31',
',28,,,,,,,,,,57,,,,57,,,,57,31,,,57,,,,28,,,,,,,,,,,,,,,,,,,,,,57,,',
',,31,,,,,,28,,,,,,,,,,,,,,,28,,,,,28,,57,28,28,35,35,35,,,,35,35,,,',
',57,,,,,57,,,57,57,35,,,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35',
'35,35,35,35,35,35,35,35,35,35,35,,,,,,,35,,,,,,35,,,35,,,,,,,35,,35',
',,35,31,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,35,,,,,,,31,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,35,35,35,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,35,,35,,35,,,,,,,,,,,,35,,,,,,,,,,35',
'35,35,,,,,,,,,,35,,,35,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,',
',,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,35,,,35,35,35,35',
',,,,35,35,,,35,35,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,,,35',
',,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,,,,,35,,,,,,,,,',
',,,,,,,,,,,,35,,35,,,,,,,,,,,,,,35,35,35,35,,35,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'35,35,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,35' ]
        racc_goto_check = arr = ::Array.new(2982, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   214,    57,   267,   nil,    71,    -2,    90,    66,    20,
  -318,   251,   496,  -498,  -655,  -557,   nil,    37,   244,   -16,
  -190,   183,   416,   152,     8,  -204,  -391,   -15,  1191,   532,
  -179,  1382,   903,   131,   -21,  1974,   -29,   nil,   nil,    12,
  -200,    39,  -174,  -373,   286,  -257,  -599,   nil,   110,    68,
    70,   115,   nil,    -2,     5,  -195,  1005,  1213,  -487,  -243,
   -59,     8,   nil,   nil,    51,    41,  -228,   -14,   112,   135,
  -235,   151,   -16,  -309,  -242,  -306,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    97,  -163,   -46,   nil,   101,
  -330,  -671,  -515,  -330,    94,  -433,    53,  -565,    88,   101,
    98,  -376,    93,    87,  -578,   197,  -618,  -467,  -804,    60,
  -614,  -219,  -614,  -793,    73,  -451,  -217,  -451,  -718,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  -751,  -128,  -482,  -772,  -500,   nil,   181,  -455,   444,   422,
  -494,   267,  -611,  -506,   nil,  -566,  -722,  -783,  -781,  -161,
  -368,   113,  -315,    -8,   -77,  -474,   nil,   nil,   -81,  -474,
   -78,  -471,  -789,  -386,  -495,  -621,   nil,   nil,   123,   122,
    24,   124,   125,  -261,  -243,   142,   143,   145,  -522,  -367,
  -363,   156,  -500,  -306,   nil,   -99,  -453,  -644,  -447,  -623,
   nil,  -633,  -781,   nil,   nil,  -105,  -442 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     5,   nil,   290,     7,   344,   291,
   nil,   nil,   531,   nil,   847,   nil,   289,   nil,   nil,   nil,
    14,    15,    21,   228,   320,   nil,   nil,   746,   226,   227,
   nil,   282,    20,   nil,   328,    24,    25,    26,    27,   nil,
   686,   nil,   nil,   nil,   308,   nil,   nil,    28,   419,    35,
   nil,   nil,    37,    40,    39,   nil,   223,   224,   593,   nil,
   129,   427,   128,   131,    78,    79,   nil,    49,   nil,   420,
   nil,   421,   432,   641,   494,   280,   265,    50,    51,    52,
    53,    54,    55,    56,    57,    58,   nil,   266,    64,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   577,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   717,   561,   nil,   718,   946,   791,   549,   nil,   550,   nil,
   nil,   551,   nil,   553,   657,   nil,   nil,   nil,   559,   nil,
   nil,   nil,   756,   nil,   nil,   nil,   431,   267,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    77,    80,    82,   nil,
   nil,   nil,   nil,   nil,   608,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   832,   548,   nil,   552,   563,   565,   803,
   568,   569,   804,   572,   575,   nil,   284 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 145, :_reduce_1,
  2, 143, :_reduce_2,
  2, 144, :_reduce_3,
  1, 146, :_reduce_none,
  1, 146, :_reduce_none,
  3, 146, :_reduce_6,
  2, 146, :_reduce_none,
  1, 149, :_reduce_8,
  0, 153, :_reduce_9,
  5, 149, :_reduce_10,
  4, 152, :_reduce_11,
  2, 154, :_reduce_12,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  3, 158, :_reduce_15,
  2, 158, :_reduce_16,
  0, 175, :_reduce_17,
  4, 151, :_reduce_18,
  3, 151, :_reduce_19,
  3, 151, :_reduce_20,
  3, 151, :_reduce_21,
  2, 151, :_reduce_22,
  3, 151, :_reduce_23,
  3, 151, :_reduce_24,
  3, 151, :_reduce_25,
  3, 151, :_reduce_26,
  3, 151, :_reduce_27,
  4, 151, :_reduce_28,
  1, 151, :_reduce_none,
  3, 151, :_reduce_30,
  3, 151, :_reduce_31,
  6, 151, :_reduce_32,
  5, 151, :_reduce_33,
  5, 151, :_reduce_34,
  5, 151, :_reduce_35,
  5, 151, :_reduce_36,
  3, 151, :_reduce_37,
  3, 151, :_reduce_38,
  3, 151, :_reduce_39,
  3, 151, :_reduce_40,
  1, 151, :_reduce_none,
  3, 162, :_reduce_42,
  3, 162, :_reduce_43,
  1, 174, :_reduce_none,
  3, 174, :_reduce_45,
  3, 174, :_reduce_46,
  3, 174, :_reduce_47,
  2, 174, :_reduce_48,
  1, 174, :_reduce_none,
  1, 161, :_reduce_50,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 179, :_reduce_none,
  4, 179, :_reduce_54,
  0, 187, :_reduce_55,
  0, 188, :_reduce_56,
  6, 184, :_reduce_57,
  1, 186, :_reduce_58,
  2, 178, :_reduce_59,
  3, 178, :_reduce_60,
  4, 178, :_reduce_61,
  5, 178, :_reduce_62,
  4, 178, :_reduce_63,
  5, 178, :_reduce_64,
  2, 178, :_reduce_65,
  2, 178, :_reduce_66,
  2, 178, :_reduce_67,
  2, 178, :_reduce_68,
  2, 178, :_reduce_69,
  1, 163, :_reduce_none,
  3, 163, :_reduce_71,
  1, 192, :_reduce_none,
  3, 192, :_reduce_73,
  1, 191, :_reduce_74,
  2, 191, :_reduce_75,
  3, 191, :_reduce_76,
  5, 191, :_reduce_77,
  2, 191, :_reduce_78,
  4, 191, :_reduce_79,
  2, 191, :_reduce_80,
  4, 191, :_reduce_81,
  1, 191, :_reduce_82,
  3, 191, :_reduce_83,
  1, 195, :_reduce_none,
  3, 195, :_reduce_85,
  2, 194, :_reduce_86,
  3, 194, :_reduce_87,
  1, 197, :_reduce_88,
  3, 197, :_reduce_89,
  1, 196, :_reduce_90,
  1, 196, :_reduce_91,
  4, 196, :_reduce_92,
  3, 196, :_reduce_93,
  3, 196, :_reduce_94,
  3, 196, :_reduce_95,
  3, 196, :_reduce_96,
  2, 196, :_reduce_97,
  1, 196, :_reduce_98,
  1, 171, :_reduce_99,
  1, 171, :_reduce_100,
  4, 171, :_reduce_101,
  3, 171, :_reduce_102,
  3, 171, :_reduce_103,
  3, 171, :_reduce_104,
  3, 171, :_reduce_105,
  2, 171, :_reduce_106,
  1, 171, :_reduce_107,
  1, 200, :_reduce_108,
  1, 200, :_reduce_none,
  2, 201, :_reduce_110,
  1, 201, :_reduce_111,
  3, 201, :_reduce_112,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_116,
  1, 202, :_reduce_117,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 159, :_reduce_120,
  1, 159, :_reduce_none,
  1, 160, :_reduce_122,
  0, 208, :_reduce_123,
  4, 160, :_reduce_124,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  3, 177, :_reduce_197,
  5, 177, :_reduce_198,
  3, 177, :_reduce_199,
  5, 177, :_reduce_200,
  6, 177, :_reduce_201,
  5, 177, :_reduce_202,
  5, 177, :_reduce_203,
  5, 177, :_reduce_204,
  5, 177, :_reduce_205,
  4, 177, :_reduce_206,
  3, 177, :_reduce_207,
  3, 177, :_reduce_208,
  3, 177, :_reduce_209,
  3, 177, :_reduce_210,
  3, 177, :_reduce_211,
  3, 177, :_reduce_212,
  3, 177, :_reduce_213,
  3, 177, :_reduce_214,
  3, 177, :_reduce_215,
  4, 177, :_reduce_216,
  4, 177, :_reduce_217,
  2, 177, :_reduce_218,
  2, 177, :_reduce_219,
  3, 177, :_reduce_220,
  3, 177, :_reduce_221,
  3, 177, :_reduce_222,
  3, 177, :_reduce_223,
  3, 177, :_reduce_224,
  3, 177, :_reduce_225,
  3, 177, :_reduce_226,
  3, 177, :_reduce_227,
  3, 177, :_reduce_228,
  3, 177, :_reduce_229,
  3, 177, :_reduce_230,
  3, 177, :_reduce_231,
  3, 177, :_reduce_232,
  2, 177, :_reduce_233,
  2, 177, :_reduce_234,
  3, 177, :_reduce_235,
  3, 177, :_reduce_236,
  3, 177, :_reduce_237,
  3, 177, :_reduce_238,
  3, 177, :_reduce_239,
  6, 177, :_reduce_240,
  1, 177, :_reduce_none,
  1, 173, :_reduce_242,
  1, 210, :_reduce_none,
  2, 210, :_reduce_244,
  4, 210, :_reduce_245,
  2, 210, :_reduce_246,
  3, 214, :_reduce_247,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 167, :_reduce_250,
  1, 167, :_reduce_251,
  2, 167, :_reduce_252,
  4, 167, :_reduce_253,
  2, 167, :_reduce_254,
  1, 190, :_reduce_255,
  2, 190, :_reduce_256,
  2, 190, :_reduce_257,
  4, 190, :_reduce_258,
  1, 190, :_reduce_259,
  0, 218, :_reduce_260,
  2, 183, :_reduce_261,
  2, 217, :_reduce_262,
  2, 216, :_reduce_263,
  1, 216, :_reduce_none,
  1, 211, :_reduce_265,
  2, 211, :_reduce_266,
  3, 211, :_reduce_267,
  4, 211, :_reduce_268,
  3, 172, :_reduce_269,
  4, 172, :_reduce_270,
  2, 172, :_reduce_271,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_282,
  0, 241, :_reduce_283,
  4, 209, :_reduce_284,
  2, 209, :_reduce_285,
  0, 242, :_reduce_286,
  0, 243, :_reduce_287,
  5, 209, :_reduce_288,
  3, 209, :_reduce_289,
  3, 209, :_reduce_290,
  2, 209, :_reduce_291,
  3, 209, :_reduce_292,
  0, 244, :_reduce_293,
  4, 209, :_reduce_294,
  1, 209, :_reduce_295,
  4, 209, :_reduce_296,
  3, 209, :_reduce_297,
  1, 209, :_reduce_298,
  5, 209, :_reduce_299,
  4, 209, :_reduce_300,
  3, 209, :_reduce_301,
  2, 209, :_reduce_302,
  1, 209, :_reduce_none,
  2, 209, :_reduce_304,
  2, 209, :_reduce_305,
  6, 209, :_reduce_306,
  6, 209, :_reduce_307,
  0, 245, :_reduce_308,
  0, 246, :_reduce_309,
  7, 209, :_reduce_310,
  0, 247, :_reduce_311,
  0, 248, :_reduce_312,
  7, 209, :_reduce_313,
  5, 209, :_reduce_314,
  4, 209, :_reduce_315,
  0, 249, :_reduce_316,
  0, 250, :_reduce_317,
  9, 209, :_reduce_318,
  0, 251, :_reduce_319,
  0, 252, :_reduce_320,
  7, 209, :_reduce_321,
  0, 253, :_reduce_322,
  0, 254, :_reduce_323,
  0, 255, :_reduce_324,
  9, 209, :_reduce_325,
  0, 256, :_reduce_326,
  0, 257, :_reduce_327,
  6, 209, :_reduce_328,
  0, 258, :_reduce_329,
  6, 209, :_reduce_330,
  0, 259, :_reduce_331,
  0, 260, :_reduce_332,
  9, 209, :_reduce_333,
  1, 209, :_reduce_334,
  1, 209, :_reduce_335,
  1, 209, :_reduce_336,
  1, 209, :_reduce_337,
  1, 166, :_reduce_338,
  1, 261, :_reduce_none,
  1, 262, :_reduce_none,
  1, 263, :_reduce_none,
  1, 264, :_reduce_none,
  1, 265, :_reduce_none,
  1, 266, :_reduce_none,
  1, 267, :_reduce_none,
  1, 268, :_reduce_none,
  1, 269, :_reduce_none,
  1, 270, :_reduce_none,
  1, 271, :_reduce_none,
  1, 232, :_reduce_none,
  1, 232, :_reduce_none,
  2, 232, :_reduce_none,
  1, 234, :_reduce_none,
  1, 234, :_reduce_none,
  1, 233, :_reduce_none,
  5, 233, :_reduce_356,
  1, 156, :_reduce_none,
  2, 156, :_reduce_358,
  1, 236, :_reduce_none,
  1, 236, :_reduce_360,
  1, 272, :_reduce_none,
  3, 272, :_reduce_362,
  1, 275, :_reduce_363,
  3, 275, :_reduce_364,
  1, 274, :_reduce_365,
  4, 274, :_reduce_366,
  6, 274, :_reduce_367,
  3, 274, :_reduce_368,
  5, 274, :_reduce_369,
  2, 274, :_reduce_370,
  4, 274, :_reduce_371,
  1, 274, :_reduce_372,
  3, 274, :_reduce_373,
  4, 276, :_reduce_374,
  2, 276, :_reduce_375,
  2, 276, :_reduce_376,
  1, 276, :_reduce_377,
  2, 281, :_reduce_378,
  1, 281, :_reduce_none,
  6, 282, :_reduce_380,
  8, 282, :_reduce_381,
  4, 282, :_reduce_382,
  6, 282, :_reduce_383,
  4, 282, :_reduce_384,
  2, 282, :_reduce_385,
  6, 282, :_reduce_386,
  2, 282, :_reduce_387,
  4, 282, :_reduce_388,
  6, 282, :_reduce_389,
  2, 282, :_reduce_390,
  4, 282, :_reduce_391,
  2, 282, :_reduce_392,
  4, 282, :_reduce_393,
  1, 282, :_reduce_394,
  1, 185, :_reduce_395,
  1, 185, :_reduce_none,
  3, 286, :_reduce_397,
  1, 286, :_reduce_398,
  4, 286, :_reduce_399,
  1, 287, :_reduce_none,
  4, 287, :_reduce_401,
  1, 288, :_reduce_402,
  3, 288, :_reduce_403,
  1, 289, :_reduce_404,
  1, 289, :_reduce_none,
  0, 293, :_reduce_406,
  3, 231, :_reduce_407,
  4, 291, :_reduce_408,
  1, 291, :_reduce_409,
  3, 292, :_reduce_410,
  3, 292, :_reduce_411,
  0, 296, :_reduce_412,
  0, 297, :_reduce_413,
  6, 295, :_reduce_414,
  2, 180, :_reduce_415,
  4, 180, :_reduce_416,
  5, 180, :_reduce_417,
  5, 180, :_reduce_418,
  0, 299, :_reduce_419,
  3, 230, :_reduce_420,
  4, 230, :_reduce_421,
  4, 230, :_reduce_422,
  3, 230, :_reduce_423,
  3, 230, :_reduce_424,
  3, 230, :_reduce_425,
  2, 230, :_reduce_426,
  1, 230, :_reduce_427,
  4, 230, :_reduce_428,
  0, 300, :_reduce_429,
  0, 301, :_reduce_430,
  6, 229, :_reduce_431,
  0, 302, :_reduce_432,
  0, 303, :_reduce_433,
  6, 229, :_reduce_434,
  0, 305, :_reduce_435,
  6, 235, :_reduce_436,
  1, 304, :_reduce_none,
  1, 304, :_reduce_none,
  6, 155, :_reduce_439,
  0, 155, :_reduce_440,
  1, 306, :_reduce_441,
  1, 306, :_reduce_none,
  1, 306, :_reduce_none,
  2, 307, :_reduce_444,
  1, 307, :_reduce_none,
  2, 157, :_reduce_446,
  1, 157, :_reduce_none,
  1, 219, :_reduce_448,
  1, 219, :_reduce_449,
  1, 219, :_reduce_none,
  1, 220, :_reduce_451,
  1, 309, :_reduce_452,
  1, 309, :_reduce_none,
  2, 309, :_reduce_454,
  3, 310, :_reduce_455,
  1, 310, :_reduce_456,
  3, 221, :_reduce_457,
  3, 222, :_reduce_458,
  3, 223, :_reduce_459,
  3, 223, :_reduce_460,
  1, 314, :_reduce_461,
  3, 314, :_reduce_462,
  1, 315, :_reduce_none,
  2, 315, :_reduce_464,
  3, 225, :_reduce_465,
  3, 225, :_reduce_466,
  1, 317, :_reduce_467,
  3, 317, :_reduce_468,
  3, 224, :_reduce_469,
  3, 224, :_reduce_470,
  3, 226, :_reduce_471,
  3, 226, :_reduce_472,
  1, 318, :_reduce_473,
  3, 318, :_reduce_474,
  1, 319, :_reduce_475,
  3, 319, :_reduce_476,
  1, 311, :_reduce_477,
  2, 311, :_reduce_478,
  1, 312, :_reduce_479,
  2, 312, :_reduce_480,
  1, 313, :_reduce_481,
  2, 313, :_reduce_482,
  1, 316, :_reduce_483,
  0, 321, :_reduce_484,
  3, 316, :_reduce_485,
  0, 322, :_reduce_486,
  4, 316, :_reduce_487,
  1, 320, :_reduce_488,
  1, 320, :_reduce_489,
  1, 320, :_reduce_490,
  1, 320, :_reduce_none,
  2, 206, :_reduce_492,
  1, 206, :_reduce_493,
  1, 323, :_reduce_none,
  1, 323, :_reduce_none,
  1, 323, :_reduce_none,
  1, 323, :_reduce_none,
  3, 207, :_reduce_498,
  1, 308, :_reduce_none,
  1, 308, :_reduce_none,
  2, 308, :_reduce_501,
  2, 308, :_reduce_502,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 198, :_reduce_none,
  1, 199, :_reduce_508,
  1, 199, :_reduce_509,
  1, 199, :_reduce_510,
  1, 199, :_reduce_511,
  1, 199, :_reduce_512,
  1, 199, :_reduce_513,
  1, 199, :_reduce_514,
  1, 227, :_reduce_515,
  1, 227, :_reduce_516,
  1, 165, :_reduce_517,
  1, 165, :_reduce_518,
  1, 170, :_reduce_519,
  1, 170, :_reduce_520,
  1, 237, :_reduce_521,
  0, 324, :_reduce_522,
  4, 237, :_reduce_523,
  2, 237, :_reduce_524,
  3, 239, :_reduce_525,
  2, 239, :_reduce_526,
  4, 325, :_reduce_527,
  2, 325, :_reduce_528,
  2, 325, :_reduce_529,
  1, 325, :_reduce_none,
  2, 327, :_reduce_531,
  0, 327, :_reduce_532,
  6, 294, :_reduce_533,
  8, 294, :_reduce_534,
  4, 294, :_reduce_535,
  6, 294, :_reduce_536,
  4, 294, :_reduce_537,
  6, 294, :_reduce_538,
  2, 294, :_reduce_539,
  4, 294, :_reduce_540,
  6, 294, :_reduce_541,
  2, 294, :_reduce_542,
  4, 294, :_reduce_543,
  2, 294, :_reduce_544,
  4, 294, :_reduce_545,
  1, 294, :_reduce_546,
  0, 294, :_reduce_547,
  1, 290, :_reduce_548,
  1, 290, :_reduce_549,
  1, 290, :_reduce_550,
  1, 290, :_reduce_551,
  1, 273, :_reduce_none,
  1, 273, :_reduce_553,
  1, 329, :_reduce_none,
  3, 329, :_reduce_555,
  1, 283, :_reduce_556,
  3, 283, :_reduce_557,
  2, 330, :_reduce_558,
  2, 331, :_reduce_559,
  1, 277, :_reduce_none,
  3, 277, :_reduce_561,
  1, 326, :_reduce_none,
  3, 326, :_reduce_563,
  1, 332, :_reduce_none,
  1, 332, :_reduce_none,
  2, 278, :_reduce_566,
  1, 278, :_reduce_567,
  3, 333, :_reduce_568,
  3, 334, :_reduce_569,
  1, 284, :_reduce_570,
  3, 284, :_reduce_571,
  1, 328, :_reduce_572,
  3, 328, :_reduce_573,
  1, 335, :_reduce_none,
  1, 335, :_reduce_none,
  2, 285, :_reduce_576,
  1, 285, :_reduce_577,
  1, 336, :_reduce_none,
  1, 336, :_reduce_none,
  2, 280, :_reduce_580,
  2, 279, :_reduce_581,
  0, 279, :_reduce_582,
  1, 240, :_reduce_none,
  0, 337, :_reduce_584,
  4, 240, :_reduce_585,
  1, 228, :_reduce_586,
  2, 228, :_reduce_587,
  1, 213, :_reduce_none,
  3, 213, :_reduce_589,
  3, 338, :_reduce_590,
  3, 338, :_reduce_591,
  2, 338, :_reduce_592,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 298, :_reduce_none,
  1, 298, :_reduce_none,
  1, 298, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 169, :_reduce_none,
  0, 147, :_reduce_none,
  1, 147, :_reduce_none,
  0, 176, :_reduce_none,
  1, 176, :_reduce_none,
  2, 193, :_reduce_none,
  2, 168, :_reduce_none,
  0, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 238, :_reduce_615,
  1, 238, :_reduce_none,
  1, 150, :_reduce_none,
  2, 150, :_reduce_618,
  0, 148, :_reduce_619 ]

racc_reduce_n = 620

racc_shift_n = 1051

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tREGEXP_END => 63,
  :tUPLUS => 64,
  :tUMINUS => 65,
  :tUMINUS_NUM => 66,
  :tPOW => 67,
  :tCMP => 68,
  :tEQ => 69,
  :tEQQ => 70,
  :tNEQ => 71,
  :tGEQ => 72,
  :tLEQ => 73,
  :tANDOP => 74,
  :tOROP => 75,
  :tMATCH => 76,
  :tNMATCH => 77,
  :tDOT => 78,
  :tDOT2 => 79,
  :tDOT3 => 80,
  :tAREF => 81,
  :tASET => 82,
  :tLSHFT => 83,
  :tRSHFT => 84,
  :tCOLON2 => 85,
  :tCOLON3 => 86,
  :tOP_ASGN => 87,
  :tASSOC => 88,
  :tLPAREN => 89,
  :tLPAREN2 => 90,
  :tRPAREN => 91,
  :tLPAREN_ARG => 92,
  :tLBRACK => 93,
  :tLBRACK2 => 94,
  :tRBRACK => 95,
  :tLBRACE => 96,
  :tLBRACE_ARG => 97,
  :tSTAR => 98,
  :tSTAR2 => 99,
  :tAMPER => 100,
  :tAMPER2 => 101,
  :tTILDE => 102,
  :tPERCENT => 103,
  :tDIVIDE => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAMBDA => 132,
  :tLAMBEG => 133,
  :tDSTAR => 134,
  :tCHAR => 135,
  :tSYMBOLS_BEG => 136,
  :tQSYMBOLS_BEG => 137,
  :tSTRING_DEND => 138,
  :tUBANG => 139,
  :tEQL => 140,
  :tLOWEST => 141 }

racc_nt_base = 142

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tDSTAR",
  "tCHAR",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DEND",
  "tUBANG",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "@1",
  "top_stmts",
  "opt_terms",
  "none",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "@2",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "lhs",
  "mrhs",
  "arg_value",
  "expr",
  "@3",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "block_call",
  "dot_or_colon",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_param",
  "fcall",
  "@4",
  "@5",
  "operation",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@6",
  "primary",
  "aref_args",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@7",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "@26",
  "@27",
  "k_begin",
  "k_if",
  "k_unless",
  "k_while",
  "k_until",
  "k_case",
  "k_for",
  "k_class",
  "k_module",
  "k_def",
  "k_end",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@28",
  "f_args",
  "do_block",
  "@29",
  "@30",
  "operation3",
  "@31",
  "@32",
  "@33",
  "@34",
  "@35",
  "cases",
  "@36",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@37",
  "@38",
  "sym",
  "@39",
  "args_tail",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_item",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "@40",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_2(val, _values, result)
                      result = new_compstmt val
                    
    result
end

def _reduce_3(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 4 omitted

# reduce 5 omitted

def _reduce_6(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 7 omitted

def _reduce_8(val, _values, result)
                      result = val[0]

                      # TODO: remove once I have more confidence this is fixed
                      # result.each_of_type :call_args do |s|
                      #   debug20 666, s, result
                      # end
                    
    result
end

def _reduce_9(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 1
                        yyerror "BEGIN in method"
                      end
                      self.env.extend
                    
    result
end

def _reduce_10(val, _values, result)
                      result = new_iter s(:preexe), nil, val[3]
                    
    result
end

def _reduce_11(val, _values, result)
                      result = new_body val
                    
    result
end

def _reduce_12(val, _values, result)
                      result = new_compstmt val
                    
    result
end

# reduce 13 omitted

# reduce 14 omitted

def _reduce_15(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

def _reduce_16(val, _values, result)
                      result = val[1]
                      debug20 2, val, result
                    
    result
end

def _reduce_17(val, _values, result)
                      lexer.lex_state = :expr_fname
                      result = self.lexer.lineno
                    
    result
end

def _reduce_18(val, _values, result)
                      result = s(:alias, val[1], val[3]).line(val[2])
                    
    result
end

def _reduce_19(val, _values, result)
                      result = s(:valias, val[1].to_sym, val[2].to_sym)
                    
    result
end

def _reduce_20(val, _values, result)
                      result = s(:valias, val[1].to_sym, :"$#{val[2]}")
                    
    result
end

def _reduce_21(val, _values, result)
                      yyerror "can't make alias for the number variables"
                    
    result
end

def _reduce_22(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_23(val, _values, result)
                      result = new_if val[2], val[0], nil
                    
    result
end

def _reduce_24(val, _values, result)
                      result = new_if val[2], nil, val[0]
                    
    result
end

def _reduce_25(val, _values, result)
                      result = new_while val[0], val[2], true
                    
    result
end

def _reduce_26(val, _values, result)
                      result = new_until val[0], val[2], true
                    
    result
end

def _reduce_27(val, _values, result)
                      result = s(:rescue, val[0], new_resbody(s(:array), val[2]))
                    
    result
end

def _reduce_28(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 3
                        yyerror "END in method; use at_exit"
                      end
                      result = new_iter s(:postexe), 0, val[2]
                    
    result
end

# reduce 29 omitted

def _reduce_30(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_31(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_32(val, _values, result)
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_33(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result.sexp_type = :safe_op_asgn
                      end
                      result.line = val[0].line
                    
    result
end

def _reduce_34(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                      if val[1] == '&.'
                        result.sexp_type = :safe_op_asgn
                      end
                      result.line = val[0].line
                    
    result
end

def _reduce_35(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 4, val, result
                    
    result
end

def _reduce_36(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
                      debug20 5, val, result
                    
    result
end

def _reduce_37(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_38(val, _values, result)
                      result = new_assign val[0], s(:svalue, val[2])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_40(val, _values, result)
                      result = new_masgn val[0], val[2]
                    
    result
end

# reduce 41 omitted

def _reduce_42(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

def _reduce_43(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

# reduce 44 omitted

def _reduce_45(val, _values, result)
                      result = logical_op :and, val[0], val[2]
                    
    result
end

def _reduce_46(val, _values, result)
                      result = logical_op :or, val[0], val[2]
                    
    result
end

def _reduce_47(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_48(val, _values, result)
                      result = s(:call, val[1], :"!")
                    
    result
end

# reduce 49 omitted

def _reduce_50(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

def _reduce_54(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_55(val, _values, result)
                      self.env.extend(:dynamic)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_56(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_57(val, _values, result)
                      result = new_iter nil, val[2], val[4]
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_58(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_59(val, _values, result)
                      result = val[0].concat val[1].sexp_body # REFACTOR pattern
                    
    result
end

def _reduce_60(val, _values, result)
                      result = val[0].concat val[1].sexp_body
                      if val[2] then
                        block_dup_check result, val[2]

                        result, operation = val[2], result
                        result.insert 1, operation
                      end
                    
    result
end

def _reduce_61(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]
                    
    result
end

def _reduce_62(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args, val[1]

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_63(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_64(val, _values, result)
                      recv, _, msg, args, block = val
                      call = new_call recv, msg.to_sym, args

                      block_dup_check call, block

                      block.insert 1, call
                      result = block
                    
    result
end

def _reduce_65(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_66(val, _values, result)
                      result = new_yield val[1]
                    
    result
end

def _reduce_67(val, _values, result)
                      line = val[0].last
                      result = s(:return, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_68(val, _values, result)
                      line = val[0].last
                      result = s(:break, ret_args(val[1])).line(line)
                    
    result
end

def _reduce_69(val, _values, result)
                      line = val[0].last
                      result = s(:next, ret_args(val[1])).line(line)
                    
    result
end

# reduce 70 omitted

def _reduce_71(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 72 omitted

def _reduce_73(val, _values, result)
                      result = s(:masgn, s(:array, val[1]))
                    
    result
end

def _reduce_74(val, _values, result)
                      result = s(:masgn, val[0])
                    
    result
end

def _reduce_75(val, _values, result)
                      result = s(:masgn, val[0] << val[1].compact)
                    
    result
end

def _reduce_76(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat, val[2]))
                    
    result
end

def _reduce_77(val, _values, result)
                      ary1, _, splat, _, ary2 = val

                      result = list_append ary1, s(:splat, splat)
                      result.concat ary2.sexp_body
                      result = s(:masgn, result)
                    
    result
end

def _reduce_78(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat))
                    
    result
end

def _reduce_79(val, _values, result)
                      ary = list_append val[0], s(:splat)
                      ary.concat val[3].sexp_body
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_80(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat, val[1])))
                    
    result
end

def _reduce_81(val, _values, result)
                      ary = s(:array, s(:splat, val[1]))
                      ary.concat val[3].sexp_body
                      result = s(:masgn, ary)
                    
    result
end

def _reduce_82(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat)))
                    
    result
end

def _reduce_83(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat), *val[2].sexp_body))
                    
    result
end

# reduce 84 omitted

def _reduce_85(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_86(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_87(val, _values, result)
                      result = val[0] << val[1].compact
                    
    result
end

def _reduce_88(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_89(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_90(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_91(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_92(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_93(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_94(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_95(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_96(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 7
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym), nil)
                    
    result
end

def _reduce_97(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 8
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, nil, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_98(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_99(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_100(val, _values, result)
                      result = self.assignable val[0]
                      debug20 9, val, result
                    
    result
end

def _reduce_101(val, _values, result)
                      result = self.aryset val[0], val[2]
                    
    result
end

def _reduce_102(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_103(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_104(val, _values, result)
                      result = new_attrasgn val[0], val[2], val[1]
                    
    result
end

def _reduce_105(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 10
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym))
                    
    result
end

def _reduce_106(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        debug20 11
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_107(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_108(val, _values, result)
                      yyerror "class/module name must be CONSTANT"
                    
    result
end

# reduce 109 omitted

def _reduce_110(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_111(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

def _reduce_112(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

def _reduce_116(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

def _reduce_117(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0]
                    
    result
end

# reduce 118 omitted

# reduce 119 omitted

def _reduce_120(val, _values, result)
                      result = s(:lit, val[0].to_sym)
                    
    result
end

# reduce 121 omitted

def _reduce_122(val, _values, result)
                      result = new_undef val[0]
                    
    result
end

def _reduce_123(val, _values, result)
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_124(val, _values, result)
                      result = new_undef val[0], val[3]
                    
    result
end

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

def _reduce_197(val, _values, result)
                      result = new_assign val[0], val[2]
                    
    result
end

def _reduce_198(val, _values, result)
                      result = new_assign val[0], s(:rescue, val[2], new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_199(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_200(val, _values, result)
                      result = new_op_asgn val
                      result = s(:rescue, result, new_resbody(s(:array), val[4]))
                    
    result
end

def _reduce_201(val, _values, result)
                      val[2].sexp_type = :arglist if val[2]
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_202(val, _values, result)
                      result = new_op_asgn2 val
                    
    result
end

def _reduce_203(val, _values, result)
                      result = new_op_asgn2 val
                    
    result
end

def _reduce_204(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2].to_sym, val[3].to_sym)
                    
    result
end

def _reduce_205(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_206(val, _values, result)
                      yyerror "constant re-assignment"
                    
    result
end

def _reduce_207(val, _values, result)
                      self.backref_assign_error val[0]
                    
    result
end

def _reduce_208(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)..(v2.last))
                      else
                        result = s(:dot2, v1, v2)
                      end
                    
    result
end

def _reduce_209(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Integer === v1.last and Integer === v2.last then
                        result = s(:lit, (v1.last)...(v2.last))
                      else
                        result = s(:dot3, v1, v2)
                      end
                    
    result
end

def _reduce_210(val, _values, result)
                      result = new_call val[0], :+, argl(val[2])
                    
    result
end

def _reduce_211(val, _values, result)
                      result = new_call val[0], :-, argl(val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = new_call val[0], :*, argl(val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = new_call val[0], :"/", argl(val[2])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = new_call val[0], :"%", argl(val[2])
                    
    result
end

def _reduce_215(val, _values, result)
                      result = new_call val[0], :**, argl(val[2])
                    
    result
end

def _reduce_216(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", argl(val[3])), :"-@")
                    
    result
end

def _reduce_217(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", argl(val[3])), :"-@")
                      ## TODO: why is this 2.0 only?
                      debug20 12, val, result
                    
    result
end

def _reduce_218(val, _values, result)
                      result = new_call val[1], :"+@"
                    
    result
end

def _reduce_219(val, _values, result)
                      result = new_call val[1], :"-@"
                    
    result
end

def _reduce_220(val, _values, result)
                      result = new_call val[0], :"|", argl(val[2])
                    
    result
end

def _reduce_221(val, _values, result)
                      result = new_call val[0], :"^", argl(val[2])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = new_call val[0], :"&", argl(val[2])
                    
    result
end

def _reduce_223(val, _values, result)
                      result = new_call val[0], :"<=>", argl(val[2])
                    
    result
end

def _reduce_224(val, _values, result)
                      result = new_call val[0], :">", argl(val[2])
                    
    result
end

def _reduce_225(val, _values, result)
                      result = new_call val[0], :">=", argl(val[2])
                    
    result
end

def _reduce_226(val, _values, result)
                      result = new_call val[0], :"<", argl(val[2])
                    
    result
end

def _reduce_227(val, _values, result)
                      result = new_call val[0], :"<=", argl(val[2])
                    
    result
end

def _reduce_228(val, _values, result)
                      result = new_call val[0], :"==", argl(val[2])
                    
    result
end

def _reduce_229(val, _values, result)
                      result = new_call val[0], :"===", argl(val[2])
                    
    result
end

def _reduce_230(val, _values, result)
                      result = new_call val[0], :"!=", argl(val[2])
                    
    result
end

def _reduce_231(val, _values, result)
                      result = new_match val[0], val[2]
                    
    result
end

def _reduce_232(val, _values, result)
                      result = s(:not, new_match(val[0], val[2]))
                    
    result
end

def _reduce_233(val, _values, result)
                      result = new_call val[1], :"!"
                    
    result
end

def _reduce_234(val, _values, result)
                      result = new_call value_expr(val[1]), :"~"
                    
    result
end

def _reduce_235(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", argl(val[2])
                    
    result
end

def _reduce_236(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", argl(val[2])
                    
    result
end

def _reduce_237(val, _values, result)
                      result = logical_op :and, val[0], val[2]
                    
    result
end

def _reduce_238(val, _values, result)
                      result = logical_op :or, val[0], val[2]
                    
    result
end

def _reduce_239(val, _values, result)
                      result = s(:defined, val[2])
                    
    result
end

def _reduce_240(val, _values, result)
                      result = s(:if, val[0], val[2], val[5])
                    
    result
end

# reduce 241 omitted

def _reduce_242(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 243 omitted

def _reduce_244(val, _values, result)
                      result = args [val[0]]
                    
    result
end

def _reduce_245(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_246(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

def _reduce_247(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 248 omitted

# reduce 249 omitted

def _reduce_250(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_251(val, _values, result)
                      result = val[0]
                    
    result
end

def _reduce_252(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_253(val, _values, result)
                      result = args [val[0], array_to_hash(val[2])]
                    
    result
end

def _reduce_254(val, _values, result)
                      result = args [array_to_hash(val[0])]
                    
    result
end

def _reduce_255(val, _values, result)
                      warning "parenthesize argument(s) for future version"
                      result = call_args val
                    
    result
end

def _reduce_256(val, _values, result)
                      result = call_args val
                      result = self.arg_blk_pass val[0], val[1]
                    
    result
end

def _reduce_257(val, _values, result)
                      result = call_args [array_to_hash(val[0])]
                      result = self.arg_blk_pass result, val[1]
                    
    result
end

def _reduce_258(val, _values, result)
                      result = call_args [val[0], array_to_hash(val[2])]
                      result = self.arg_blk_pass result, val[3]
                    
    result
end

def _reduce_259(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_260(val, _values, result)
                      result = lexer.cmdarg.stack.dup # TODO: smell?
                      lexer.cmdarg.push true
                    
    result
end

def _reduce_261(val, _values, result)
                      lexer.cmdarg.stack.replace val[0]
                      result = val[1]
                    
    result
end

def _reduce_262(val, _values, result)
                      result = s(:block_pass, val[1])
                    
    result
end

def _reduce_263(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 264 omitted

def _reduce_265(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_266(val, _values, result)
                      result = s(:array, s(:splat, val[1]))
                    
    result
end

def _reduce_267(val, _values, result)
                      result = self.list_append val[0], val[2]
                    
    result
end

def _reduce_268(val, _values, result)
                      result = self.list_append val[0], s(:splat, val[3])
                    
    result
end

def _reduce_269(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_270(val, _values, result)
                      result = self.arg_concat val[0], val[3]
                    
    result
end

def _reduce_271(val, _values, result)
                      result = s(:splat, val[1])
                    
    result
end

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

# reduce 280 omitted

# reduce 281 omitted

def _reduce_282(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_283(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_284(val, _values, result)
                      unless val[2] then
                        result = s(:nil)
                      else
                        result = s(:begin, val[2])
                      end

                      result.line = val[1]
                    
    result
end

def _reduce_285(val, _values, result)
                      debug20 13, val, result
                    
    result
end

def _reduce_286(val, _values, result)
                      result = self.lexer.cmdarg.stack.dup
                      lexer.cmdarg.stack.replace [false] # TODO add api for these
                    
    result
end

def _reduce_287(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_288(val, _values, result)
                      warning "(...) interpreted as grouped expression"
                      lexer.cmdarg.stack.replace val[1]
                      result = val[2]
                    
    result
end

def _reduce_289(val, _values, result)
                      result = val[1] || s(:nil)
                      result.paren = true
                    
    result
end

def _reduce_290(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

def _reduce_291(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_292(val, _values, result)
                      result = val[1] || s(:array)
                      result.sexp_type = :array # aref_args is :args
                    
    result
end

def _reduce_293(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_294(val, _values, result)
                      result = new_hash val
                    
    result
end

def _reduce_295(val, _values, result)
                      result = s(:return)
                    
    result
end

def _reduce_296(val, _values, result)
                      result = new_yield val[2]
                    
    result
end

def _reduce_297(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_298(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_299(val, _values, result)
                      result = s(:defined, val[3])
                    
    result
end

def _reduce_300(val, _values, result)
                      result = s(:call, val[2], :"!")
                    
    result
end

def _reduce_301(val, _values, result)
                      debug20 14, val, result
                    
    result
end

def _reduce_302(val, _values, result)
                      oper, iter = val[0], val[1]
                      call = oper # FIX
                      iter.insert 1, call
                      result = iter
                      call.line = iter.line
                    
    result
end

# reduce 303 omitted

def _reduce_304(val, _values, result)
                      call, iter = val[0], val[1]
                      block_dup_check call, iter
                      iter.insert 1, call # FIX
                      result = iter
                    
    result
end

def _reduce_305(val, _values, result)
                      result = val[1] # TODO: fix lineno
                    
    result
end

def _reduce_306(val, _values, result)
                      result = new_if val[1], val[3], val[4]
                    
    result
end

def _reduce_307(val, _values, result)
                      result = new_if val[1], val[4], val[3]
                    
    result
end

def _reduce_308(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_309(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_310(val, _values, result)
                      result = new_while val[5], val[2], true
                    
    result
end

def _reduce_311(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_312(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_313(val, _values, result)
                      result = new_until val[5], val[2], true
                    
    result
end

def _reduce_314(val, _values, result)
                      (_, line), expr, _, body, _ = val
                      result = new_case expr, body, line
                    
    result
end

def _reduce_315(val, _values, result)
                      (_, line), _, body, _ = val
                      result = new_case nil, body, line
                    
    result
end

def _reduce_316(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_317(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_318(val, _values, result)
                      result = new_for val[4], val[1], val[7]
                    
    result
end

def _reduce_319(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_320(val, _values, result)
                      self.comments.push self.lexer.comments
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend
                    
    result
end

def _reduce_321(val, _values, result)
                      result = new_class val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_322(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_323(val, _values, result)
                      result = self.in_def
                      self.in_def = false
                    
    result
end

def _reduce_324(val, _values, result)
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend
                    
    result
end

def _reduce_325(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_326(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_327(val, _values, result)
                      self.comments.push self.lexer.comments
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend
                    
    result
end

def _reduce_328(val, _values, result)
                      result = new_module val
                      self.env.unextend
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_329(val, _values, result)
                      result = [self.in_def, self.lexer.cmdarg.stack.dup]

                      self.comments.push self.lexer.comments
                      self.in_def = true
                      self.env.extend
                      # TODO: local->cmdargs = cmdarg_stack;
                      # TODO: port local_push_gen and local_pop_gen
                      lexer.cmdarg.stack.replace [false]
                    
    result
end

def _reduce_330(val, _values, result)
                      in_def, cmdarg = val[2]

                      result = new_defn val

                      lexer.cmdarg.stack.replace cmdarg
                      self.env.unextend
                      self.in_def = in_def
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_331(val, _values, result)
                      self.comments.push self.lexer.comments
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_332(val, _values, result)
                      self.in_single += 1
                      self.env.extend
                      lexer.lex_state = :expr_endfn # force for args
                      result = [lexer.lineno, self.lexer.cmdarg.stack.dup]
                      lexer.cmdarg.stack.replace [false]
                    
    result
end

def _reduce_333(val, _values, result)
                      line, cmdarg = val[5]
                      result = new_defs val
                      result[3].line line

                      lexer.cmdarg.stack.replace cmdarg

                      self.env.unextend
                      self.in_single -= 1
                      self.lexer.comments # we don't care about comments in the body
                    
    result
end

def _reduce_334(val, _values, result)
                      result = s(:break)
                    
    result
end

def _reduce_335(val, _values, result)
                      result = s(:next)
                    
    result
end

def _reduce_336(val, _values, result)
                      result = s(:redo)
                    
    result
end

def _reduce_337(val, _values, result)
                      result = s(:retry)
                    
    result
end

def _reduce_338(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 339 omitted

# reduce 340 omitted

# reduce 341 omitted

# reduce 342 omitted

# reduce 343 omitted

# reduce 344 omitted

# reduce 345 omitted

# reduce 346 omitted

# reduce 347 omitted

# reduce 348 omitted

# reduce 349 omitted

# reduce 350 omitted

# reduce 351 omitted

# reduce 352 omitted

# reduce 353 omitted

# reduce 354 omitted

# reduce 355 omitted

def _reduce_356(val, _values, result)
                      result = s(:if, val[1], val[3], val[4])
                    
    result
end

# reduce 357 omitted

def _reduce_358(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 359 omitted

def _reduce_360(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK
                    
    result
end

# reduce 361 omitted

def _reduce_362(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_363(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_364(val, _values, result)
                      result = list_append val[0], val[2]
                    
    result
end

def _reduce_365(val, _values, result)
                      args, = val

                      result = block_var args
                    
    result
end

def _reduce_366(val, _values, result)
                      args, _, _, splat = val

                      result = block_var args, "*#{splat}".to_sym
                    
    result
end

def _reduce_367(val, _values, result)
                      args, _, _, splat, _, args2 = val

                      result = block_var args, "*#{splat}".to_sym, args2
                    
    result
end

def _reduce_368(val, _values, result)
                      args, _, _ = val

                      result = block_var args, :*
                    
    result
end

def _reduce_369(val, _values, result)
                      args, _, _, _, args2 = val

                      result = block_var args, :*, args2
                    
    result
end

def _reduce_370(val, _values, result)
                      _, splat = val

                      result = block_var :"*#{splat}"
                    
    result
end

def _reduce_371(val, _values, result)
                      _, splat, _, args = val

                      result = block_var :"*#{splat}", args
                    
    result
end

def _reduce_372(val, _values, result)
                      result = block_var :*
                    
    result
end

def _reduce_373(val, _values, result)
                      _, _, args = val

                      result = block_var :*, args
                    
    result
end

def _reduce_374(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_375(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_376(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_377(val, _values, result)
                      result = call_args val
                    
    result
end

def _reduce_378(val, _values, result)
                      result = args val
                    
    result
end

# reduce 379 omitted

def _reduce_380(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_381(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_382(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_383(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_384(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_385(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_386(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_387(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_388(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_389(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_390(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_391(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_392(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_393(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_394(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_395(val, _values, result)
 result = 0 
    result
end

# reduce 396 omitted

def _reduce_397(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_398(val, _values, result)
                      self.lexer.command_start = true
                      result = s(:args)
                    
    result
end

def _reduce_399(val, _values, result)
                      result = args val
                    
    result
end

# reduce 400 omitted

def _reduce_401(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_402(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_403(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_404(val, _values, result)
                      result = s(:shadow, val[0].to_sym)
                    
    result
end

# reduce 405 omitted

def _reduce_406(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno

                      result = lexer.lpar_beg
                      lexer.paren_nest += 1
                      lexer.lpar_beg = lexer.paren_nest
                    
    result
end

def _reduce_407(val, _values, result)
                      lpar, args, body = val
                      lexer.lpar_beg = lpar

                      call = new_call nil, :lambda
                      result = new_iter call, args, body
                      self.env.unextend
                    
    result
end

def _reduce_408(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_409(val, _values, result)
                      result = val[0]
                      result = 0 if result == s(:args)
                    
    result
end

def _reduce_410(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_411(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_412(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_413(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_414(val, _values, result)
                      args   = val[2]
                      body   = val[4]
                      result = new_iter nil, args, body
                      result.line = val[1]

                      self.env.unextend
                    
    result
end

def _reduce_415(val, _values, result)
                      # TODO:
                      ## if (nd_type($1) == NODE_YIELD) {
                      ##     compile_error(PARSER_ARG "block given to yield");

                      syntax_error "Both block arg and actual block given." if
                        val[0].block_pass?

                      val = invert_block_call val if inverted? val

                      result = val[1]
                      result.insert 1, val[0]
                    
    result
end

def _reduce_416(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_417(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_418(val, _values, result)
                      iter1, _, name, args, iter2 = val

                      call = new_call iter1, name.to_sym, args
                      iter2.insert 1, call

                      result = iter2
                    
    result
end

def _reduce_419(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_420(val, _values, result)
                      args = self.call_args val[2..-1]
                      result = val[0].concat args.sexp_body
                    
    result
end

def _reduce_421(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3], val[1]
                    
    result
end

def _reduce_422(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_423(val, _values, result)
                      result = new_call val[0], val[2].to_sym
                    
    result
end

def _reduce_424(val, _values, result)
                      result = new_call val[0], :call, val[2], val[1]
                    
    result
end

def _reduce_425(val, _values, result)
                      result = new_call val[0], :call, val[2]
                    
    result
end

def _reduce_426(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_427(val, _values, result)
                      result = s(:zsuper)
                    
    result
end

def _reduce_428(val, _values, result)
                      result = new_aref val
                    
    result
end

def _reduce_429(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_430(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_431(val, _values, result)
                      _, line, args, _, body, _ = val

                      result = new_iter nil, args, body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_432(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_433(val, _values, result)
                      result = nil # self.env.dynamic.keys
                    
    result
end

def _reduce_434(val, _values, result)
                      _, line, args, _, body, _ = val

                      result = new_iter nil, args, body
                      result.line = line

                      self.env.unextend
                    
    result
end

def _reduce_435(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_436(val, _values, result)
                      result = new_when(val[2], val[4])
                      result.line = val[1]
                      result << val[5] if val[5]
                    
    result
end

# reduce 437 omitted

# reduce 438 omitted

def _reduce_439(val, _values, result)
                      (_, line), klasses, var, _, body, rest = val

                      klasses ||= s(:array)
                      klasses << new_assign(var, s(:gvar, :"$!")) if var
                      klasses.line line

                      result = new_resbody(klasses, body)
                      result << rest if rest # UGH, rewritten above
                    
    result
end

def _reduce_440(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_441(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

# reduce 442 omitted

# reduce 443 omitted

def _reduce_444(val, _values, result)
                      result = val[1]
                    
    result
end

# reduce 445 omitted

def _reduce_446(val, _values, result)
                      _, body = val

                      result = body || s(:nil)
                    
    result
end

# reduce 447 omitted

def _reduce_448(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

def _reduce_449(val, _values, result)
                      result = s(:lit, val[0])
                    
    result
end

# reduce 450 omitted

def _reduce_451(val, _values, result)
                      val[0] = s(:dstr, val[0].value) if val[0].sexp_type == :evstr
                      result = val[0]
                    
    result
end

def _reduce_452(val, _values, result)
                      debug20 23, val, result
                    
    result
end

# reduce 453 omitted

def _reduce_454(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_455(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_456(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_457(val, _values, result)
                      result = new_xstring val[1]
                    
    result
end

def _reduce_458(val, _values, result)
                      result = new_regexp val
                    
    result
end

def _reduce_459(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_460(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_461(val, _values, result)
                      result = new_word_list
                    
    result
end

def _reduce_462(val, _values, result)
                      result = val[0].dup << new_word_list_entry(val)
                    
    result
end

# reduce 463 omitted

def _reduce_464(val, _values, result)
                      result = self.literal_concat val[0], val[1]
                    
    result
end

def _reduce_465(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_466(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_467(val, _values, result)
                      result = new_symbol_list
                    
    result
end

def _reduce_468(val, _values, result)
                      result = val[0].dup << new_symbol_list_entry(val)
                    
    result
end

def _reduce_469(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_470(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_471(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_472(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_473(val, _values, result)
                      result = new_qword_list
                    
    result
end

def _reduce_474(val, _values, result)
                      result = val[0].dup << new_qword_list_entry(val)
                    
    result
end

def _reduce_475(val, _values, result)
                      result = new_qsym_list
                    
    result
end

def _reduce_476(val, _values, result)
                      result = val[0].dup << new_qsym_list_entry(val)
                    
    result
end

def _reduce_477(val, _values, result)
                      result = s(:str, "")
                    
    result
end

def _reduce_478(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_479(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_480(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_481(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_482(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_483(val, _values, result)
                      result = new_string val
                    
    result
end

def _reduce_484(val, _values, result)
                      result = lexer.lex_strterm

                      lexer.lex_strterm = nil
                      lexer.lex_state = :expr_beg # TODO: expr_value ?
                    
    result
end

def _reduce_485(val, _values, result)
                      lexer.lex_strterm = val[1]
                      result = s(:evstr, val[2])
                    
    result
end

def _reduce_486(val, _values, result)
                      result = [lexer.lex_strterm,
                                lexer.brace_nest,
                                lexer.string_nest, # TODO: remove
                                lexer.cond.store,
                                lexer.cmdarg.store,
                                lexer.lex_state,
                               ]

                      lexer.lex_strterm = nil
                      lexer.brace_nest  = 0
                      lexer.string_nest = 0

                      lexer.lex_state   = :expr_value
                    
    result
end

def _reduce_487(val, _values, result)
                      # TODO: tRCURLY -> tSTRING_DEND
                      _, memo, stmt, _ = val

                      lex_strterm, brace_nest, string_nest, oldcond, oldcmdarg, oldlex_state = memo

                      lexer.lex_strterm = lex_strterm
                      lexer.brace_nest  = brace_nest
                      lexer.string_nest = string_nest

                      lexer.cond.restore oldcond
                      lexer.cmdarg.restore oldcmdarg

                      lexer.lex_state = oldlex_state

                      case stmt
                      when Sexp then
                        case stmt.sexp_type
                        when :str, :dstr, :evstr then
                          result = stmt
                        else
                          result = s(:evstr, stmt)
                        end
                      when nil then
                        result = s(:evstr)
                      else
                        debug20 25
                        raise "unknown string body: #{stmt.inspect}"
                      end
                    
    result
end

def _reduce_488(val, _values, result)
 result = s(:gvar, val[0].to_sym) 
    result
end

def _reduce_489(val, _values, result)
 result = s(:ivar, val[0].to_sym) 
    result
end

def _reduce_490(val, _values, result)
 result = s(:cvar, val[0].to_sym) 
    result
end

# reduce 491 omitted

def _reduce_492(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1].to_sym
                    
    result
end

def _reduce_493(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

# reduce 494 omitted

# reduce 495 omitted

# reduce 496 omitted

# reduce 497 omitted

def _reduce_498(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1]

                      result ||= s(:str, "")

                      case result.sexp_type
                      when :dstr then
                        result.sexp_type = :dsym
                      when :str then
                        result = s(:lit, result.last.to_sym)
                      when :evstr then
                        result = s(:dsym, "", result)
                      else
                        debug20 26, val, result
                      end
                    
    result
end

# reduce 499 omitted

# reduce 500 omitted

def _reduce_501(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

def _reduce_502(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

# reduce 503 omitted

# reduce 504 omitted

# reduce 505 omitted

# reduce 506 omitted

# reduce 507 omitted

def _reduce_508(val, _values, result)
 result = s(:nil)   
    result
end

def _reduce_509(val, _values, result)
 result = s(:self)  
    result
end

def _reduce_510(val, _values, result)
 result = s(:true)  
    result
end

def _reduce_511(val, _values, result)
 result = s(:false) 
    result
end

def _reduce_512(val, _values, result)
 result = s(:str, self.file) 
    result
end

def _reduce_513(val, _values, result)
 result = s(:lit, lexer.lineno) 
    result
end

def _reduce_514(val, _values, result)
                      result =
                        if defined? Encoding then
                          s(:colon2, s(:const, :Encoding), :UTF_8)
                        else
                          s(:str, "Unsupported!")
                        end
                    
    result
end

def _reduce_515(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_516(val, _values, result)
                      var = val[0]
                      result = Sexp === var ? var : self.gettable(var)
                    
    result
end

def _reduce_517(val, _values, result)
                      result = self.assignable val[0]
                    
    result
end

def _reduce_518(val, _values, result)
                      result = self.assignable val[0]
                      debug20 29, val, result
                    
    result
end

def _reduce_519(val, _values, result)
 result = s(:nth_ref,  val[0]) 
    result
end

def _reduce_520(val, _values, result)
 result = s(:back_ref, val[0]) 
    result
end

def _reduce_521(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_522(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_523(val, _values, result)
                      result = val[2]
                    
    result
end

def _reduce_524(val, _values, result)
                      yyerrok
                      result = nil
                      debug20 30, val, result
                    
    result
end

def _reduce_525(val, _values, result)
                      result = val[1]
                      self.lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                      # TODO:
                      # $<num>$ = parser->parser_in_kwarg;
                      # parser->parser_in_kwarg = 1;
                    
    result
end

def _reduce_526(val, _values, result)
                      # TODO: parser->parser_in_kwarg = $<num>1;
                      result = val[0]
                      self.lexer.lex_state = :expr_beg
                      self.lexer.command_start = true
                    
    result
end

def _reduce_527(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_528(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_529(val, _values, result)
                      result = args val
                    
    result
end

# reduce 530 omitted

def _reduce_531(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_532(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_533(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_534(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_535(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_536(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_537(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_538(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_539(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_540(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_541(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_542(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_543(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_544(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_545(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_546(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_547(val, _values, result)
                      result = args val
                    
    result
end

def _reduce_548(val, _values, result)
                      yyerror "formal argument cannot be a constant"
                    
    result
end

def _reduce_549(val, _values, result)
                      yyerror "formal argument cannot be an instance variable"
                    
    result
end

def _reduce_550(val, _values, result)
                      yyerror "formal argument cannot be a global variable"
                    
    result
end

def _reduce_551(val, _values, result)
                      yyerror "formal argument cannot be a class variable"
                    
    result
end

# reduce 552 omitted

def _reduce_553(val, _values, result)
                      identifier = val[0].to_sym
                      self.env[identifier] = :lvar

                      result = identifier
                    
    result
end

# reduce 554 omitted

def _reduce_555(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_556(val, _values, result)
                      case val[0]
                      when Symbol then
                        result = s(:args)
                        result << val[0]
                      when Sexp then
                        result = val[0]
                      else
                        debug20 32
                        raise "Unknown f_arg type: #{val.inspect}"
                      end
                    
    result
end

def _reduce_557(val, _values, result)
                      list, _, item = val

                      if list.sexp_type == :args then
                        result = list
                      else
                        result = s(:args, list)
                      end

                      result << item
                    
    result
end

def _reduce_558(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

def _reduce_559(val, _values, result)
                      # TODO: call_args
                      label, _ = val[0] # TODO: fix lineno?
                      identifier = label.to_sym
                      self.env[identifier] = :lvar

                      result = s(:array, s(:kwarg, identifier, val[1]))
                    
    result
end

# reduce 560 omitted

def _reduce_561(val, _values, result)
                      list, _, item = val
                      result = list << item.last
                    
    result
end

# reduce 562 omitted

def _reduce_563(val, _values, result)
                      result = args val
                    
    result
end

# reduce 564 omitted

# reduce 565 omitted

def _reduce_566(val, _values, result)
                      result = :"**#{val[1]}"
                    
    result
end

def _reduce_567(val, _values, result)
                      result = :"**"
                    
    result
end

def _reduce_568(val, _values, result)
                      result = self.assignable val[0], val[2]
                      # TODO: detect duplicate names
                    
    result
end

def _reduce_569(val, _values, result)
                      result = self.assignable val[0], val[2]
                    
    result
end

def _reduce_570(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_571(val, _values, result)
                      result = val[0]
                      result << val[2]
                    
    result
end

def _reduce_572(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_573(val, _values, result)
                      result = self.block_append val[0], val[2]
                    
    result
end

# reduce 574 omitted

# reduce 575 omitted

def _reduce_576(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      name = val[1].to_sym
                      self.assignable name
                      result = :"*#{name}"
                    
    result
end

def _reduce_577(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = name
                    
    result
end

# reduce 578 omitted

# reduce 579 omitted

def _reduce_580(val, _values, result)
                      identifier = val[1].to_sym

                      self.env[identifier] = :lvar
                      result = "&#{identifier}".to_sym
                    
    result
end

def _reduce_581(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_582(val, _values, result)
                      result = nil
                    
    result
end

# reduce 583 omitted

def _reduce_584(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_585(val, _values, result)
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result.sexp_type == :lit
                    
    result
end

def _reduce_586(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_587(val, _values, result)
                      result = val[0]
                    
    result
end

# reduce 588 omitted

def _reduce_589(val, _values, result)
                      list = val[0].dup
                      more = val[2].sexp_body
                      list.push(*more) unless more.empty?
                      result = list
                      result.sexp_type = :hash
                    
    result
end

def _reduce_590(val, _values, result)
                      result = s(:array, val[0], val[2])
                    
    result
end

def _reduce_591(val, _values, result)
                      result = s(:array, s(:lit, val[0][0].to_sym), val.last)
                    
    result
end

def _reduce_592(val, _values, result)
                      result = s(:array, s(:kwsplat, val[1]))
                    
    result
end

# reduce 593 omitted

# reduce 594 omitted

# reduce 595 omitted

# reduce 596 omitted

# reduce 597 omitted

# reduce 598 omitted

# reduce 599 omitted

# reduce 600 omitted

# reduce 601 omitted

# reduce 602 omitted

# reduce 603 omitted

# reduce 604 omitted

# reduce 605 omitted

# reduce 606 omitted

# reduce 607 omitted

# reduce 608 omitted

# reduce 609 omitted

# reduce 610 omitted

# reduce 611 omitted

# reduce 612 omitted

# reduce 613 omitted

# reduce 614 omitted

def _reduce_615(val, _values, result)
 yyerrok 
    result
end

# reduce 616 omitted

# reduce 617 omitted

def _reduce_618(val, _values, result)
 yyerrok 
    result
end

def _reduce_619(val, _values, result)
 result = nil; 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Ruby20Parser
