
<%
invalid_items = 0
filled_items = 0
@plain_notes = true
%>
  <div id="import-container" class="hide-blank-rows">
    <%= form_for(@import, class: "inline-form", remote: false, html: {'data-result-target' => '#import-edit-results', 'data-template' => "edit-edit-result"}) do |form| %>
      <div class="data-results import-edit-container">
        <div data-result="import-edit-form-"  class="import-edit-form">

          <div class="grid-form-block">
            <fieldset <%=@readonly ? 'disabled="true"' : ''%> id="import-grid-fields">
            <table class="import-grid">
              <thead>
                <tr>
                  <th>&nbsp;
                  </th>
                  <% fields.each do |p| %>
                  <th>
                    <%= p %>
                  </th>
                  <% end %>
                </tr>
              </thead>
              <tbody>
                <% row_num = 1 %>
                <%= form.fields_for @primary_table.to_sym, @import.items do |f| %>
                <%
                  final_blank_row = row_num == @import.item_count+1
                  item = @import.items[f.index]
                  item.send :write_attribute, :user_id, current_user.id
                  valid_item =  true
                  filled_row = row_num <= @import.item_count
                  unless @readonly
                    valid_item = item.check_valid?
                    invalid_items += 1 unless valid_item || !filled_row
                    filled_items +=1 if filled_row
                  end

                  form_object_instance = item
                  form_object_item_type_us = form_object_instance.item_type_us
                  label_redefined = false
                %>

                <tr class="<%= valid_item ?  'item-valid' : 'item-invalid'%> <%= final_blank_row ? 'final-blank-row' : filled_row ? 'filled-row' : 'blank-row'%>  <%= row_num == @import.item_count+1 ? 'next-blank-row' : ''%>" data-error-items="<%= item.errors.keys.join(",")%>" >
                  <td class="row-num">
                    <%= row_num %>
                  </td>
                  <%
                    gs_prefix = general_selection_prefix_name(form_object_instance)
                  %>
                  <% fields.each do |field_name_sym|

                  %>
                    <td data-col-type="<%=field_name_sym%>">
                      <%
                        field_name = field_name_sym.to_s

                        col = form_object_instance.class.columns_hash[field_name]
                        # raise FphsException.new "Column #{field_name_sym} does not appear in the columns #{form_object_instance.class.columns_hash.map{|k,v| k}}" unless col
                        # External IDs and master crosswalk ids (msid) do not feature in the item. Ignore if they appear
                        column_type = :string
                        column_type = col.type if col


                        local_vars = {
                          form: f,
                          field_name_sym: field_name_sym,
                          field_name: field_name,
                          column_type: column_type,
                          general_selection_name: gs_prefix,
                          form_object_instance: form_object_instance,
                          form_object_item_type_us: form_object_item_type_us,
                          caption_before: {},
                          dialog_before: {},
                          labels: {}
                          
                        }
                        local_vars[:locals] = local_vars

                        # One time only, redefine the label method for this specific form fields instance
                        unless label_redefined
                          def f.label *args
                            ""
                          end
                          label_redefined = true
                        end
                      %>

                      <%= edit_form_field(**local_vars) %>



                    </td>
                  <% end %>
                  </tr>
                  <% row_num += 1  %>
                <% end %>

              </tbody>
            </table>
            </fieldset>
          </div>

        </div>
      </div>
      <% unless @readonly %>
      <%= hidden_field_tag :invalid_items, invalid_items.to_s %>
      <div class="import-form-actions well">
        <% if invalid_items > 0 %>
          <div class="">
            <p>Uploaded data has <%= invalid_items %> invalid <%= "rows".pluralize(invalid_items) %>. Either correct the data by editing it above (and click Re-Test when done), or cancel and upload a corrected CSV file.</p>
            <p>After submitting, you will be presented the opportunity to review the newly validated data before completing the import.</p>
          </div>
        <% elsif filled_items == 0 %>
          <div class="">
            <p>Enter the required data by editing it above. When complete, click Check Entries, or cancel and upload a CSV file.</p>
            <p>After submitting, you will be presented the opportunity to review the newly validated data before completing the import.</p>
          </div>
        <% end %>
          <%
            if filled_items > 0
              if invalid_items == 0
                submit_label = "Submit Import"
                disable_submit = true
              else
                submit_label = "Re-Test"
                disable_submit = false
              end
            else
              submit_label = "Check Entries"
              disable_submit = false
            end

          %>
          <% if disable_submit %>
          <div class="">
            <p>Check box to confirm data is to be imported to table <strong><%=@primary_table%></strong>
              <%= check_box_tag :confirm_upload %>
            </p>
          </div>
          <% end %>
        <div class="">
          <%= link_to 'Cancel', imports_imports_path, class: 'btn btn-danger' %>
          <%= form.submit value: submit_label, class: "btn btn-primary", id: "submit_import", disabled: disable_submit %>
        </div>
      </div>
      <% end %>
    <% end %>
  </div>
<script>
  $('#confirm_upload').on('change', function(){
    if($(this).is(':checked')){
      $('#submit_import').prop('disabled', null);
    }else {
      $('#submit_import').prop('disabled', true);
    }
  })

  $('#import-container form').on('submit', function(){
    var block = $(this);
    _fpa.form_utils.on_form_submit(block);
  });

  window.setTimeout(function(){

    var final_blank_row = $('tr.final-blank-row');
    final_blank_row.clone().insertAfter(final_blank_row);
    $(final_blank_row).removeClass('final-blank-row');

    $(document).on('change', 'tr.next-blank-row td input, select, textarea', function(){
      var v = $(this).val();
      if(!v || v == '' || $(this).parents('tr').hasClass('filled-row'))
        return;

      var blank_row = $(this).parents('form').find('tr.final-blank-row');
      var row = $(this).parents('tr');
      var new_row = blank_row.clone().insertAfter(row);
      var rn = parseInt(row.find('td.row-num').html());

      var new_rn = rn + 1;
      new_row.find('td.row-num').html(new_rn);

      new_row.find('td input, select, textarea').each(function(){
        var id = $(this).attr('id');
        if(id) {
          $(this).attr('id', id.replace('_0_', '_' + rn + '_' ));
        }
        var name = $(this).attr('name');
        if(name) {
          $(this).attr('name', name.replace('[0]', '[' + rn + ']' ))  ;
        }
      });

      row.removeClass('next-blank-row').addClass('filled-row').removeClass('blank-row');
      new_row.removeClass('final-blank-row');
      _fpa.form_utils.format_block(new_row);

    });

    $(document).on('submit', 'form', function(){
      $(this).find('.next-blank-row').remove();

    });

    $('fieldset[disabled] a[data-remote]').on('click', function(ev){
      ev.preventDefault();
      $.rails.handleRemote($(this));
    });
  }, 1000);

</script>
