<%
# Allow a 'data' selection to be made from an item associated with an activity log master

# optionally use another field type specification (allowing a field to be limited to a rec type for example)
options = field_options_for(form_object_instance, field_name_sym)
curr_field_name = options[:edit_as] && options[:edit_as][:field_type] || field_name

rlit = curr_field_name.sub('select_record_from_', '').singularize

if ActivityLog.use_with_class_names.include? rlit
  cn = rl = rlit
  cl = cn.camelize.constantize
  reslist = cl.where(master_id: form_object_instance.master_id)
  if cl.attribute_names.include?('rank')
    reslist = reslist.order(rank: :desc)
    reslist = reslist.all.map{|i| ["#{i.data} [#{i.rank_name}]", i.data]}
  else
    reslist = reslist.order(data: :asc)
    reslist = reslist.all.map{|i| [i.data, i.data]}
  end
elsif (ActivityLog.all_valid_item_and_rec_types - ActivityLog.use_with_class_names).include? rlit
  ActivityLog.use_with_class_names.each do |ucn|
    if rlit.start_with?(ucn)
      rl = rlit
      cn = ucn
      cl = cn.camelize.constantize
      reslist = cl.where(master_id: form_object_instance.master_id, rec_type: rlit.sub(/^#{ucn}_/, ''))
      if cl.attribute_names.include?('rank')
        reslist = reslist.order(rank: :desc)
        reslist = reslist.all.map{|i| ["#{i.data} [#{i.rank_name}]", i.data]}
      else
        reslist = reslist.order(data: :asc)
        reslist = reslist.all.map{|i| [i.data, i.data]}
      end
    end
  end
end
unless rl
  logger.warn "Failed to find valid class name for #{field_name_sym}"
end


%>
<%= form.label rl %>
<%= form.select field_name_sym, reslist, options, { data: {attr_name: field_name_sym, object_name: form_object_item_type_us}} %>
