<%

  local_vars = locals
  local_vars[:locals][:locals] = local_vars[:locals]
  # Get the list of filenames for templates, making them into the matchers we wish to use.
  # Sort by length to ensure the more specific matchers appear before the less specific matchers.
  # For example 'name_starts_with_select_record_from' should be tested before 'name_starts_with_select'
  f_names = Dir.entries(Rails.root.join 'app', 'views', 'common_templates', 'edit_fields').reject {|fn| fn.start_with?('.')}.map {|fn| fn[1..-10]}.sort {|a,b| b.length <=> a.length}

  got = false

  # Handle Brakeman issue with using column type directly to generate partial path

  valid_col_types = [:boolean, :integer]
  ct = valid_col_types.select {|c| c == column_type.to_sym }.first

  match_name = "column_type_#{ct}"

  if f_names.include? match_name
    partial_fn = "common_templates/edit_fields/#{match_name}"
  %>
    <%= render partial: partial_fn, locals: local_vars[:locals] %>
    <%
    got = true
  end

  unless got
    match_name = "name_is_#{field_name_sym}"
    if f_names.include? match_name
      partial_fn = "common_templates/edit_fields/#{match_name}"
    %>
      <%= render partial: partial_fn, locals: local_vars[:locals] %>
      <%
      got = true
    end
  end

  unless got
    f_names.select {|fn| fn.start_with?('name_starts_with_')}.map {|fn| fn.sub('name_starts_with_', '')}.each do |sw|
      match_name = "name_starts_with_#{sw}"
      if field_name.start_with?("#{sw}_") && f_names.include?(match_name)
        partial_fn = "common_templates/edit_fields/#{match_name}"
      %>
        <%= render partial: partial_fn, locals: local_vars[:locals] %>
        <%
        got = true
        break
      end
    end
  end

  unless got
    f_names.select {|fn| fn.start_with?('name_ends_with_')}.map {|fn| fn.sub('name_ends_with_', '')}.each do |ew|
      match_name = "name_ends_with_#{ew}"
      if field_name.end_with?("_#{ew}") && f_names.include?(match_name)
        partial_fn = "common_templates/edit_fields/#{match_name}"
      %>
        <%= render partial: partial_fn, locals: local_vars[:locals] %>
        <%
        got = true
        break
      end
    end
  end

  unless got
    if Classification::GeneralSelection::BasicItemTypes.include?("#{general_selection_name}_#{field_name_sym}".to_sym)%>
      <%= render partial: "common_templates/edit_fields/is_general_selection", locals: local_vars[:locals] %>
    <%
      got = true
    end
  end

  unless got %>
    <%= render partial: "common_templates/edit_fields/default", locals: local_vars[:locals] %>
  <%
    got = true
  end
%>
