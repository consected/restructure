<%
  @matched_name = nil

  if defined? embedded
    locals[:embedded] = embedded
  end
  local_vars = locals
  local_vars[:locals][:locals] = local_vars[:locals]
  # Get the list of filenames for templates, making them into the matchers we wish to use.
  # Sort by length to ensure the more specific matchers appear before the less specific matchers.
  # For example 'name_starts_with_select_record_from' should be tested before 'name_starts_with_select'
  f_names = @f_names ||= Dir.entries(Rails.root.join 'app', 'views', 'common_templates', 'edit_fields').reject {|fn| fn.start_with?('.')}.map {|fn| fn[1..-10]}.sort {|a,b| b.length <=> a.length}

  got = false

  curr_field_name = field_name
  opt = field_options_for(form_object_instance, field_name_sym)

  if opt[:edit_as]
    curr_field_name = opt[:edit_as][:field_type] || curr_field_name
    local_vars[:locals][:field_name] = curr_field_name
  end

  curr_field_name_sym = curr_field_name.to_sym


  unless got
    f_names.select {|fn| fn.start_with?('redcap_')}.map {|fn| fn.sub('redcap_', '')}.each do |ew|
      match_name = "redcap_#{ew}"
      if curr_field_name.end_with?("_#{ew}") && f_names.include?(match_name)
        partial_fn = "common_templates/edit_fields/#{match_name}"
      %>
<%= render partial: partial_fn, locals: local_vars[:locals] %>
<%
        got = true
        break
      end
    end
  end

  unless got
    match_name = "name_is_#{curr_field_name_sym}"
    # Use a select rather than just includes? to ensure brakeman doesn't complain about params driving render paths
    resname = f_names.select {|f| f == match_name}.first
    if resname
      partial_fn = "common_templates/edit_fields/#{resname}"
    %>
<%= render partial: partial_fn, locals: local_vars[:locals] %>
<%
      got = true
    end
  end

  unless got
    f_names.select {|fn| fn.start_with?('name_starts_with_')}.map {|fn| fn.sub('name_starts_with_', '')}.each do |sw|
      match_name = "name_starts_with_#{sw}"
      if curr_field_name.start_with?("#{sw}_") && f_names.include?(match_name)
        partial_fn = "common_templates/edit_fields/#{match_name}"
      %>
<%= render partial: partial_fn, locals: local_vars[:locals] %>
<%
        got = true
        break
      end
    end
  end

  unless got
    f_names.select {|fn| fn.start_with?('name_ends_with_')}.map {|fn| fn.sub('name_ends_with_', '')}.each do |ew|
      match_name = "name_ends_with_#{ew}"
      if curr_field_name.end_with?("_#{ew}") && f_names.include?(match_name)
        partial_fn = "common_templates/edit_fields/#{match_name}"
      %>
<%= render partial: partial_fn, locals: local_vars[:locals] %>
<%
        got = true
        break
      end
    end
  end

  unless got
    if respond_to?("#{curr_field_name}_options") %>
  <%= render partial: "common_templates/edit_fields/respond_to_options", locals: local_vars[:locals] %>
  <%
      got = true
    end
  end

  unless got

    @gs_exists ||= {}
    ckey = "#{form_object_instance.class.name}--#{curr_field_name_sym}"
    @gs_exists[ckey] = !!Classification::GeneralSelection.exists_for?(form_object_instance, curr_field_name_sym) if @gs_exists[ckey].nil?
    gs_exists = @gs_exists[ckey]

    if gs_exists %>
    <%= render partial: "common_templates/edit_fields/is_general_selection", locals: local_vars[:locals] %>
    <%
      got = true
    end
  end

  unless got
    if form_object_instance.model_data_type == :external_identifier %>
      <%= render partial: "common_templates/edit_fields/is_external_id", locals: local_vars[:locals] unless @already_shown_external_id%>
      <%
      @already_shown_external_id = true
      got = true
    end
  end
  # Handle Brakeman issue with using column type directly to generate partial path
  unless got

    valid_col_types = [:boolean, :integer, :datetime]
    ct = valid_col_types.select {|c| c == column_type.to_sym }.first

    match_name = "column_type_#{ct}"

    if f_names.include? match_name
      partial_fn = "common_templates/edit_fields/#{match_name}"
    %>
      <%= render partial: partial_fn, locals: local_vars[:locals] %>
      <%
      got = true
    end
  end

  unless got %>
        <%= render partial: "common_templates/edit_fields/default", locals: local_vars[:locals] %>
        <%
    got = true
  end

  if opt[:calculate_with]
    cw = opt[:calculate_with]
    if cw
      %>
        <script>
          _fpa.calculate_with = _fpa.calculate_with || {};
          var cwdef = _fpa.calculate_with['<%=field_name_sym%>'] = <%=cw.to_json.html_safe%>;
          
          _fpa.utils.calc_field('<%=field_name_sym%>', '<%= form_object_item_type_us%>');
        </script>
        <%
    end

  end

  @matched_name ||= match_name
%>
