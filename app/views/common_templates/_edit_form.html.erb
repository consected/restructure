<%
  name = full_object_name

  unless defined? caption
    caption = nil
  end

  unless defined? caption_before
    caption_before = {}
  end

  unless caption && caption.to_s.include?('{{')
    caption = (caption.to_s || name).gsub('Dynamic Model/', '').humanize.titleize
  end

  unless defined? item_list
    item_list = permitted_params - [:id, :master_id, :item_id, item_type_id]
  end

  unless defined? item_flags_after
    item_flags_after = nil
  end

  has_source = false

  select_desc = {}


  if name.start_with? 'activity_log_'
    gs_name = name
  else
    gs_name = name.pluralize
  end
%>

<div class="data-results">
  <div data-result="<%= edit_form_id %>">
    <div class="">
      <%=form_for([object_instance.belongs_directly_to, object_instance], edit_form_hash ) do |f|%>
      <% if @extra_log_type %>
        <%= f.hidden_field :extra_log_type, value: @extra_log_type_name %>
      <% end %>
      <%= model_reference_fields f %>

      <ul class="list-group">
        <li class="list-group-item">
          <%= inline_cancel_button %>
          <h4 class="list-group-item-heading"><%=caption%></h4>
          <%= render partial: 'common_templates/item_flags_block', locals: {f: f} unless item_flags_after || item_flags_array.length == 0 %>
        </li>

        <% item_list.each do |p| %>
          <%
              set_related_field = handle_set_related_field(p)
          %>
          <% if caption_before[p] && p != :notes %>
            <li class="list-group-item <%=name.hyphenate%>-caption-after-<%=p%>">
              <%= caption_before[p].html_safe %>
            </li>
          <% end %>

          <li class="list-group-item <%=name.hyphenate%>-<%=p%>">
            <%
               col = object_instance.class.columns_hash[p.to_s]
               if col.nil?
                 raise FphsException.new "Column #{p} does not appear in the columns #{object_instance.class.columns_hash.map{|k,v| k}}"
               end
               col_type = col.type
            %>
            <% if col_type == :boolean %>
              <%= f.label p %>
              <%= f.check_box p %>
            <% elsif p == :description %>
              <%= f.label p %>
              <%= f.text_area p %>
            <% elsif p == :rec_type%>
              <%= f.label :rec_type %>
              <%
              gs = general_selection("#{gs_name}_type".to_sym, value: object_instance.rec_type, quiet_fail: true)
              gs ||= general_selection("#{gs_name}_rec_type".to_sym, value: object_instance.rec_type, quiet_fail: true)

              unless gs
                raise FphsException.new "The general selection #{gs_name}_type or #{gs_name}_rec_type has not been defined. Please inform the administrator of this error."
              end

              has_phone = gs.select {|s| s.last == 'phone'}.first

              %>
              <%= f.select :rec_type, gs, {}, class: "rec_type_selector #{has_phone ? 'rec_type_has_phone' : ''}" %>
            <% elsif p == :source
                 gs = general_selection("#{gs_name}_source".to_sym, value: object_instance.source, quiet_fail: true) rescue nil
                 unless gs
                   raise FphsException.new "The general selection #{gs_name}_source has not been defined. Please inform the administrator of this error."
                 end
            %>
              <%= f.label :source, 'data-add-icon' => 'question-sign', 'data-show-modal' => general_selection_block_id("#{gs_name}_source".to_sym), title: 'original sources of data' %>
                <% if gs %>
                <%= f.select :source, gs %>
                <% has_source = true %>
                <% else %>
                <%= f.text_field :source %>
                <% end %>
            <% elsif p.to_s.index('select_record_from_') == 0
                  # Allow a 'data' selection to be made from an item

                  rlit = p.to_s.sub('select_record_from_', '').singularize

                  if ActivityLog.use_with_class_names.include? rlit
                    rl = rlit
                    cn = ActivityLog.use_with_class_names.select{|s| s == rl}.first
                    reslist = cn.camelize.constantize.where(master_id: object_instance.master_id)
                    if cn.camelize.constantize.attribute_names.include?('rank')
                      reslist = reslist.order(rank: :desc)
                      reslist = reslist.all.map{|i| ["#{i.data} [#{i.rank_name}]", i.data]}
                    else
                      reslist = reslist.order(data: :asc)
                      reslist = reslist.all.map{|i| [i.data, i.data]}
                    end
                  elsif (ActivityLog.all_valid_item_and_rec_types - ActivityLog.use_with_class_names).include? rlit
                    ActivityLog.use_with_class_names.each do |ucn|
                      if rlit.start_with?(ucn)
                        rl = rlit
                        cn = ActivityLog.use_with_class_names.select{|s| s == ucn}.first
                        reslist = cn.camelize.constantize.where(master_id: object_instance.master_id, rec_type: rlit.sub(/^#{ucn}_/, ''))
                        if cn.camelize.constantize.attribute_names.include?('rank')
                          reslist = reslist.order(rank: :desc)
                          reslist = reslist.all.map{|i| ["#{i.data} [#{i.rank_name}]", i.data]}
                        else
                          reslist = reslist.order(data: :asc)
                          reslist = reslist.all.map{|i| [i.data, i.data]}
                        end
                      end
                    end
                  end
                  unless rl
                    logger.warn "Failed to find valid class name for #{p}"
                  end

              %>
                <%= f.label rl %>
                <%= f.select p, reslist%>


            <% elsif p.to_s.end_with?('_yes_no') %>
              <%= f.label p, p.to_s.sub('_yes_no', '').humanize %>
              <%= f.select p, ['yes', 'no'] %>
            <% elsif p.to_s.end_with?('_no_yes') %>
              <%= f.label p, p.to_s.sub('_no_yes', '').humanize %>
              <%= f.select p, ['no', 'yes'] %>

            <% elsif p.to_s.end_with?('_time') %>
              <%= f.label p %>
              <%= f.text_field p, pattern: '\d{1,2}:\d{2} \D\D' %>

            <% elsif p.to_s.index('select_') == 0

                  gs = general_selection("#{gs_name}_#{p}".to_sym, return_all: true) rescue nil
                  unless gs
                    raise FphsException.new "The general selection #{gs_name}_#{p} has not been defined. Please inform the administrator of this error."
                  end
                  desc = gs.reduce(false){|r,i| r || !i[6].blank?}
                  v = object_instance.send(p)
                  if desc.blank?
                    opt = {}
                  else
                    idesc = "#{gs_name}_#{p}".to_sym
                    opt = {'data-add-icon' => 'question-sign', 'data-show-modal' => general_selection_block_id(idesc), title: "#{p.to_s.humanize} options"}
                    select_desc["#{gs_name}_#{p}".to_sym] = v
                  end
            %>
              <%= f.label p, opt %>
              <%
              gs = general_selection("#{gs_name}_#{p}".to_sym, value: v) rescue nil
              unless gs
                raise FphsException.new "The general selection #{gs_name}_#{p} has not been defined. Please inform the administrator of this error."
              end
              %>
              <%= f.select p, gs %>


            <% elsif p == :protocol_id %>
                <%= f.label :protocol_id, 'data-add-icon' => 'info-sign', title: 'protocol this is related to' %>
                <%= f.select :protocol_id, protocol_array_without_updates, {prompt: "-pick one-"}, {"data-filters-selector" => "##{name.gsub('__',"_")}_sub_process_id", class: "form-control input-sm"}%>

            <% elsif p == :sub_process_id %>
              <%= f.label 'status' %><br/>
              <%= f.select :sub_process_id, sub_processes_array_with_class, {include_blank: "-select-"}, {"data-filters-selector" => "##{name.gsub('__',"_")}_protocol_event_id", class: "form-control input-sm"} %>

            <% elsif p == :protocol_event_id %>
                <%= f.label 'method' %><br/>
                <%= f.select :protocol_event_id, protocol_events_array_with_class, {include_blank: "-select-"}, class: "form-control input-sm" %>
            <% elsif p == :rank %>
              <% if respond_to? "#{name}_rank_array_pair".to_sym %>
                <%= f.label :rank %>
                <%= f.select :rank, self.send("#{name}_rank_array_pair") %>
              <% else
                   gs = general_selection("#{gs_name}_rank".to_sym, present: :hyphenate_name_val, order: :value_number_desc, value: object_instance.rank, quiet_fail: true)
                   unless gs
                     raise FphsException.new "The general selection #{name}_rank has not been defined. Please inform the administrator of this error."
                   end
              %>
                <%= f.label :rank %>
                <% if gs %>
                <%= f.select :rank, gs %>
                <% else %>
                <%= f.text_field :rank %>
                <% end %>
              <% end %>
            <% elsif set_related_field && p.to_s.end_with?('_rank') %>
              <%= f.label p %>
              <%
              gs = general_selection(set_related_field[:name_and_field], present: :hyphenate_name_val, order: :value_number_desc, value: set_related_field[:value], quiet_fail: true)
              unless gs
                raise FphsException.new "The general selection #{set_related_field[:name_and_field]} has not been defined. Please inform the administrator of this error."
              end
              %>
              <%= f.select p, gs %>
            <% elsif p.to_s.index(/(_date|_when)$/)  %>
              <%= f.label p %>
              <%= f.date_field p %>
            <% elsif p.to_s.index(/(_url|_link)$/)  %>
              <%= f.label p %>
              <%= f.text_field p, type: 'url' %>
            <% elsif p.to_s.index(/_year$/)  %>
              <%= f.label p %>
              <%
                h = {}
                r = Settings.const_get("#{p.to_s.camelize}Range")
                h[:in] = r if r
              %>
              <%= f.number_field p, h %>
            <% elsif p == :country %>
              <%= f.label :country %>
              <%= f.country_select :country, priority_countries: ["US", "CA", "DE"], class: "form-control country-select"%>
            <% elsif p == :college %>
              <%= f.label :college %>
              <%= f.text_field :college, class: 'college-input typeahead'  %>
            <% elsif p == :state %>
              <%= f.label :state %>
              <%= f.collection_select :state, state_hash, :first, :last, {include_blank: '-select-'}  %>
            <% elsif p == :zip %>
              <%= f.label :zip %>
              <%= f.text_field :zip, zip_field_props %>
            <% elsif p == :notes || p == 'notes' || p.to_s.include?('_notes') %>
              <%= f.label p %>
              <% if caption_before[p]  %>
                  <p class="caption_before_notes">
                    <%= caption_before[p].html_safe %>
                  </p>
              <% end %>

              <%= f.text_area p, class: 'form-control'  %>
            <% elsif GeneralSelection::BasicItemTypes.include?("#{gs_name}_#{p}".to_sym)%>
              <%
              # Any entry in BasicItemTypes not otherwise handled will be treated as a general selection drop down
                gs = general_selection("#{gs_name}_#{p}".to_sym, value: object_instance.send(p), quiet_fail: true)
                unless gs
                  raise FphsException.new "The general selection #{gs_name}_#{p} has not been defined. Please inform the administrator of this error."
                end
              %>

              <%= f.label p %>
              <%= f.select p, gs %>
            <% else %>
              <%= f.label p %>
              <%= f.text_field p, { data: {attr_name: p}} %>
            <% end %>
          </li>
          <%  if item_flags_after == p && item_flags_array.length > 0 %>
          <li class="list-group-item <%=name.hyphenate%>-<%=p%>">
            <%= render partial: 'common_templates/item_flags_block', locals: {f: f} %>
          </li>
          <% end %>
        <% end %>

        <% if caption_before[:submit] %>
          <li class="list-group-item <%=name.hyphenate%>-caption-after-<%=p%>">
            <%= caption_before[:submit].html_safe %>
          </li>
        <% end %>
        <li class="list-group-item">
          <%= f.submit class: "btn btn-primary", value: 'Save' %>
        </li>
      </ul>
      <% end %>

      <%= render partial: 'common_templates/edit_form_references' %>
    </div>
      <% if has_source %>
        <%= render partial: 'general_selections/definitions_block', locals: {item_type: "#{gs_name}_source", value: object_instance.source} %>
      <% end %>

      <% select_desc.each do |k,v| %>
        <%= render partial: 'general_selections/definitions_block', locals: {item_type: k, value: v} %>
      <% end %>

  </div>
</div>
