<%
  # A common template for rendering edit forms.
  # Automatically matches field templates in the edit_fields directory
  # To add a new field matcher it is unlikely that this file needs to be edited,
  # instead adding a file to edit_fields will typically suffice.

  # This template can return the results of a Rails form_for or fields_for block
  # dependent on whether the field set is embedded inside an outer form or not.

  # An embedded form does not return a <form> tag, and also excludes some decoration and duplicate submit buttons.


  unless defined? embedded
    embedded = nil
  end

  form_object_instance = object_instance
  if embedded
    form_object_instance = @embedded_item
  end

  # If this object form is embedded in an outer form (an activity log), then use fields_for rather than form_for
  if embedded
    form_block = [:fields_for, :embedded_item, form_object_instance]
    form_block_object = form_embed
  else
    form_block = [:form_for, [form_object_instance.belongs_directly_to, form_object_instance], edit_form_hash]
    form_block_object = self
  end


  form_object_item_type_us = form_object_instance.item_type_us

  unless defined? caption
    if embedded
      caption = form_object_instance.human_name
    else
      caption = nil
    end
  end

  unless defined? caption_before
    if embedded
      d = form_object_instance.class.default_options
      caption_before = d.caption_before if d
    else
      caption_before = {}
    end
  end
  caption_before ||= {}
  # Allow show_caption_before helper to work
  @caption_before = caption_before


  if caption.blank?
    # if object_instance.respond_to?(:human_name) && object_instance.human_name.present?
      caption = object_instance.human_name

    # elsif caption.include?('_') || caption.downcase == caption
    #   caption = (caption.to_s || form_object_item_type_us).gsub('Dynamic Model/', '').humanize.titleize
    # end
  end

  unless defined? item_list
    item_list = form_object_instance.class.permitted_params - [:id, :master_id, :item_id, item_type_id]
  end

  unless defined? item_flags_after
    item_flags_after = nil
  end

  @has_source = false

  select_desc = {}


  if form_object_item_type_us.start_with? 'activity_log_'
    general_selection_name = form_object_item_type_us
  else
    general_selection_name = form_object_item_type_us.pluralize
  end

%>
<% unless embedded %>
<div class="data-results">
  <div data-result="<%= edit_form_id %>">
<% end %>
    <div class="">
      <%= form_block_object.send(*form_block) do |form|%>
      <% form_embed = form if @embedded_item && !embedded %>
      <% if @extra_log_type %>
        <%= form.hidden_field :extra_log_type, value: @extra_log_type_name %>
      <% end %>
      <%= model_reference_fields form %>

      <ul class="list-group">
        <li class="list-group-item edit-form-header">
          <% unless embedded %><%= inline_cancel_button %><% end %>
          <h4 class="list-group-item-heading"><%=caption%></h4>
          <%= render partial: 'common_templates/item_flags_block', locals: {f: form} unless item_flags_after || item_flags_array.length == 0 %>
        </li>


        <% if caption_before[:all_fields] %>
          <li class="list-group-item caption-before <%=form_object_item_type_us.hyphenate%>-caption-before-all_fields">
            <%= show_caption_before :all_fields %>
          </li>
        <% end %>


        <% item_list.each do |field_name| %>
          <%
            field_name = field_name.to_s
            field_name_sym = field_name.to_sym

            col = form_object_instance.class.columns_hash[field_name]

            raise FphsException.new "Column #{field_name} does not appear in the columns #{form_object_instance.class.columns_hash.map{|k,v| k}}" unless col
            column_type = col.type
            local_vars = {locals: {
              form: form,
              field_name_sym: field_name_sym,
              field_name: field_name,
              column_type: column_type,
              general_selection_name: general_selection_name,
              form_object_instance: form_object_instance,
              form_object_item_type_us: form_object_item_type_us,
              caption_before: caption_before
              }
            }
            local_vars[:locals][:locals] = local_vars[:locals]

          %>
          <%
          showed_caption_before = false
          if caption_before[field_name_sym] && field_name_sym != :notes
            showed_caption_before = true
          %>
            <li class="list-group-item caption-before <%=form_object_item_type_us.hyphenate%>-caption-before-<%=field_name_sym%>">
              <%= show_caption_before field_name_sym %>
            </li>
          <% end %>

          <li class="list-group-item edit-field-container <%= showed_caption_before ? 'showed-caption-before' : ''%> <%=form_object_item_type_us.hyphenate%>-<%=field_name_sym%>">
            <%= render local_vars.merge(partial: 'common_templates/edit_form_field') %>
          </li>

          <%  if item_flags_after == field_name_sym && item_flags_array.length > 0 %>
          <li class="list-group-item item-flag-container <%=form_object_item_type_us.hyphenate%>-<%=field_name_sym%>">
            <%= render partial: 'common_templates/item_flags_block', locals: {f: f} %>
          </li>
          <% end %>

        <% end # item_list.each %>

        <% unless embedded %>
          <%= render partial: 'common_templates/edit_form_references', locals: {embedded: embedded, form_embed: form_embed} %>
          <% if caption_before[:submit] %>
            <li class="list-group-item edit-form-references-container <%=form_object_item_type_us.hyphenate%>-caption-before-submit">
              <%= show_caption_before :submit %>
            </li>
          <% end %>
          <li class="list-group-item submit-action-container">
            <%= form.submit class: "btn btn-primary", value: 'Save' %>
          </li>
        <% end %>
      </ul>
      <% end %>

    </div>
      <% if @has_source %>
        <%= render partial: 'general_selections/definitions_block', locals: {item_type: "#{general_selection_name}_source", value: form_object_instance.source} %>
      <% end %>

      <% select_desc.each do |k,v| %>
        <%= render partial: 'general_selections/definitions_block', locals: {item_type: k, value: v} %>
      <% end %>

<% unless embedded %>
  </div>
</div>
<% end %>
