# Common Options
  label: button label  
  fields:
  - field_name_1
  - field_name_2
  button_label: add record button label
  caption_before:
    field_name: string caption to appear before field
    all_fields: caption to appear before all fields
    submit: caption to appear before submit button
    field_to_retain_label:
      keep_label: true
      caption: caption to appear before label
    field_with_different_views:
      show_caption: caption in show mode
      edit_caption: caption in edit mode
    reference_with_reference_name: |
      add caption above a reference action / list where
      the reference is named reference_<reference name>
  labels:
    field_name: label to show
  show_if:
    field_name:
      depends_on_field_name: conditional value
      current_mode: show | edit
  view_options:
    show_embedded_at_top: |
      true | false to position a single auto loaded embedded item
    hide_unless_creatable: |
      true | false to hide add-item buttons in activity logs if
      they are not creatable
    data_attribute: string or list of fields to use as the data attribute
    always_embed_reference: reference name to always show embedded (or 'never' to never embed one)
    always_embed_creatable_reference: |
      reference name to always show embedded during
      new/create (or 'never' to never embed one)
    alt_order: string or list of date / time or integer fields to use for ordering
    show_cancel: show cancel button alongside save button
    only_create_as_reference: |
      prevent creation as a standalone item, only embedded
      / referenced within another
    view_handlers: |
      name of handler for UI and models (options include: address, contact,
      subject)
    header_caption: header caption to use - can include { {substitution}}
    alt_width_classes: html classes (space separated) to replace standard col-* classes
    extra_class: html classes (space separated) to add to block
  filestore:
    container: {}
  save_action:
    label: button label
    on_update:
      create_next_creatable:
        if: 'ref: ** conditions reference **'
      show_panel:
        value: panel / category name
        if: 'ref: ** conditions reference **'
      hide_panel:
        value: panel / category name
        if: 'ref: ** conditions reference **'
      refresh_panel:
        - value: panel / category name
          if: 'ref: ** conditions reference **'
      expand_reference:
        - value: reference with caption - the option if means the first matched item will be used as the value
          if: 'ref: ** conditions reference **'
        - value: next | reference with caption
          if: 'ref: ** conditions reference **'
    on_create: {}
    on_save:
      notes: |
        on_save: provides a shorthand for on_create and on_update. on_create
        and on_update override on_save configurations.
  field_options:
    field_name:
      include_blank: |
        true or false to force a drop down field to include a selectable
        blank
      pattern: provide a mask for a text field
      value: |
        default value | now() | today() 
        
        NOTE this is set in the form fields, not before building the instances
      preset_value: |
        default value | now() | today() 
        
        NOTE this is set when building the instances and may be used to drive logic like an embed_resource_name field
      no_downcase: true to prevent downcasing of the attribute when stored to the database
      format: plain | markdown - for free text editor fields such as notes and description
      config:
        _comment: additional configurations for editor fields
        toolbar_type: advanced - adds in additional editor toolbar controls
      edit_as:
        field_type: alternative field name to use for selection of edit field
        alt_options: |
          optional specification of options for a select_ type field to
          use instead of general selection specified list. {Label: value, ...} or [Label,...].
          For the latter the Label is downcased automatically to generate the value
      calculate_with:
        sum: []
      prompt: used by some select fields for the placeholder prompt text
      use_app_type: |
        use the specified app type id or name instead of the user's current app type
        to filter protocol (and in the future other) selections
  dialog_before:
    field_name:
      name: message template name
      label: show dialog button label
    all_fields:
      name: message template name
      label: show dialog button label
    submit:
      name: message template name
      label: show dialog button label
  creatable_if: 'ref: ** conditions reference **'
  editable_if: |
    'ref: ** conditions reference **'

    NOTE: if not defined, the default is to only allow an item to be editable if it is the most recently created or
    item in the list. If you want items to be always editable, use *always: true*

  showable_if: 'ref: ** conditions reference **'
  add_reference_if: 'ref: ** conditions reference **'
  valid_if:
    on_save: ''
    on_create:
      hide_error: true|false (default false) to hide an error associated with this validation
    on_update:
        "ref: conditions": '** ref: conditions'
        all: 
          "model_table_name | this":
            validation_field_name_5: 
              validation_type: 'validation options'
  embed:
    resource_name: resource name for the item to embed
    resource_id: |
      (optional) literal or reference definition to use as an id of the embedded item

      When not specified, the embedded item is looked up based on the existence of a foreign key
      field in the target direct embed table pointing back to the parent record. The foreign key
      field is named "<singularized parent table name>_id"
    limit: (optional) default 1 - although other values may be set, the aim is not really to use direct embedded items for this

    # NOTE: direct embed may be configured either using this *embed:* configuration, or directly
    # defining fields on the parent and optionally target tables.
    # An advantage of using fields on the parent table is that the target embed resource may be specified on a
    # record by record basis.
    # To define an embedded item using fields alone, use one of the following field configurations:
    # <parent table>: embed_resource_name, embed_resource_id - directly reference the embedded item
    # <parent table>: embed_resource_name, <target embed table>: <singularized parent table name>_id - foreign key reference.
    # { {substitutions}} may reference attributes in an embedded item using { {embedded_item.<attribute name>}}

  references:
    model_name:
      label: button label
      from: this | master | any
      without_reference: true
      add: many | one_to_master | one_to_this
      add_with:
        extra_log_type: type name
        item_name:
          embedded_item:
            field_name: value
      filter_by:
        field_name: value to filter the referenced items by (may include { {substitution}}
      order_by:
        field_name: asc | desc
      type_config:
        activity_selector:
          # use an activity selector to show the creatable extra log types
          extra_log_type_key1: Label for button
          extra_log_type_key2: Label for button
          extra_log_type_key3: Label for button
      view_as:
        edit: hide|readonly|not_embedded|select_or_add
        show: hide|readonly|see_presence|filestore|as_edit
        new: outside_this|not_embedded|select_or_add
        _notes_:
        - "*outside_this* presents a button that triggers a form outside of this container
          in the regular panel"
      view_options:
        always_open: true # force the reference to always be expanded
      showable_if: # exclude to always show
      creatable_if: # exclude to always allow creation
  

  save_trigger:
    on_create:
      add_tracker: 
#!defs(save_triggers_add_tracker_options_defs.yaml)

      create_master: 
#!defs(save_triggers_create_master_options_defs.yaml)

      create_reference: 
#!defs(save_triggers_create_reference_options_defs.yaml)

      change_user_roles:
#!defs(save_triggers_change_user_roles_options_defs.yaml)

      create_filestore_container: 
#!defs(save_triggers_create_filestore_container_options_defs.yaml)

      notify: 
#!defs(save_triggers_notify_options_defs.yaml)

      pull_external_data: 
#!defs(save_triggers_pull_external_data_options_defs.yaml)

      update_reference: 
#!defs(save_triggers_update_reference_options_defs.yaml)

      update_this: 
#!defs(save_triggers_update_this_options_defs.yaml)

    on_update: {}
    
    on_save:
      # on_save provides a shorthand for on_create and on_update. on_create and on_update override on_save configurations.
    
    on_disable:
      # on_disable is triggered for any item that has a field named disabled that is switched to true
    
    on_upload: {}

    before_save:
      # Run a specified trigger before the current item has saved, allowing output to be reflected 
      # in the UI update, but before reference updates are available
      # Typically used for update_this, although can be applied to the other triggers if necessary

 