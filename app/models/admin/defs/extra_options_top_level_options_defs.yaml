# Top Level Options

# To include Config Library content anywhere within the configuration,
# add the following line (including the comment # symbol)
# The category and name must match one of the Config Library entries
# @library category name

# Any key: value pairs set here will be included in the object for use within
# runtime {{constants.constant_name}} substitutions
_contants:
  constant_name: a value

# Add table and field comments to the underlying database.
# If not set here, defaults are added:
#   table: a representation of the dynamic model, activity log or external identifier name
#   field: *caption_before:* or *labels:* setting for the field, if present
_comments:
  table: describe the table
  fields:
    field1: describe the field
    field2: ...

# NOTE: db_configs may be found within the default: options in older configurations.
# Although not recommended, the old configuration will continue to work
_db_columns:
  field_name:
    type: force the field type (string, datetime, date, integer, float, decimal)
  field_name2:
    type: ...

_configurations:
  secondary_key: field name to use as a secondary key to lookup items
  view_sql: define a view instead of a table to underpin this model

# To add a table or view to the data dictionary, add the _data_dictionary: with
# the essential keys, study: and domain:, plus any others that are required.
_data_dictionary:
  # Required
  study: the study name (case sensitive)
  domain: domain for the data (case sensitive)
  # Important
  prevent_update: |
    **true** - prevents these options from making additional updates and 
    potentially overwriting changes made outside of the dynamic model configuration
  # Optional
  source_name: defaults to the value set in the *name* field
  source_type: defaults to **database**
  form_name: optional, defaults to a blank value
  storage_type: defaults to **database**
  db_or_fs: defaults to current database name
  schema_or_path: defaults to the value set in the *schema name* field
  table_or_file: defaults to the value set in the *table name* field
  is_derived_var: true | false (default to not set) if the variable is derived from other data
  owner_email: email address of the owner of this data set

  # Override any data dictionary values for each field
  fields:
    field_name:
      attribute: override value
      attribute2: override value

  # Optionally handle referencing underlying variables if for each derived variable in the set
  derived_var_options:
    ref_source_type: optionally provide a variable source type to match items to
    ref_source_domain: |
      optionally provide a domain to match items to, 
      otherwise the domain of the matched item must match the new item
    name_regex_replace: optionally replace parts of a variable name - for example "_etl$"

_definitions:
  reusable_key: |
    &anchor reusable objects for substitution in definitions

_default:
  key1: applied to all activity definitions
  key2: applied to all activity definitions
