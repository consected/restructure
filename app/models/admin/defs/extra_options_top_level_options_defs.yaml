# Top Level Options

# To include Config Library content anywhere within the configuration,
# add the following line (including the comment # symbol)
# The category and name must match one of the Config Library entries
# @library category name

# Any key: value pairs set here will be included in the object for use within
# runtime `\{\{constants.constant_name\}\}` substitutions
_contants:
  constant_name: a value

# Add table and field comments to the underlying database.
# If not set here, defaults are added:
#   table: a representation of the dynamic model, activity log or external identifier name
#   field: *caption_before:* or *labels:* setting for the field, if present
_comments:
  table: describe the table
  fields:
    field1: describe the field
    field2: ...

# NOTE: db_configs may be found within the default: options in older configurations.
# Although not recommended, the old configuration will continue to work
_db_columns:
  field_name:
    type: force the field type (string, datetime, date, integer, float, decimal)
    array: false (default) | true - optional flag to indicate if this is an array type column
    index: false (default) | true - add an index
  field_name2:
    type: ...

_configurations:
  use_current_version: force the use of the current definition version when defining a dynamic class
  secondary_key: field name to use as a secondary key to lookup items
  view_sql: define a view instead of a table to underpin this model
  prevent_migrations: false (default) | true - prevent field / comment changes attempting to run DB migrations
  batch_trigger: 
    # Fire **batch_trigger:** task for each record, based on the batch_trigger in **default:** or activity log options
    # All records (up to the limit) will be triggered on the specified frequency.
    # In order to make the selection of the records in the batch conditional, consider using a dynamic_model with *view_sql*
    frequency: n units OR 'once' - for example 1 hour, 15 minutes, or 30 days. If set to 'once' then it will run once in ten seconds after saving
    run_at: time (or list of times) to run at on the frequency specified, for example '12:00', '6:00pm', 'sunday 8:00am' (with frequency '1 week')
    limit: maximum number of records to process in a single batch
    if: conditions on the records to select for processing
    # By default, the user in the process record will be used to perform the batch action. If no user_id field is specified in
    # the model, or you wish to use an alternative, specify one of the following instead
    app_type: optionally specify an app_type id to force the use of a batch user when perfoming actions
    user: optionally specify a user id (or email) to force use of the specified user when perfoming actions

# To add a table or view to the data dictionary, add the _data_dictionary: with
# the essential keys, study: and domain:, plus any others that are required.
# On every save of the dynamic definition the data dictionary will be updated,
# *unless* the `prevent_update: true` option is set.
# For each field representation we check for an existing datadic_variables record,
# matching on:
# - source_name
# - source_type
# - form_name
# - variable_name
# - owner (optionally)
# If a variable is found, we check if the bulk of the variable definition matches the 
# the field as it is defined in the dynamic model. If it matches then nothing is changed.
# If there has been a change then we update with the changes
# from the dynamic model. 
# If there was no variable found, we create one, with the dynamic model definition
# and the additional overrides defined below. These overrides are either at the level of the
# model, and used for every variable, or may be specified for each field.
# Derived variables may capture their definitions from the variables they reference.
_data_dictionary:
  # Required
  study: the study name (case sensitive)
  domain: domain for the data (case sensitive)
  # Important
  prevent_update: |
    **true** - prevents these options from making additional updates and 
    potentially overwriting changes made outside of the dynamic model configuration
  # Optional
  source_name: defaults to the value set in the *name* field
  source_type: defaults to **database**
  form_name: optional, defaults to a blank value
  storage_type: defaults to **database**
  db_or_fs: defaults to current database name
  schema_or_path: defaults to the value set in the *schema name* field
  table_or_file: defaults to the value set in the *table name* field
  is_derived_var: true | false (default to not set) if the variable is derived from other data
  owner_email: email address of the owner of this data set

  # Override any data dictionary values for each field
  fields:
    field_name:
      attribute: override value
      attribute2: override value

  # Optionally handle referencing underlying variables if for each derived variable in the set
  derived_var_options:
    ref_source_type: optionally provide a variable source type to match items to
    ref_source_domain: |
      optionally provide a domain to match items to, 
      otherwise the domain of the matched item must match the new item
    name_regex_replace: optionally replace parts of a variable name - for example "_etl$"

_definitions:
  reusable_key: |
    &anchor reusable objects for substitution in definitions

_default:
  key1: applied to all activity definitions
  key2: applied to all activity definitions
